########################################################
#########         PRODUCER         #####################
########################################################
### This file provides the equations defining the producer behaviour.
### Equation are behavioral. They are not used to calibration variable. They may be inverted to calibrate a parameter. 

### Margins paid to commodity cc on the domestic commodity c 
d(log(MGPD[cc, c])) = d(log(YQ[c])) + d(SUBST_MGPD[cc, c]) if MGPD[cc, c] <> 0

SUBST_MGPD_n[cc, c] = sum(- ES_MGPD[cc, ccc, c] * phi_MGPD[ccc, c]{-1} * d(log(PMGPD[cc, c]) - log(PMGPD[ccc, c])) if MGPD[ccc, c] <> 0 on ccc) if MGPD[cc, c] <> 0

phi_MGPD[cc, c] = PMGPD[cc, c] * MGPD[cc, c] / (sum(PMGPD[ccc, c] * MGPD[ccc, c] on ccc)) if MGPD[cc, c] <> 0

### Margins paid to commodity cc on the imported commodity c 
d(log(MGPM[cc, c])) = d(log( M[c])) + d(SUBST_MGPM[cc, c]) if MGPM[cc, c] <> 0

SUBST_MGPM_n[cc, c] = sum(- ES_MGPM[cc, ccc, c] * phi_MGPM[ccc, c]{-1} * d(log(PMGPM[cc, c]) - log(PMGPM[ccc, c])) if MGPM[ccc, c] <> 0 on ccc) if MGPM[cc, c] <> 0

phi_MGPM[cc, c] = PMGPM[cc, c] * MGPM[cc, c] / (sum(PMGPM[ccc, c] * MGPM[ccc, c] on ccc)) if MGPM[cc, c] <> 0

### Production of commodity c by sector s 
Y[c, s] = PhiY[c, s] * YQ[c] if Y[c, s] <> 0


## Demand for production factors of sector s
d(log(F_n[f, s])) = d(log(Y[s])) - d(log(PROG[f, s])) + d(SUBST_F[f, s])  if F_n[f, s] <> 0

d(SUBST_F_n[f, s]) = sum(- ES[f, ff, s] * phi[ff, s]{-1} * d(log(C[f, s]/PROG[f, s]) - log(C[ff, s]/PROG[ff, s])) on ff) if F_n[f, s] <> 0

phi[f, s] = C[f, s] * F_n[f, s] / (sum(C[ff, s] * F_n[ff, s] on ff))

## Investment in commodity c by sector s
## For a given sector, we assume that the investment structure is fixed over time. In other words, the investment good is a composite of several commodities in fixed proportion. 
d(log(I[c, s])) = d(log(IA[s])) if I[c, s] <> 0


## equation 2.11
#K[s] = (1 - Rdep[s]) * K[s]{-1} + IA[s] if K[s] <> 0
#
#d(log(IA[s])) = ADJUST(1, 1) * d(log(IA[s]{-1})) + ADJUST(1, 2) * d(log(Y_e[s])) + ADJUST(1, 3) * (log(K_n[s]{-1}) - log(K[s]{-1})) + ADJUST(1, 4) * d(SUBST_K[s]) + IMP_BUD[s] * @elem(GDP, %baseyear) / @elem(IA[s], %baseyear) if K[s] <> 0
#
#d(log(Y_e[s])) = ADJUST(71,2) * d(log(Y_e[s]{-1})) + (1 - ADJUST(71,2)) * d(log(Y[s]))
#


## Energy demand by type of energy in sector s
d(log(CI[ce, s])) = d(log(F[E, s])) + d(SUBST_CI[ce,s]) if CI[ce, s] <> 0

d(SUBST_CI_n[ce, s]) = sum(- ES_NRJ[ce, cee, s] * phi[E, cee, s] * d(log(PCI[ce, s]) - log(PCI[cee, s])) on cee) if CI[ce, s] <> 0

phi[E, ce, s] = PCI[ce, s]*CI[ce, s] / (sum(PCI[cee, s]*CI[cee, s] on cee))

## Self employed and employed
#
## equation 2.21
#d(log(L_S[s])) = d(log(L[s]))
#L_SE[s] = L[s] - L_S[s] if L_SE[s] <> 0
#
## equation 2.22
#L_S = sum(L_S[s] if L_S[s] <> 0 on s)
#
## equation 2.23
#L_SE = sum(L_SE[s] if L_SE[s] <> 0 on s)
#
## Notional demand for material c of the sector a
#
## equation 2.24
#d(log(MAT[cm, s])) = d(log(MAT[s])) + d(SUBST_MAT[cm, s]) if MAT[cm, s] <> 0
#
#
#
#
#PROG_K[s] = PROG_K[s]{-1} * (1 + GR_PROG_K[s])
#PROG_L[s] = PROG_L[s]{-1} * (1 + GR_PROG_L[s])
#PROG_E[s] = PROG_E[s]{-1} * (1 + GR_PROG_E[s])
#
#GR_PROG_E[s] =  alpha_PROG_E[s] + alpha_PROG_E_PE*((log(PE[s])- log(PCH)>0)*d(log(PE[s])-log(PCH)))
#