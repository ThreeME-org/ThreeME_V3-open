include ..\model\lists
 

##### Transport

## This file provides the equations defining the hybrid block on transport.

#### Link with the rest of the model

##! Price of long distance transport (by automobile and train)  
d(log(P_km_traveler[crai])) = d(log(PCH[crai])) 
d(log(P_km_traveler[croa])) = d(log(PCH[croa]))

#### Arbitrage between transport modes 
## The arbitrage between transport modes is defined in 5 level. Level 1 determine the evolution of air, long and short distance transport. In level 2, the consummer may substitutie bewteen long distance transport types (automobile and train) and short distance transport types (automobile and bus). Level 3 defines the arbitrage between electric and thermic automobile whereas level 4 defines the arbitrage between automobile class. In level 5, substitution between types of thermic automobiles may be introduced. \\

### Level 1: Determination of air, long and short distance transport

##! Kilometer-travelers for air transport
d(log(Km_traveler[cair])) = (@year>%baseyear)*(1.5 * d(log(DISPINC_AT_VAL/PCH)) - 0.7 * d(log(PCH[cair])-log(PCH)))

##! Kilometer-travelers for long distance transport (by automobile and train)      
d(log(km_traveler_LD)) = (@year>%baseyear)*(0.6 * d(log(DISPINC_AT_VAL/PCH)) - 0.4 * d(log(P_km_traveler_LD/PCH)))

##! Price of long distance Kilometer-traveler (automobile and train)   
P_km_traveler_LD * km_traveler_LD = P_km_traveler[crai] * km_traveler[crai] + P_km_trav_auto_LD * km_trav_auto_LD

# Replace the previous approximation below:
# d(log(P_km_traveler_LD)) = (km_traveler[crai]{-1} * d(log(PCH[crai])) + km_trav_auto_LD{-1} * d(log(P_km_trav_auto_LD))) / (km_traveler[crai]{-1} + km_trav_auto_LD{-1})
 
##! Kilometer-travelers for short distance transport (by automobile and bus)     
d(log(km_traveler_SD)) = (@year>%baseyear)*(0.4*d(log(DISPINC_AT_VAL/PCH)) - 0.3 * d(log(P_km_traveler_SD/PCH)))

##! Price of short distance  Kilometer-traveler (by automobile and bus)    
P_km_traveler_SD * km_traveler_SD = P_km_traveler[croa] * km_traveler[croa] + P_km_trav_auto_SD * km_trav_auto_SD

# Replace the previous approximation below:
# d(log(P_km_traveler_SD)) = (km_traveler[croa]{-1} * d(log(PCH[croa])) + km_trav_auto_SD{-1} * d(log(PCH_auto_SD))) / (km_traveler[croa]{-1} + km_trav_auto_SD{-1})


### Level 2: Arbitrage between long distance transport (automobile and train)
 
##! Share of Kilometer-travelers by automobile into the long distance Kilometer-travelers
phi_km_trav_auto_LD = P_km_trav_auto_LD * km_trav_auto_LD / (P_km_traveler_LD * km_traveler_LD)

##! Kilometer-travelers for long distance by automobile 
d(log(km_trav_auto_LD)) = (@year > %baseyear) * (d(log(km_traveler_LD)) _
                              +  0.5 * (1 - phi_km_trav_auto_LD{-1}) * d(log(P_km_trav_auto_LD)-log(P_km_traveler[crai]))) 

##! Kilometer-travelers for transport by train 
d(log(km_traveler[crai])) = (@year>%baseyear)*(d(log(km_traveler_LD)) _
                              -  0.5 * phi_km_trav_auto_LD{-1} * d(log(P_km_traveler[crai])-log(P_km_trav_auto_LD)))
    
### Level 2: Arbitrage between short distance transport (automobile and bus)
##! Kilometer-travelers for short distance by automobile 
d(log(km_trav_auto_SD)) = (@year > %baseyear) * (d(log(km_traveler_SD)) _ 
                             - 0.2 * (1 - phi_km_trav_auto_SD{-1}) * d(log(P_km_trav_auto_SD)-log(P_km_traveler[croa])))

##! Share of Kilometer-travelers by automobile into the short distance Kilometer-travelers
phi_km_trav_auto_SD = P_km_trav_auto_SD * km_trav_auto_SD / (P_km_traveler_SD * km_traveler_SD)

##! Kilometer-travelers for transport by road (bus)
d(log(km_traveler[croa])) = (@year > %baseyear) * (d(log(km_traveler_SD)) _ 
                             - 0.2 * phi_km_trav_auto_SD{-1} * d(log(P_km_traveler[croa])-log(P_km_trav_auto_SD))) 

#### Transport by automobile
##! Kilometers for long distance by automobile 
d(log(km_auto_LD)) = (@year > %baseyear) * (d(log(km_trav_auto_LD)) - d(log(travperauto_LD)))

##! Kilometers for short distance by automobile 
d(log(km_auto_SD)) = (@year > %baseyear) * (d(log(km_trav_auto_SD)) - d(log(travperauto_SD)))

##! Total kilometers by automobile 
km_auto = km_auto_LD + km_auto_SD


##! Automobiles stock
d(log(AUTO)) = (@year > %baseyear) * (d(log(Km_auto)) - d(log(kmPerAuto))) 

# Automobiles stock (for verification)
AUTObis = sum(AUTO[ecl] on ecl)

##! New automobiles
NewAUTO = (@year >  %baseyear)*(d(AUTO) + AUTO[DES]) _
            + (@year <= %baseyear) * NewAUTO{-1}

### Level 3: Arbitrage between electric and thermic automobile
##! New electric automobiles
NewAUTO_elec = NewAUTO*share_elec

##! New thermic automobiles
NewAUTO_th = NewAUTO - NewAUTO_elec


### Level 4: Arbitrage between automobile class 

##! New electric automobiles of class $ecl$
NewAUTO_elec[ecl] = phi_NewAUTO_elec[ecl] * NewAUTO_elec
## Every class of electric car has no emission. But their energy consumption vary per km. \\  

##! New thermic automobiles of class $ecl$
NewAUTO_th[ecl] = phi_NewAUTO_th[ecl] * NewAUTO_th

##! New thermic automobiles of class $ecl$ (for verification)
NewAUTO_th_bis[ecl] = NewAUTO_th[ecl,coil] + NewAUTO_th[ecl,cgas]

##! Stock of class $ecl$ electric automobiles
d(AUTO_elec[ecl]) = (@year>%baseyear)*(NewAUTO_elec[ecl] - AUTO_elec[ecl,DES])

##! Stock of class $ecl$ thermic automobiles
#d(AUTO_th[ecl])   = (@year>%baseyear)*(NewAUTO_th[ecl]   - AUTO_th[ecl,DES]  )
AUTO_th[ecl]  = AUTO_th[ecl,coil] + AUTO_th[ecl,cgas]


##! Stock of class $ecl$ automobiles
AUTO[ecl] = AUTO_elec[ecl] + AUTO_th[ecl]

##! Class $ecl$ electric automobiles destroyed
AUTO_elec[ecl,DES] = delta_AUTO_elec[ecl,DES]*AUTO_elec[ecl]{-1}

##! Class $ecl$ thermic automobiles destroyed
#AUTO_th[ecl,DES] = delta_AUTO_th[ecl,DES]*AUTO_th[ecl]{-1}
AUTO_th[ecl,DES] = AUTO_th[ecl,coil,DES] + AUTO_th[ecl,cgas,DES] 

##! Class $ecl$ automobiles destroyed
AUTO[ecl,DES] = AUTO_elec[ecl,DES] + AUTO_th[ecl,DES]

##! Automobiles destroyed
AUTO[DES] = sum(AUTO[ecl, DES] on ecl)


### Level 5: Arbitrage between types of thermic automobiles
##! New thermic automobiles fueled with oil of class $ecl$
NewAUTO_th[ecl,coil] = phi_NewAUTO_th[ecl,coil] * NewAUTO_th[ecl] if NewAUTO_th[ecl,coil]  <> 0


##! New thermic automobiles fueled with gas of class $ecl$
NewAUTO_th[ecl,cgas] = phi_NewAUTO_th[ecl,cgas] * NewAUTO_th[ecl] if NewAUTO_th[ecl,cgas]  <> 0


##! Stock of class $ecl$ thermic automobiles fueled with oil 
d(AUTO_th[ecl,coil])   = (@year>%baseyear)*(NewAUTO_th[ecl,coil]   - AUTO_th[ecl,coil,DES]  )

##! Class $ecl$ thermic automobiles fueled with oil destroyed
AUTO_th[ecl,coil,DES] = delta_AUTO[ecl,coil,DES]*AUTO_th[ecl,coil]{-1}

##! Stock of class $ecl$ thermic automobiles fueled with gas
d(AUTO_th[ecl,cgas])   = (@year>%baseyear)*(NewAUTO_th[ecl,cgas]   - AUTO_th[ecl,cgas,DES]  )

##! Class $ecl$ thermic automobiles fueled with gas destroyed
AUTO_th[ecl,cgas,DES] = delta_AUTO[ecl,cgas,DES]*AUTO_th[ecl,cgas]{-1}

### Aggregation of automobiles

##! Electric automobiles
AUTO_elec = sum(AUTO_elec[ecl] on ecl)

##! Thermic automobiles
AUTO_th = sum(AUTO_th[ecl] on ecl)


##! Electric automobiles destroyed
AUTO_elec[DES] = sum(AUTO_elec[ecl, DES] on ecl)

##! Thermic automobiles destroyed
AUTO_th[DES] = sum(AUTO_th[ecl, DES] on ecl)

### Households' energy consumption related to transport

##! Kilometers by electric automobile of class $ecl$
KM_AUTO_elec[ecl]    = kmPerAuto_elec[ecl]    * AUTO_elec[ecl]        if KM_AUTO_elec[ecl]    <> 0

##! Kilometers by class $ecl$ thermic automobiles fueled with oil
KM_AUTO_th[ecl,coil] = kmPerAuto_th[ecl,coil] * AUTO_th[ecl,coil]     if KM_AUTO_th[ecl,coil] <> 0
 
##! Kilometers by class $ecl$ thermic automobiles fueled with gas
KM_AUTO_th[ecl,cgas] = kmPerAuto_th[ecl,cgas] * AUTO_th[ecl,cgas]     if KM_AUTO_th[ecl,cgas] <> 0 

##! Energy consumption of class $ecl$ automobiles fueled with electricity expressed in tonne of oil equivalent
CH_AUTO_toe[ecl,cele] = KM_AUTO_elec[ecl]    * toePerKm[ecl,cele]   if CH_AUTO_toe[ecl,cele]  <> 0

##! Energy consumption of class $ecl$ automobiles fueled with oil expressed in tonne of oil equivalent
CH_AUTO_toe[ecl,coil] = KM_AUTO_th[ecl,coil] * toePerKm[ecl,coil]   if CH_AUTO_toe[ecl,coil]  <> 0

##! Energy consumption of class $ecl$ automobiles fueled with gas expressed in tonne of oil equivalent
CH_AUTO_toe[ecl,cgas] = KM_AUTO_th[ecl,cgas] * toePerKm[ecl,cgas]   if CH_AUTO_toe[ecl,cgas]  <> 0

##! Energy consumption of automobiles fueled with electricity expressed in tonne of oil equivalent
CH_AUTO_toe[cele] = sum(CH_AUTO_toe[ecl,cele] on ecl)

##! Energy consumption of automobiles fueled with oil expressed in tonne of oil equivalent
CH_AUTO_toe[coil] = sum(CH_AUTO_toe[ecl,coil] on ecl)

##! Energy consumption of automobiles fueled with gas expressed in tonne of oil equivalent
CH_AUTO_toe[cgas] = sum(CH_AUTO_toe[ecl,cgas] on ecl)

##! Households' final consumption of electricity
d(log(CH_AUTO[cele])) = d(log(CH_AUTO_toe[cele]))

##! Households' final consumption of oil
d(log(CH_AUTO[coil])) = d(log(CH_AUTO_toe[coil]))

##! Households' final consumption of gas
d(log(CH_AUTO[cgas])) = d(log(CH_AUTO_toe[cgas]))




# ####################
# ############ VERIF
verif_AUTObis = (AUTObis/AUTO - 1)*100 if AUTO <> 0

Verif_NewAUTO_th[ecl] = (NewAUTO_th_bis[ecl]/NewAUTO_th[ecl]-1)*100 if NewAUTO_th[ecl] <> 0


# DO NOT REUSE


# Equation H.4.79 and H.4.80

# NewAUTO[CA] = NewAUTO_elec + NewAUTO_th[CA]   #modifié

# NewAUTO[c] = NewAUTO_th[c]  where c in %list_ener_class \ CA