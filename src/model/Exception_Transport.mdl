include ..\model\lists
 

##### Transport

## This file provides the equations defining the hybrid block on transport.

#### Link with the rest of the model

##! Price of long distance transport (by automobile and train)  
d(log(P_km_traveler[crai])) = d(log(PCH[crai])) 
d(log(P_km_traveler[croa])) = d(log(PCH[croa]))

#### Arbitrage between transport modes 

### Level 1: Determination of air, long and short distance transport

##! Kilometer-travelers for air transport
d(log(Km_traveler[cair])) = (@year>%baseyear)*(1.5 * d(log(DISPINC_AT_VAL/PCH)) - 0.7 * d(log(PCH[cair])-log(PCH)))

##! Kilometer-travelers for long distance transport (by automobile and train)      
d(log(km_traveler_LD)) = (@year>%baseyear)*(0.6 * d(log(DISPINC_AT_VAL/PCH)) - 0.4 * d(log(P_km_traveler_LD/PCH)))

##! Price of long distance Kilometer-traveler (automobile and train)   
P_km_traveler_LD * km_traveler_LD = P_km_traveler[crai] * km_traveler[crai] + P_km_trav_auto_LD * km_trav_auto_LD

# Replace the previous approximation below:
# d(log(P_km_traveler_LD)) = (km_traveler[crai]{-1} * d(log(PCH[crai])) + km_trav_auto_LD{-1} * d(log(P_km_trav_auto_LD))) / (km_traveler[crai]{-1} + km_trav_auto_LD{-1})
 
##! Kilometer-travelers for short distance transport (by automobile and bus)     
d(log(km_traveler_SD)) = (@year>%baseyear)*(0.4*d(log(DISPINC_AT_VAL/PCH)) - 0.3 * d(log(P_km_traveler_SD/PCH)))

##! Price of short distance  Kilometer-traveler (by automobile and bus)    
P_km_traveler_SD * km_traveler_SD = P_km_traveler[croa] * km_traveler[croa] + P_km_trav_auto_SD * km_trav_auto_SD

# Replace the previous approximation below:
# d(log(P_km_traveler_SD)) = (km_traveler[croa]{-1} * d(log(PCH[croa])) + km_trav_auto_SD{-1} * d(log(PCH_auto_SD))) / (km_traveler[croa]{-1} + km_trav_auto_SD{-1})


### Level 2: Arbitrage between long distance transport (automobile and train)
 
##! Share of Kilometer-travelers by automobile into the long distance Kilometer-travelers
phi_km_trav_auto_LD = P_km_trav_auto_LD * km_trav_auto_LD / (P_km_traveler_LD * km_traveler_LD)

##! Kilometer-travelers for long distance by automobile 
d(log(km_trav_auto_LD)) = (@year > %baseyear) * (d(log(km_traveler_LD)) _
                              +  0.5 * (1 - phi_km_trav_auto_LD{-1}) * d(log(P_km_trav_auto_LD)-log(P_km_traveler[crai]))) 

##! Kilometer-travelers for transport by train 
d(log(km_traveler[crai])) = (@year>%baseyear)*(d(log(km_traveler_LD)) _
                              -  0.5 * phi_km_trav_auto_LD{-1} * d(log(P_km_traveler[crai])-log(P_km_trav_auto_LD)))
    
### Level 2: Arbitrage between short distance transport (automobile and bus)
##! Kilometer-travelers for short distance by automobile 
d(log(km_trav_auto_SD)) = (@year > %baseyear) * (d(log(km_traveler_SD)) _ 
                             - 0.2 * (1 - phi_km_trav_auto_SD{-1}) * d(log(P_km_trav_auto_SD)-log(P_km_traveler[croa])))

##! Share of Kilometer-travelers by automobile into the short distance Kilometer-travelers
phi_km_trav_auto_SD = P_km_trav_auto_SD * km_trav_auto_SD / (P_km_traveler_SD * km_traveler_SD)

##! Kilometer-travelers for transport by road (bus)
d(log(km_traveler[croa])) = (@year > %baseyear) * (d(log(km_traveler_SD)) _ 
                             - 0.2 * phi_km_trav_auto_SD{-1} * d(log(P_km_traveler[croa])-log(P_km_trav_auto_SD))) 

#### Transport by automobile
##! Kilometers for long distance by automobile 
d(log(km_auto_LD)) = (@year > %baseyear) * (d(log(km_trav_auto_LD)) - d(log(travperauto_LD)))

##! Kilometers for short distance by automobile 
d(log(km_auto_SD)) = (@year > %baseyear) * (d(log(km_trav_auto_SD)) - d(log(travperauto_SD)))

##! Total kilometers by automobile 
km_auto = km_auto_LD + km_auto_SD


##! Automobiles stock
d(log(AUTO)) = (@year > %baseyear) * (d(log(Km_auto)) - d(log(kmPerAuto))) 

# Automobiles stock (for verification)
AUTObis = sum(AUTO[ecl] on ecl)

##! New automobiles
NewAUTO = (@year >  %baseyear)*(d(AUTO) + AUTO[DES]) _
            + (@year <= %baseyear) * NewAUTO{-1}

### Level 3: Arbitrage between electric and thermic automobile
 
##! New electric automobiles
NewAUTO_elec = NewAUTO*share_elec

##! New thermic automobiles
NewAUTO_th = NewAUTO - NewAUTO_elec


### Level 4: Arbitrage between automobile class 

##! New electric automobiles of class $ecl$
NewAUTO_elec[ecl] = phi_elec[ecl] * NewAUTO_elec
## Every class of electric car has no emission. But their energy consumption vary per km. \\  

##! New thermic automobiles of class $ecl$
NewAUTO_th[ecl] = phi_th[ecl] * NewAUTO_th

##! Stock of class $ecl$ electric automobiles
d(AUTO_elec[ecl]) = (@year>%baseyear)*(NewAUTO_elec[ecl] - AUTO_elec[ecl,DES])

##! Stock of class $ecl$ thermic automobiles
d(AUTO_th[ecl])   = (@year>%baseyear)*(NewAUTO_th[ecl]   - AUTO_th[ecl,DES]  )

##! Stock of class $ecl$ automobiles
AUTO[ecl] = AUTO_elec[ecl] + AUTO_th[ecl]

##! Class $ecl$ electric automobiles destroyed
AUTO_elec[ecl,DES] = delta_AUTO_elec[ecl,DES]*AUTO_elec[ecl]{-1}

##! Class $ecl$ thermic automobiles destroyed
AUTO_th[ecl,DES] = delta_AUTO_th[ecl,DES]*AUTO_th[ecl]{-1}

##! Class $ecl$ automobiles destroyed
AUTO[ecl,DES] = AUTO_elec[ecl,DES] + AUTO_th[ecl,DES]

##! Automobiles destroyed
AUTO[DES] = sum(AUTO[ecl, DES] on ecl)




### Level 5: ???





# Aspect sobriété dans l'automobile et efficacité énérgetique     modifié
 # Equation H.4.89 and H.4.90

#AUTO[ecl,ce] = AUTO[ecl]*SHARE_AUTO[ecl,ce]      

#AUTO[ce] = sum(AUTO[ce] on h)

#SHARE_AUTO[CA,23] = AUTO_elec/AUTO[CA]

#SHARE_AUTO[ c, 23] = 0      where c in %list_ener_class \ CA

#SHARE_AUTO[CA,ce2] = (1-SHARE_AUTO[CA,23])*@elem(AUTO[CA,ce2]/(AUTO[CA,21] +AUTO[CA,22]+AUTO[CA,24]),%baseyear)  




# Dans cette exception, nous allons redéfinir le parc auto en ajoutant une spécification spéciale pour les véhicules électriques.
# L'idée est d'effectuer un choix de véhicules en deux étapes : 1 : choix entre électrique et thermique, 2 : choix de la classe d'énergie en fct des gCO2/km pour le thermique et des kWh/km pour l'elec.

##AUTOS ELECTRIQUES         modifié

#dlog(KM_AUTO_elec[ecl]) = dlog(AUTO_elec[ecl]) - dlog(KmPerAuto)

#KM_AUTO_elec = sum(KM_AUTO_elec[ecl] on pcl) 

#d(AUTO_elec)=(@year>%baseyear)*(NewAUTO*share_elec-delta_AUTO[CA,DES]*AUTO_elec{-1})+ _
#                (@year <= %baseyear) * (AUTO_elec{-1} * (GR_REAL ) )




  
#d(AUTO_th[ecl])= (@year>%baseyear)*(NewAUTO*(1-share_elec)*phi_th[ecl]-delta_AUTO[ecl,DES]*AUTO_th[ecl]{-1}) + _
#                  (@year <= %baseyear)*(AUTO_th[ecl]{-1} * (GR_REAL ) ) 

#AUTO[CA] =  AUTO_th[CA] + AUTO_elec         #modifié

#AUTO[c] =  AUTO_th[c]   where c in %list_ener_class \ CA


#### AUTOS THERMIQUES          modifié

#dlog(KM_AUTO_th[ecl]) = dlog(AUTO_th[ecl]) - dlog(KmPerAuto) if AUTO_th[ecl]>0

#KM_AUTO_th = sum(KM_AUTO_th[ecl] on ecl) 

#KM_AUTO[CA,23]= KM_AUTO_elec 

#KM_AUTO[c,23]= 0    where c in %list_ener_class \CA 

#KM_AUTO[ecl,ce2]= KM_AUTO_th[ecl,ce2]

#dlog(KM_AUTO_th[ecl,ce2]) = dlog(AUTO_th[ecl,ce2]) - dlog(KmPerAuto) if AUTO_th[ecl,ce2]>0

#dlog(AUTO_th[ecl,ce2]) =  dlog(AUTO_th[ecl])      if AUTO_th[ecl,ce2]>0

#AUTO_th[ce2] =  sum(AUTO_th[ecl,ce2] on ecl)

#AUTO_th =  sum(AUTO_th[ecl]  on ecl) 

#AUTO_th =  sum(AUTO_th  on h)


#Nombre d'autos

#AUTO[ce]=sum(AUTO[ecl,ce] on ecl)







# ####################
# ############ VERIF
verif_AUTObis = (AUTObis/AUTO - 1)*100 if AUTO <> 0




# DO NOT REUSE


# Equation H.4.79 and H.4.80

# NewAUTO[CA] = NewAUTO_elec + NewAUTO_th[CA]   #modifié

# NewAUTO[c] = NewAUTO_th[c]  where c in %list_ener_class \ CA