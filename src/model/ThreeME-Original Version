+MGRD_CTRP  = ( 1  - phi_MGRM_CTRP )  * MGR_CTRP

MGRM_CTRP  = phi_MGRM_CTRP  * MGR_CTRP

d(SUBST_n_CIM_CNJN_ASER)  =  - ES_CIM_CNJN_ASER  * d(log(PCID_CNJN_ASER)  - log(PCIM_CNJN_ASER))

PROG_K_ANRE  = PROG_K_ANRE(-1)  * ( 1  + GR_PROG_K_ANRE )

RNTAXPM_CNJM  = NTAXPM_VAL_CNJM  / ( PM_CNJM  * M_CNJM )

RNTAXPM_CNJN  = NTAXPM_VAL_CNJN  / ( PM_CNJN  * M_CNJN )

POTHPTM_CSER  * OTHPTM_CSER  = ROTHPTM_CSER  * PM_CSER  * M_CSER

PM_CNJN  = TC  * PWD_CNJN

PM_CNJM  = TC  * PWD_CNJM

NOS_ANFO  = GOS_ANFO  - @elem(PK_ANFO(-1) , 2000)  * Rdep_ANFO  * F_K_ANFO(-1)

SUBST_MGPM_CTRP_CNJM  = ADJUST6_MGPM_CTRP_CNJM  * SUBST_n_MGPM_CTRP_CNJM  + ( 1  - ADJUST6_MGPM_CTRP_CNJM )  * SUBST_MGPM_CTRP_CNJM(-1)

SUBST_MGPM_CTRP_CNJN  = ADJUST6_MGPM_CTRP_CNJN  * SUBST_n_MGPM_CTRP_CNJN  + ( 1  - ADJUST6_MGPM_CTRP_CNJN )  * SUBST_MGPM_CTRP_CNJN(-1)

NTAXPD_CSER  = VATD_CSER  + OTHPTD_CSER  + SUBPD_CSER

CHM_CNJM  = phi_CHM_CNJM  * CH_CNJM

CHM_CNJN  = phi_CHM_CNJN  * CH_CNJN

ES_act_K_E_ANFO  = ES_K_E_ANFO  - ( C_K_ANFO  / PROG_K_ANFO  / ( C_E_ANFO  / PROG_E_ANFO )  / @elem(C_K_ANFO  / PROG_K_ANFO  / ( C_E_ANFO  / PROG_E_ANFO ) , 2000) < 0.99999 )  * ( log(F_K_ANFO  * PROG_K_ANFO  / ( F_E_ANFO  * PROG_E_ANFO )  / @elem(F_K_ANFO  * PROG_K_ANFO  / ( F_E_ANFO  * PROG_E_ANFO ) , 2000))  / log(C_K_ANFO  / PROG_K_ANFO  / ( C_E_ANFO  / PROG_E_ANFO )  / @elem(C_K_ANFO  / PROG_K_ANFO  / ( C_E_ANFO  / PROG_E_ANFO ) , 2000)  * 1.0000000001)  + ES_K_E_ANFO )  - ( C_K_ANFO  / PROG_K_ANFO  / ( C_E_ANFO  / PROG_E_ANFO )  / @elem(C_K_ANFO  / PROG_K_ANFO  / ( C_E_ANFO  / PROG_E_ANFO ) , 2000) > 1.00001 )  * ( log(F_K_ANFO  * PROG_K_ANFO  / ( F_E_ANFO  * PROG_E_ANFO )  / @elem(F_K_ANFO  * PROG_K_ANFO  / ( F_E_ANFO  * PROG_E_ANFO ) , 2000))  / log(C_K_ANFO  / PROG_K_ANFO  / ( C_E_ANFO  / PROG_E_ANFO )  / @elem(C_K_ANFO  / PROG_K_ANFO  / ( C_E_ANFO  / PROG_E_ANFO ) , 2000)  * 1.0000000001)  + ES_K_E_ANFO )

CIM_CTRP_ANFO  = phi_CIM_CTRP_ANFO  * CI_CTRP_ANFO

GD  = 0  + GD_CIND  + GD_CTRP  + GD_CSER  + GD_CNJN

PCH_CNJM  * CH_CNJM  = PCHD_CNJM  * CHD_CNJM  + PCHM_CNJM  * CHM_CNJM

PCH_CNJN  * CH_CNJN  = PCHD_CNJN  * CHD_CNJN  + PCHM_CNJN  * CHM_CNJN

GM  = 0  + GM_CIND  + GM_CTRP  + GM_CSER  + GM_CNJN

ES_act_MAT_E_ATPO  = ES_MAT_E_ATPO  - ( C_MAT_ATPO  / PROG_MAT_ATPO  / ( C_E_ATPO  / PROG_E_ATPO )  / @elem(C_MAT_ATPO  / PROG_MAT_ATPO  / ( C_E_ATPO  / PROG_E_ATPO ) , 2000) < 0.99999 )  * ( log(F_MAT_ATPO  * PROG_MAT_ATPO  / ( F_E_ATPO  * PROG_E_ATPO )  / @elem(F_MAT_ATPO  * PROG_MAT_ATPO  / ( F_E_ATPO  * PROG_E_ATPO ) , 2000))  / log(C_MAT_ATPO  / PROG_MAT_ATPO  / ( C_E_ATPO  / PROG_E_ATPO )  / @elem(C_MAT_ATPO  / PROG_MAT_ATPO  / ( C_E_ATPO  / PROG_E_ATPO ) , 2000)  * 1.0000000001)  + ES_MAT_E_ATPO )  - ( C_MAT_ATPO  / PROG_MAT_ATPO  / ( C_E_ATPO  / PROG_E_ATPO )  / @elem(C_MAT_ATPO  / PROG_MAT_ATPO  / ( C_E_ATPO  / PROG_E_ATPO ) , 2000) > 1.00001 )  * ( log(F_MAT_ATPO  * PROG_MAT_ATPO  / ( F_E_ATPO  * PROG_E_ATPO )  / @elem(F_MAT_ATPO  * PROG_MAT_ATPO  / ( F_E_ATPO  * PROG_E_ATPO ) , 2000))  / log(C_MAT_ATPO  / PROG_MAT_ATPO  / ( C_E_ATPO  / PROG_E_ATPO )  / @elem(C_MAT_ATPO  / PROG_MAT_ATPO  / ( C_E_ATPO  / PROG_E_ATPO ) , 2000)  * 1.0000000001)  + ES_MAT_E_ATPO )

CIM_CNJM_ANFO  = phi_CIM_CNJM_ANFO  * CI_CNJM_ANFO

PQD  * QD  = 0  + PQD_CIND  * QD_CIND  + PQD_CTRP  * QD_CTRP  + PQD_CSER  * QD_CSER  + PQD_CNJN  * QD_CNJN  + PQD_CNJM  * QD_CNJM

verif_PMbis_CNJM  = ( PMbis_CNJM  / PM_CNJM  - 1 )  * 100

verif_PMbis_CNJN  = ( PMbis_CNJN  / PM_CNJN  - 1 )  * 100

PQM  * QM  = 0  + PQM_CIND  * QM_CIND  + PQM_CTRP  * QM_CTRP  + PQM_CSER  * QM_CSER  + PQM_CNJN  * QM_CNJN  + PQM_CNJM  * QM_CNJM

SAV_H_VAL  = DISPINC_AT_VAL  - PCH  * CH

CID_CSER_ANRE  = ( 1  - phi_CIM_CSER_ANRE )  * CI_CSER_ANRE

PMGPM_CSER_CIND  = PMGPD_CSER_CIND

PCHM_CNJM  = PMSBVAT_CNJM  * ( 1  + RVATM_CNJM )  / ( 1  + @elem(RVATM_CNJM , 2000) )

d(SUBST_n_CIM_CNJN_AIND)  =  - ES_CIM_CNJN_AIND  * d(log(PCID_CNJN_AIND)  - log(PCIM_CNJN_AIND))

PCHM_CNJN  = PMSBVAT_CNJN  * ( 1  + RVATM_CNJN )  / ( 1  + @elem(RVATM_CNJN , 2000) )

PCI_CNJM_ATPT  * CI_CNJM_ATPT  = PCID_CNJM_ATPT  * CID_CNJM_ATPT  + PCIM_CNJM_ATPT  * CIM_CNJM_ATPT

CID_CSER_ASER  = ( 1  - phi_CIM_CSER_ASER )  * CI_CSER_ASER

phi_E_CNJM_AIND  = PCI_CNJM_AIND  * CI_CNJM_AIND  / ( 0  + PCI_CNJN_AIND  * CI_CNJN_AIND  + PCI_CNJM_AIND  * CI_CNJM_AIND )

PCI_CNJM_ATPO  * CI_CNJM_ATPO  = PCID_CNJM_ATPO  * CID_CNJM_ATPO  + PCIM_CNJM_ATPO  * CIM_CNJM_ATPO

SUBST_n_MGPM_CTRP_CNJN  = 0  +  - ES_MGPM_CTRP_CTRP_CNJN  * phi_MGPM_CTRP_CNJN(-1)  * d(log(PMGPM_CTRP_CNJN)  - log(PMGPM_CTRP_CNJN))  +  - ES_MGPM_CTRP_CSER_CNJN  * phi_MGPM_CSER_CNJN(-1)  * d(log(PMGPM_CTRP_CNJN)  - log(PMGPM_CSER_CNJN))

SUBST_n_MGPM_CTRP_CNJM  = 0  +  - ES_MGPM_CTRP_CTRP_CNJM  * phi_MGPM_CTRP_CNJM(-1)  * d(log(PMGPM_CTRP_CNJM)  - log(PMGPM_CTRP_CNJM))  +  - ES_MGPM_CTRP_CSER_CNJM  * phi_MGPM_CSER_CNJM(-1)  * d(log(PMGPM_CTRP_CNJM)  - log(PMGPM_CSER_CNJM))

d(R_ATPT)  = d(R)

CHM_CTRP  = phi_CHM_CTRP  * CH_CTRP

d(R_ATPO)  = d(R)

d(log(1  + MARKUP_n_ANRE))  = RHO_MARKUP_Y  * d(log(CUR_ANRE))

NTAXPD_CTRP  = VATD_CTRP  + OTHPTD_CTRP  + SUBPD_CTRP

PCI_CSER_AIND  * CI_CSER_AIND  = PCID_CSER_AIND  * CID_CSER_AIND  + PCIM_CSER_AIND  * CIM_CSER_AIND

NTAXI_VAL_ANRE  = RNTAXI_ANRE  * PY_ANRE  * Y_ANRE

d(log(CI_CTRP_ANRE))  = d(log(TRSP_ANRE))  + d(SUBST_CI_CTRP_ANRE)

d(log(F_n_E_AIND))  = d(log(Y_AIND))  - d(log(PROG_E_AIND))  + d(SUBST_F_E_AIND)

d(log(X_CNJM))  = d(log(WD_CNJM))  + d(SUBST_X_CNJM)

PQD_CTRP  * QD_CTRP  = PMGRD_CTRP  * MGRD_CTRP  + PCID_CTRP  * CID_CTRP  + PCHD_CTRP  * CHD_CTRP  + PGD_CTRP  * GD_CTRP  + PID_CTRP  * ID_CTRP  + PXD_CTRP  * XD_CTRP  + PDSD_CTRP  * DSD_CTRP

phi_MAT_ANFO  = C_MAT_ANFO  * F_n_MAT_ANFO  / ( 0  + C_K_ANFO  * F_n_K_ANFO  + C_L_ANFO  * F_n_L_ANFO  + C_E_ANFO  * F_n_E_ANFO  + C_MAT_ANFO  * F_n_MAT_ANFO )

PCID_CTRP_AIND  = PYQSBVAT_CTRP

CI_CTRP  = CID_CTRP  + CIM_CTRP

NOS_VAL_AIND  = GOS_VAL_AIND  - PK_AIND(-1)  * Rdep_AIND  * F_K_AIND(-1)

GM_CSER  = phi_GM_CSER  * G_CSER

IM_CIND_AIND  = phi_IM_CIND_AIND  * I_CIND_AIND

M_CTRP  * PM_CTRP  + NTAXPM_VAL_CTRP  + PMGPM_CTRP  * MGPM_CTRP  = PQM_CTRP  * QM_CTRP

ES_act_K_L_ATPT  = ES_K_L_ATPT  - ( C_K_ATPT  / PROG_K_ATPT  / ( C_L_ATPT  / PROG_L_ATPT )  / @elem(C_K_ATPT  / PROG_K_ATPT  / ( C_L_ATPT  / PROG_L_ATPT ) , 2000) < 0.99999 )  * ( log(F_K_ATPT  * PROG_K_ATPT  / ( F_L_ATPT  * PROG_L_ATPT )  / @elem(F_K_ATPT  * PROG_K_ATPT  / ( F_L_ATPT  * PROG_L_ATPT ) , 2000))  / log(C_K_ATPT  / PROG_K_ATPT  / ( C_L_ATPT  / PROG_L_ATPT )  / @elem(C_K_ATPT  / PROG_K_ATPT  / ( C_L_ATPT  / PROG_L_ATPT ) , 2000)  * 1.0000000001)  + ES_K_L_ATPT )  - ( C_K_ATPT  / PROG_K_ATPT  / ( C_L_ATPT  / PROG_L_ATPT )  / @elem(C_K_ATPT  / PROG_K_ATPT  / ( C_L_ATPT  / PROG_L_ATPT ) , 2000) > 1.00001 )  * ( log(F_K_ATPT  * PROG_K_ATPT  / ( F_L_ATPT  * PROG_L_ATPT )  / @elem(F_K_ATPT  * PROG_K_ATPT  / ( F_L_ATPT  * PROG_L_ATPT ) , 2000))  / log(C_K_ATPT  / PROG_K_ATPT  / ( C_L_ATPT  / PROG_L_ATPT )  / @elem(C_K_ATPT  / PROG_K_ATPT  / ( C_L_ATPT  / PROG_L_ATPT ) , 2000)  * 1.0000000001)  + ES_K_L_ATPT )

PSUBPD  * SUBPD  = 0  + PSUBPD_CIND  * SUBPD_CIND  + PSUBPD_CTRP  * SUBPD_CTRP  + PSUBPD_CSER  * SUBPD_CSER  + PSUBPD_CNJN  * SUBPD_CNJN  + PSUBPD_CNJM  * SUBPD_CNJM

CIM_CNJN_ANRE  = phi_CIM_CNJN_ANRE  * CI_CNJN_ANRE

d(log(CI_CNJM_AIND))  = d(log(F_E_AIND))  + d(SUBST_CI_CNJM_AIND)

PSUBPM  * SUBPM  = 0  + PSUBPM_CIND  * SUBPM_CIND  + PSUBPM_CTRP  * SUBPM_CTRP  + PSUBPM_CSER  * SUBPM_CSER  + PSUBPM_CNJN  * SUBPM_CNJN  + PSUBPM_CNJM  * SUBPM_CNJM

log(F_MAT_ATPT)  = ADJUST0_F_MAT_ATPT  * log(F_n_MAT_ATPT)  + ( 1  - ADJUST0_F_MAT_ATPT )  * ( log(F_MAT_ATPT(-1))  + d(log(F_e_MAT_ATPT)) )

PGDP4  * GDP4  = PGOS  * GOS  + PWAGES  * WAGES  + PRSSC  * RSSC  + NTAXI_VAL  + PNTAXP  * NTAXP

C_L_ANFO  = W_ANFO  * ( 1  + RRSSC_ANFO )

NTAXP_CTRP  = NTAXPD_CTRP  + NTAXPM_CTRP

ID_CIND_ASER  = ( 1  - phi_IM_CIND_ASER )  * I_CIND_ASER

GOS_VAL_AIND  = VA_VAL_AIND  - PWAGES_AIND  * WAGES_AIND  - PRSSC_AIND  * RSSC_AIND  - NTAXI_VAL_AIND

phi_E_CNJM_ANFO  = PCI_CNJM_ANFO  * CI_CNJM_ANFO  / ( 0  + PCI_CNJN_ANFO  * CI_CNJN_ANFO  + PCI_CNJM_ANFO  * CI_CNJM_ANFO )

d(log(Y_e_ANRE))  = ADJUST_Ye_Y_ANRE  * d(log(Y_ANRE))  + ( 1  - ADJUST_Ye_Y_ANRE )  * d(log(Y_e_ANRE(-1)))

NTAXI  = 0  + NTAXI_AIND  + NTAXI_ATPT  + NTAXI_ATPO  + NTAXI_ASER  + NTAXI_ANRE  + NTAXI_ANFO

VA_ANRE  = Y_ANRE  - CI_ANRE

PMGPD_CTRP_CIND  * MGR_CTRP  = PMGRD_CTRP  * MGRD_CTRP  + PMGRM_CTRP  * MGRM_CTRP

d(SUBST_n_CIM_CNJN_ANRE)  =  - ES_CIM_CNJN_ANRE  * d(log(PCID_CNJN_ANRE)  - log(PCIM_CNJN_ANRE))

PXM_CIND  = PMSBVAT_CIND

PCID_CNJN  * CID_CNJN  = 0  + PCID_CNJN_AIND  * CID_CNJN_AIND  + PCID_CNJN_ATPT  * CID_CNJN_ATPT  + PCID_CNJN_ATPO  * CID_CNJN_ATPO  + PCID_CNJN_ASER  * CID_CNJN_ASER  + PCID_CNJN_ANRE  * CID_CNJN_ANRE  + PCID_CNJN_ANFO  * CID_CNJN_ANFO

PCID_CNJM  * CID_CNJM  = 0  + PCID_CNJM_AIND  * CID_CNJM_AIND  + PCID_CNJM_ATPT  * CID_CNJM_ATPT  + PCID_CNJM_ATPO  * CID_CNJM_ATPO  + PCID_CNJM_ASER  * CID_CNJM_ASER  + PCID_CNJM_ANRE  * CID_CNJM_ANRE  + PCID_CNJM_ANFO  * CID_CNJM_ANFO

IM_CSER_ATPO  = phi_IM_CSER_ATPO  * I_CSER_ATPO

F_K_ANFO  = ( 1  - Rdep_ANFO )  * F_K_ANFO(-1)  + IA_ANFO

d(log(MGPM_CTRP_CIND))  = d(log(M_CIND))  + d(SUBST_MGPM_CTRP_CIND)

d(log(1  + MARKUP_n2_ASER))  = RHO_MARKUP_Y  * ( d(log(Y_ASER))  - d(log(Y_ASER(-1))) )

phi_MGPM_CSER_CIND  = PMGPM_CSER_CIND  * MGPM_CSER_CIND  / ( 0  + PMGPM_CIND_CIND  * MGPM_CIND_CIND  + PMGPM_CTRP_CIND  * MGPM_CTRP_CIND  + PMGPM_CSER_CIND  * MGPM_CSER_CIND  + PMGPM_CNJN_CIND  * MGPM_CNJN_CIND  + PMGPM_CNJM_CIND  * MGPM_CNJM_CIND )

PIM_CIND_ANFO  = PMSBVAT_CIND

d(log(CI_CNJM_ATPO))  = d(log(F_E_ATPO))  + d(SUBST_CI_CNJM_ATPO)

log(F_E_AIND)  = ADJUST0_F_E_AIND  * log(F_n_E_AIND)  + ( 1  - ADJUST0_F_E_AIND )  * ( log(F_E_AIND(-1))  + d(log(F_e_E_AIND)) )

d(log(CI_CNJM_ATPT))  = d(log(F_E_ATPT))  + d(SUBST_CI_CNJM_ATPT)

phi_IM_CIND_ATPT  = 1  / ( 1  + @elem(ID_CIND_ATPT  / IM_CIND_ATPT , 2000)  * exp(SUBST_IM_CIND_ATPT) )

LF  = PARTR  * WAPop

PGM_CIND  = PMSBVAT_CIND

phi_MGPM_CTRP_CIND  = PMGPM_CTRP_CIND  * MGPM_CTRP_CIND  / ( 0  + PMGPM_CIND_CIND  * MGPM_CIND_CIND  + PMGPM_CTRP_CIND  * MGPM_CTRP_CIND  + PMGPM_CSER_CIND  * MGPM_CSER_CIND  + PMGPM_CNJN_CIND  * MGPM_CNJN_CIND  + PMGPM_CNJM_CIND  * MGPM_CNJM_CIND )

phi_CHM_CSER  = 1  / ( 1  + @elem(CHD_CSER  / CHM_CSER , 2000)  * exp(SUBST_CHM_CSER) )

ES_act_MAT_E_ATPT  = ES_MAT_E_ATPT  - ( C_MAT_ATPT  / PROG_MAT_ATPT  / ( C_E_ATPT  / PROG_E_ATPT )  / @elem(C_MAT_ATPT  / PROG_MAT_ATPT  / ( C_E_ATPT  / PROG_E_ATPT ) , 2000) < 0.99999 )  * ( log(F_MAT_ATPT  * PROG_MAT_ATPT  / ( F_E_ATPT  * PROG_E_ATPT )  / @elem(F_MAT_ATPT  * PROG_MAT_ATPT  / ( F_E_ATPT  * PROG_E_ATPT ) , 2000))  / log(C_MAT_ATPT  / PROG_MAT_ATPT  / ( C_E_ATPT  / PROG_E_ATPT )  / @elem(C_MAT_ATPT  / PROG_MAT_ATPT  / ( C_E_ATPT  / PROG_E_ATPT ) , 2000)  * 1.0000000001)  + ES_MAT_E_ATPT )  - ( C_MAT_ATPT  / PROG_MAT_ATPT  / ( C_E_ATPT  / PROG_E_ATPT )  / @elem(C_MAT_ATPT  / PROG_MAT_ATPT  / ( C_E_ATPT  / PROG_E_ATPT ) , 2000) > 1.00001 )  * ( log(F_MAT_ATPT  * PROG_MAT_ATPT  / ( F_E_ATPT  * PROG_E_ATPT )  / @elem(F_MAT_ATPT  * PROG_MAT_ATPT  / ( F_E_ATPT  * PROG_E_ATPT ) , 2000))  / log(C_MAT_ATPT  / PROG_MAT_ATPT  / ( C_E_ATPT  / PROG_E_ATPT )  / @elem(C_MAT_ATPT  / PROG_MAT_ATPT  / ( C_E_ATPT  / PROG_E_ATPT ) , 2000)  * 1.0000000001)  + ES_MAT_E_ATPT )

PGDP_CTRP  * GDP_CTRP  = PCH_CTRP  * CH_CTRP  + PG_CTRP  * G_CTRP  + PI_CTRP  * I_CTRP  + PX_CTRP  * X_CTRP  + PDS_CTRP  * DS_CTRP  - PM_CTRP  * M_CTRP

SUBST_CIM_CTRP_ATPO  = ADJUST6_CIM_CTRP_ATPO  * SUBST_n_CIM_CTRP_ATPO  + ( 1  - ADJUST6_CIM_CTRP_ATPO )  * SUBST_CIM_CTRP_ATPO(-1)

SUBST_CIM_CTRP_ATPT  = ADJUST6_CIM_CTRP_ATPT  * SUBST_n_CIM_CTRP_ATPT  + ( 1  - ADJUST6_CIM_CTRP_ATPT )  * SUBST_CIM_CTRP_ATPT(-1)

PMSBVAT_CSER  * MSBVAT_CSER  = PM_CSER  * M_CSER  + POTHPTM_CSER  * OTHPTM_CSER  + PSUBPM_CSER  * SUBPM_CSER  + PMGPM_CSER  * MGPM_CSER

PMbis_CIND  * M_CIND  + NTAXPM_VAL_CIND  + PMGPM_CIND  * MGPM_CIND  = PQM_CIND  * QM_CIND

WAGES_ANFO  * PWAGES_ANFO  = W_ANFO  * F_L_ANFO

d(log(F_n_MAT_ATPT))  = d(log(Y_ATPT))  - d(log(PROG_MAT_ATPT))  + d(SUBST_F_MAT_ATPT)

IM_CIND_ASER  = phi_IM_CIND_ASER  * I_CIND_ASER

d(SUBST_n_F_K_ANRE)  = 0  +  - ES_K_K_ANRE  * phi_K_ANRE(-1)  * d(log(C_K_ANRE  / PROG_K_ANRE)  - log(C_K_ANRE  / PROG_K_ANRE))  +  - ES_K_L_ANRE  * phi_L_ANRE(-1)  * d(log(C_K_ANRE  / PROG_K_ANRE)  - log(C_L_ANRE  / PROG_L_ANRE))  +  - ES_K_E_ANRE  * phi_E_ANRE(-1)  * d(log(C_K_ANRE  / PROG_K_ANRE)  - log(C_E_ANRE  / PROG_E_ANRE))  +  - ES_K_MAT_ANRE  * phi_MAT_ANRE(-1)  * d(log(C_K_ANRE  / PROG_K_ANRE)  - log(C_MAT_ANRE  / PROG_MAT_ANRE))

PIM_CSER_ANRE  = PMSBVAT_CSER

PSUBP  * SUBP  = PSUBPD  * SUBPD  + PSUBPM  * SUBPM

log(F_E_ATPO)  = ADJUST0_F_E_ATPO  * log(F_n_E_ATPO)  + ( 1  - ADJUST0_F_E_ATPO )  * ( log(F_E_ATPO(-1))  + d(log(F_e_E_ATPO)) )

d(SUBST_n_CIM_CSER_ANFO)  =  - ES_CIM_CSER_ANFO  * d(log(PCID_CSER_ANFO)  - log(PCIM_CSER_ANFO))

IM_CIND_ANRE  = phi_IM_CIND_ANRE  * I_CIND_ANRE

d(log(F_n_MAT_ATPO))  = d(log(Y_ATPO))  - d(log(PROG_MAT_ATPO))  + d(SUBST_F_MAT_ATPO)

C_E_AIND  = PE_AIND

log(F_E_ASER)  = ADJUST0_F_E_ASER  * log(F_n_E_ASER)  + ( 1  - ADJUST0_F_E_ASER )  * ( log(F_E_ASER(-1))  + d(log(F_e_E_ASER)) )

PWAGES_ANFO  = P

CUR_ASER  = Y_ASER  / YCAP_ASER

PID_CIND_ANRE  = PYQSBVAT_CIND

ID_ATPT  = 0  + ID_CIND_ATPT  + ID_CSER_ATPT

NOS  = 0  + NOS_AIND  + NOS_ATPT  + NOS_ATPO  + NOS_ASER  + NOS_ANRE  + NOS_ANFO

ID_ATPO  = 0  + ID_CIND_ATPO  + ID_CSER_ATPO

d(log(MS_CTRP))  = d(log(M_CTRP))

d(log(X_CTRP))  = d(log(WD_CTRP))  + d(SUBST_X_CTRP)

verif_phi_E_ANFO  = ( 1  - ( 0  + phi_E_CNJN_ANFO  + phi_E_CNJM_ANFO ) )  * 100

PCID_CTRP_ANFO  = PYQSBVAT_CTRP

d(log(CI_CNJM_ANFO))  = d(log(F_E_ANFO))  + d(SUBST_CI_CNJM_ANFO)

d(log(CI_CNJN_ASER))  = d(log(F_E_ASER))  + d(SUBST_CI_CNJN_ASER)

RDEBT_G_VAL  = DEBT_G_VAL  / ( PGDP  * GDP )

NOS_VAL_ANRE  = GOS_VAL_ANRE  - PK_ANRE(-1)  * Rdep_ANRE  * F_K_ANRE(-1)

SUBPM_CSER  = @elem(RSUBPM_CSER , 2000)  * M_CSER

F_K_ATPT  = ( 1  - Rdep_ATPT )  * F_K_ATPT(-1)  + IA_ATPT

C_L_AIND  = W_AIND  * ( 1  + RRSSC_AIND )

F_K_ATPO  = ( 1  - Rdep_ATPO )  * F_K_ATPO(-1)  + IA_ATPO

PRSSC_AIND  = P

XM_CIND  = phi_XM_CIND  * X_CIND

CHD  = 0  + CHD_CIND  + CHD_CTRP  + CHD_CSER  + CHD_CNJN  + CHD_CNJM

CHM  = 0  + CHM_CIND  + CHM_CTRP  + CHM_CSER  + CHM_CNJN  + CHM_CNJM

d(log(PY_e_AIND))  = ADJUST1_PY_AIND  * d(log(PY_e_AIND(-1)))  + ADJUST2_PY_AIND  * d(log(PY_AIND(-1)))  + ADJUST3_PY_AIND  * d(log(PY_n_AIND))

verif_Mbis_CIND  = ( Mbis_CIND  / M_CIND  - 1 )  * 100

verif_YQbis_CTRP  = ( YQbis_CTRP  / YQ_CTRP  - 1 )  * 100

PCH_CIND  * CH_CIND  = PCHD_CIND  * CHD_CIND  + PCHM_CIND  * CHM_CIND

verif_phi_TRSP_ANRE  = ( 1  - ( 0  + phi_TRSP_CTRP_ANRE ) )  * 100

phi_TRSP_CTRP_ANRE  = PCI_CTRP_ANRE  * CI_CTRP_ANRE  / ( 0  + PCI_CTRP_ANRE  * CI_CTRP_ANRE )

d(log(YCAP_ATPO))  = 0  + phi_K_ATPO(-1)  * d(log(F_K_ATPO  * PROG_K_ATPO))  + phi_L_ATPO(-1)  * d(log(F_L_ATPO  * PROG_L_ATPO))  + phi_E_ATPO(-1)  * d(log(F_E_ATPO  * PROG_E_ATPO))  + phi_MAT_ATPO(-1)  * d(log(F_MAT_ATPO  * PROG_MAT_ATPO))  + ADJUST_YCAP_Y_ATPO  * ( log(Y_ATPO(-1))  - log(YCAP_ATPO(-1)  * @elem(CUR_ATPO , 2000)) )

d(log(I_CIND_AIND))  = d(log(IA_AIND))

d(SUBST_n_F_L_ASER)  = 0  +  - ES_L_K_ASER  * phi_K_ASER(-1)  * d(log(C_L_ASER  / PROG_L_ASER)  - log(C_K_ASER  / PROG_K_ASER))  +  - ES_L_L_ASER  * phi_L_ASER(-1)  * d(log(C_L_ASER  / PROG_L_ASER)  - log(C_L_ASER  / PROG_L_ASER))  +  - ES_L_E_ASER  * phi_E_ASER(-1)  * d(log(C_L_ASER  / PROG_L_ASER)  - log(C_E_ASER  / PROG_E_ASER))  +  - ES_L_MAT_ASER  * phi_MAT_ASER(-1)  * d(log(C_L_ASER  / PROG_L_ASER)  - log(C_MAT_ASER  / PROG_MAT_ASER))

log(F_MAT_ANFO)  = ADJUST0_F_MAT_ANFO  * log(F_n_MAT_ANFO)  + ( 1  - ADJUST0_F_MAT_ANFO )  * ( log(F_MAT_ANFO(-1))  + d(log(F_e_MAT_ANFO)) )

QD_CIND  = MGRD_CIND  + CID_CIND  + CHD_CIND  + GD_CIND  + ID_CIND  + XD_CIND  + DSD_CIND

d(log(1  + MARKUP_n_ATPT))  = RHO_MARKUP_Y  * d(log(CUR_ATPT))

log(F_MAT_AIND)  = ADJUST0_F_MAT_AIND  * log(F_n_MAT_AIND)  + ( 1  - ADJUST0_F_MAT_AIND )  * ( log(F_MAT_AIND(-1))  + d(log(F_e_MAT_AIND)) )

verif_phi_E_ASER  = ( 1  - ( 0  + phi_E_CNJN_ASER  + phi_E_CNJM_ASER ) )  * 100

phi_MGPM_CSER_CNJM  = PMGPM_CSER_CNJM  * MGPM_CSER_CNJM  / ( 0  + PMGPM_CIND_CNJM  * MGPM_CIND_CNJM  + PMGPM_CTRP_CNJM  * MGPM_CTRP_CNJM  + PMGPM_CSER_CNJM  * MGPM_CSER_CNJM  + PMGPM_CNJN_CNJM  * MGPM_CNJN_CNJM  + PMGPM_CNJM_CNJM  * MGPM_CNJM_CNJM )

phi_MGPM_CSER_CNJN  = PMGPM_CSER_CNJN  * MGPM_CSER_CNJN  / ( 0  + PMGPM_CIND_CNJN  * MGPM_CIND_CNJN  + PMGPM_CTRP_CNJN  * MGPM_CTRP_CNJN  + PMGPM_CSER_CNJN  * MGPM_CSER_CNJN  + PMGPM_CNJN_CNJN  * MGPM_CNJN_CNJN  + PMGPM_CNJM_CNJN  * MGPM_CNJM_CNJN )

d(log(1  + MARKUP_n_ATPO))  = RHO_MARKUP_Y  * d(log(CUR_ATPO))

PCI_CSER_ATPO  * CI_CSER_ATPO  = PCID_CSER_ATPO  * CID_CSER_ATPO  + PCIM_CSER_ATPO  * CIM_CSER_ATPO

VA_VAL_ASER  = PY_ASER  * Y_ASER  - PCI_ASER  * CI_ASER

phi_CIM_CSER_ANFO  = 1  / ( 1  + @elem(CID_CSER_ANFO  / CIM_CSER_ANFO , 2000)  * exp(SUBST_CIM_CSER_ANFO) )

SUBP  = SUBPD  + SUBPM

PMAT_ATPT  * F_MAT_ATPT  = 0  + PCI_CIND_ATPT  * CI_CIND_ATPT  + PCI_CTRP_ATPT  * CI_CTRP_ATPT  + PCI_CSER_ATPT  * CI_CSER_ATPT

PMAT_ATPO  * F_MAT_ATPO  = 0  + PCI_CIND_ATPO  * CI_CIND_ATPO  + PCI_CTRP_ATPO  * CI_CTRP_ATPO  + PCI_CSER_ATPO  * CI_CSER_ATPO

W  * F_L  = ( 0  + W_AIND  * F_L_AIND  + W_ATPT  * F_L_ATPT  + W_ATPO  * F_L_ATPO  + W_ASER  * F_L_ASER  + W_ANRE  * F_L_ANRE  + W_ANFO  * F_L_ANFO )

PCHD_CTRP  = PYQSBVAT_CTRP  * ( 1  + RVATD_CTRP )  / ( 1  + @elem(RVATD_CTRP , 2000) )

CI_CSER  = CID_CSER  + CIM_CSER

d(log(I_CIND_ASER))  = d(log(IA_ASER))

ES_act_MAT_MAT_AIND  = ES_MAT_MAT_AIND  - ( C_MAT_AIND  / PROG_MAT_AIND  / ( C_MAT_AIND  / PROG_MAT_AIND )  / @elem(C_MAT_AIND  / PROG_MAT_AIND  / ( C_MAT_AIND  / PROG_MAT_AIND ) , 2000) < 0.99999 )  * ( log(F_MAT_AIND  * PROG_MAT_AIND  / ( F_MAT_AIND  * PROG_MAT_AIND )  / @elem(F_MAT_AIND  * PROG_MAT_AIND  / ( F_MAT_AIND  * PROG_MAT_AIND ) , 2000))  / log(C_MAT_AIND  / PROG_MAT_AIND  / ( C_MAT_AIND  / PROG_MAT_AIND )  / @elem(C_MAT_AIND  / PROG_MAT_AIND  / ( C_MAT_AIND  / PROG_MAT_AIND ) , 2000)  * 1.0000000001)  + ES_MAT_MAT_AIND )  - ( C_MAT_AIND  / PROG_MAT_AIND  / ( C_MAT_AIND  / PROG_MAT_AIND )  / @elem(C_MAT_AIND  / PROG_MAT_AIND  / ( C_MAT_AIND  / PROG_MAT_AIND ) , 2000) > 1.00001 )  * ( log(F_MAT_AIND  * PROG_MAT_AIND  / ( F_MAT_AIND  * PROG_MAT_AIND )  / @elem(F_MAT_AIND  * PROG_MAT_AIND  / ( F_MAT_AIND  * PROG_MAT_AIND ) , 2000))  / log(C_MAT_AIND  / PROG_MAT_AIND  / ( C_MAT_AIND  / PROG_MAT_AIND )  / @elem(C_MAT_AIND  / PROG_MAT_AIND  / ( C_MAT_AIND  / PROG_MAT_AIND ) , 2000)  * 1.0000000001)  + ES_MAT_MAT_AIND )

POTHPTM  * OTHPTM  = 0  + POTHPTM_CIND  * OTHPTM_CIND  + POTHPTM_CTRP  * OTHPTM_CTRP  + POTHPTM_CSER  * OTHPTM_CSER  + POTHPTM_CNJN  * OTHPTM_CNJN  + POTHPTM_CNJM  * OTHPTM_CNJM

POTHPTD  * OTHPTD  = 0  + POTHPTD_CIND  * OTHPTD_CIND  + POTHPTD_CTRP  * OTHPTD_CTRP  + POTHPTD_CSER  * OTHPTD_CSER  + POTHPTD_CNJN  * OTHPTD_CNJN  + POTHPTD_CNJM  * OTHPTD_CNJM

ES_act_MAT_L_AIND  = ES_MAT_L_AIND  - ( C_MAT_AIND  / PROG_MAT_AIND  / ( C_L_AIND  / PROG_L_AIND )  / @elem(C_MAT_AIND  / PROG_MAT_AIND  / ( C_L_AIND  / PROG_L_AIND ) , 2000) < 0.99999 )  * ( log(F_MAT_AIND  * PROG_MAT_AIND  / ( F_L_AIND  * PROG_L_AIND )  / @elem(F_MAT_AIND  * PROG_MAT_AIND  / ( F_L_AIND  * PROG_L_AIND ) , 2000))  / log(C_MAT_AIND  / PROG_MAT_AIND  / ( C_L_AIND  / PROG_L_AIND )  / @elem(C_MAT_AIND  / PROG_MAT_AIND  / ( C_L_AIND  / PROG_L_AIND ) , 2000)  * 1.0000000001)  + ES_MAT_L_AIND )  - ( C_MAT_AIND  / PROG_MAT_AIND  / ( C_L_AIND  / PROG_L_AIND )  / @elem(C_MAT_AIND  / PROG_MAT_AIND  / ( C_L_AIND  / PROG_L_AIND ) , 2000) > 1.00001 )  * ( log(F_MAT_AIND  * PROG_MAT_AIND  / ( F_L_AIND  * PROG_L_AIND )  / @elem(F_MAT_AIND  * PROG_MAT_AIND  / ( F_L_AIND  * PROG_L_AIND ) , 2000))  / log(C_MAT_AIND  / PROG_MAT_AIND  / ( C_L_AIND  / PROG_L_AIND )  / @elem(C_MAT_AIND  / PROG_MAT_AIND  / ( C_L_AIND  / PROG_L_AIND ) , 2000)  * 1.0000000001)  + ES_MAT_L_AIND )

OTHPTD_CSER  = @elem(ROTHPTD_CSER , 2000)  * YQ_CSER

VATM_CTRP  = @elem(RVATM_CTRP , 2000)  * CHM_CTRP  / ( 1  + @elem(RVATM_CTRP , 2000) )

d(log(MGPD_CTRP_CNJM))  = d(log(YQ_CNJM))  + d(SUBST_MGPD_CTRP_CNJM)

d(log(MGPD_CTRP_CNJN))  = d(log(YQ_CNJN))  + d(SUBST_MGPD_CTRP_CNJN)

verif_PYQbis_CIND  = ( PYQbis_CIND  / PYQ_CIND  - 1 )  * 100

PDSM_CSER  = PMSBVAT_CSER

I_CIND  = ID_CIND  + IM_CIND

d(log(F_e_E_ANRE))  = ADJUST1_F_E_ANRE  * d(log(F_e_E_ANRE(-1)))  + ADJUST2_F_E_ANRE  * d(log(F_E_ANRE(-1)))  + ADJUST3_F_E_ANRE  * d(log(F_n_E_ANRE))

CU_n_ANRE  * Y_ANRE  = 0  + C_K_ANRE  * F_n_K_ANRE  + C_L_ANRE  * F_n_L_ANRE  + C_E_ANRE  * F_n_E_ANRE  + C_MAT_ANRE  * F_n_MAT_ANRE  + NTAXI_VAL_ANRE

d(log(I_CSER_ANRE))  = d(log(IA_ANRE))

Y_CIND_ANRE  = PhiY_CIND_ANRE  * YQ_CIND

PROG_E_AIND  = PROG_E_AIND(-1)  * ( 1  + GR_PROG_E_AIND )

CID_AIND  = 0  + CID_CIND_AIND  + CID_CTRP_AIND  + CID_CSER_AIND  + CID_CNJN_AIND  + CID_CNJM_AIND

CID_CSER  = 0  + CID_CSER_AIND  + CID_CSER_ATPT  + CID_CSER_ATPO  + CID_CSER_ASER  + CID_CSER_ANRE  + CID_CSER_ANFO

DS_CIND  = DSD_CIND  + DSM_CIND

PROG_E_ANFO  = PROG_E_ANFO(-1)  * ( 1  + GR_PROG_E_ANFO )

CID_ANFO  = 0  + CID_CIND_ANFO  + CID_CTRP_ANFO  + CID_CSER_ANFO  + CID_CNJN_ANFO  + CID_CNJM_ANFO

DISPINC_AT_VAL  = DISPINC_BT_VAL  - INC_SOC_TAX_VAL

GDP_CSER  = CH_CSER  + G_CSER  + I_CSER  + X_CSER  + DS_CSER  - M_CSER

PROG_K_ATPT  = PROG_K_ATPT(-1)  * ( 1  + GR_PROG_K_ATPT )

QM_CTRP  = MGRM_CTRP  + CIM_CTRP  + CHM_CTRP  + GM_CTRP  + IM_CTRP  + XM_CTRP  + DSM_CTRP

PROG_K_ATPO  = PROG_K_ATPO(-1)  * ( 1  + GR_PROG_K_ATPO )

d(log(F_e_L_ATPO))  = ADJUST1_F_L_ATPO  * d(log(F_e_L_ATPO(-1)))  + ADJUST2_F_L_ATPO  * d(log(F_L_ATPO(-1)))  + ADJUST3_F_L_ATPO  * d(log(F_n_L_ATPO))

DEBT_G_VAL  = DEBT_G_VAL(-1)  * ( 1  - Phi_RD_G(-1) )  - SAV_G_VAL

GOS_AIND  = VA_AIND  - WAGES_AIND  - RSSC_AIND  - NTAXI_AIND

SUBST_n_MGPM_CSER_CIND  = 0  +  - ES_MGPM_CSER_CTRP_CIND  * phi_MGPM_CTRP_CIND(-1)  * d(log(PMGPM_CSER_CIND)  - log(PMGPM_CTRP_CIND))  +  - ES_MGPM_CSER_CSER_CIND  * phi_MGPM_CSER_CIND(-1)  * d(log(PMGPM_CSER_CIND)  - log(PMGPM_CSER_CIND))

CIM_CNJN_ATPO  = phi_CIM_CNJN_ATPO  * CI_CNJN_ATPO

d(log(F_e_L_ATPT))  = ADJUST1_F_L_ATPT  * d(log(F_e_L_ATPT(-1)))  + ADJUST2_F_L_ATPT  * d(log(F_L_ATPT(-1)))  + ADJUST3_F_L_ATPT  * d(log(F_n_L_ATPT))

( 1  + MARKUP_CNJM )  = PYQ_CNJM  * YQ_CNJM  / ( 0  + CU_AIND  * Y_CNJM_AIND  + CU_ASER  * Y_CNJM_ASER  + CU_ANFO  * Y_CNJM_ANFO )

ES_act_E_MAT_ANFO  = ES_E_MAT_ANFO  - ( C_E_ANFO  / PROG_E_ANFO  / ( C_MAT_ANFO  / PROG_MAT_ANFO )  / @elem(C_E_ANFO  / PROG_E_ANFO  / ( C_MAT_ANFO  / PROG_MAT_ANFO ) , 2000) < 0.99999 )  * ( log(F_E_ANFO  * PROG_E_ANFO  / ( F_MAT_ANFO  * PROG_MAT_ANFO )  / @elem(F_E_ANFO  * PROG_E_ANFO  / ( F_MAT_ANFO  * PROG_MAT_ANFO ) , 2000))  / log(C_E_ANFO  / PROG_E_ANFO  / ( C_MAT_ANFO  / PROG_MAT_ANFO )  / @elem(C_E_ANFO  / PROG_E_ANFO  / ( C_MAT_ANFO  / PROG_MAT_ANFO ) , 2000)  * 1.0000000001)  + ES_E_MAT_ANFO )  - ( C_E_ANFO  / PROG_E_ANFO  / ( C_MAT_ANFO  / PROG_MAT_ANFO )  / @elem(C_E_ANFO  / PROG_E_ANFO  / ( C_MAT_ANFO  / PROG_MAT_ANFO ) , 2000) > 1.00001 )  * ( log(F_E_ANFO  * PROG_E_ANFO  / ( F_MAT_ANFO  * PROG_MAT_ANFO )  / @elem(F_E_ANFO  * PROG_E_ANFO  / ( F_MAT_ANFO  * PROG_MAT_ANFO ) , 2000))  / log(C_E_ANFO  / PROG_E_ANFO  / ( C_MAT_ANFO  / PROG_MAT_ANFO )  / @elem(C_E_ANFO  / PROG_E_ANFO  / ( C_MAT_ANFO  / PROG_MAT_ANFO ) , 2000)  * 1.0000000001)  + ES_E_MAT_ANFO )

SUBST_X_CTRP  = ADJUST6_X_CTRP  * SUBST_n_X_CTRP  + ( 1  - ADJUST6_X_CTRP )  * SUBST_X_CTRP(-1)

PGD_CTRP  = PYQSBVAT_CTRP

PROG_L_ANRE  = PROG_L_ANRE(-1)  * ( 1  + GR_PROG_L_ANRE )

CIM_ANRE  = 0  + CIM_CIND_ANRE  + CIM_CTRP_ANRE  + CIM_CSER_ANRE  + CIM_CNJN_ANRE  + CIM_CNJM_ANRE

PMGP_CTRP_CIND  * MGP_CTRP_CIND  = PMGPD_CTRP_CIND  * MGPD_CTRP_CIND  + PMGPM_CTRP_CIND  * MGPM_CTRP_CIND

CIM_CNJN_ATPT  = phi_CIM_CNJN_ATPT  * CI_CNJN_ATPT

SUBST_X_CIND  = ADJUST6_X_CIND  * SUBST_n_X_CIND  + ( 1  - ADJUST6_X_CIND )  * SUBST_X_CIND(-1)

d(MPS_n)  = RHO_MPS_R  * d(R  - d(P)  / P(-1))  + RHO_MPS_UnR  * d(UnR)

d(SUBST_n_CIM_CIND_ANRE)  =  - ES_CIM_CIND_ANRE  * d(log(PCID_CIND_ANRE)  - log(PCIM_CIND_ANRE))

verif_phi_MGPD_CIND  = ( 1  - ( 0  + phi_MGPD_CIND_CIND  + phi_MGPD_CTRP_CIND  + phi_MGPD_CSER_CIND  + phi_MGPD_CNJN_CIND  + phi_MGPD_CNJM_CIND ) )  * 100

SUBST_CI_CNJM_ATPO  = ADJUST6_CI_CNJM_ATPO  * SUBST_n_CI_CNJM_ATPO  + ( 1  - ADJUST6_CI_CNJM_ATPO )  * SUBST_CI_CNJM_ATPO(-1)

SUBST_CI_CNJM_ATPT  = ADJUST6_CI_CNJM_ATPT  * SUBST_n_CI_CNJM_ATPT  + ( 1  - ADJUST6_CI_CNJM_ATPT )  * SUBST_CI_CNJM_ATPT(-1)

MARKUP_ASER  = ADJUST_MARKUP_ASER  * MARKUP_n_ASER  + ( 1  - ADJUST_MARKUP_ASER )  * MARKUP_ASER(-1)

CIM_CTRP  = 0  + CIM_CTRP_AIND  + CIM_CTRP_ATPT  + CIM_CTRP_ATPO  + CIM_CTRP_ASER  + CIM_CTRP_ANRE  + CIM_CTRP_ANFO

d(log(TRSP_ANFO))  = d(log(F_MAT_ANFO))

phi_MGRM_CTRP  = 1  / ( 1  + @elem(MGRD_CTRP  / MGRM_CTRP , 2000)  * exp(SUBST_MGRM_CTRP) )

PCID_CSER  * CID_CSER  = 0  + PCID_CSER_AIND  * CID_CSER_AIND  + PCID_CSER_ATPT  * CID_CSER_ATPT  + PCID_CSER_ATPO  * CID_CSER_ATPO  + PCID_CSER_ASER  * CID_CSER_ASER  + PCID_CSER_ANRE  * CID_CSER_ANRE  + PCID_CSER_ANFO  * CID_CSER_ANFO

phi_MGPD_CSER_CIND  = PMGPD_CSER_CIND  * MGPD_CSER_CIND  / ( 0  + PMGPD_CIND_CIND  * MGPD_CIND_CIND  + PMGPD_CTRP_CIND  * MGPD_CTRP_CIND  + PMGPD_CSER_CIND  * MGPD_CSER_CIND  + PMGPD_CNJN_CIND  * MGPD_CNJN_CIND  + PMGPD_CNJM_CIND  * MGPD_CNJM_CIND )

QD  = 0  + QD_CIND  + QD_CTRP  + QD_CSER  + QD_CNJN  + QD_CNJM

QM  = 0  + QM_CIND  + QM_CTRP  + QM_CSER  + QM_CNJN  + QM_CNJM

ES_act_E_K_AIND  = ES_E_K_AIND  - ( C_E_AIND  / PROG_E_AIND  / ( C_K_AIND  / PROG_K_AIND )  / @elem(C_E_AIND  / PROG_E_AIND  / ( C_K_AIND  / PROG_K_AIND ) , 2000) < 0.99999 )  * ( log(F_E_AIND  * PROG_E_AIND  / ( F_K_AIND  * PROG_K_AIND )  / @elem(F_E_AIND  * PROG_E_AIND  / ( F_K_AIND  * PROG_K_AIND ) , 2000))  / log(C_E_AIND  / PROG_E_AIND  / ( C_K_AIND  / PROG_K_AIND )  / @elem(C_E_AIND  / PROG_E_AIND  / ( C_K_AIND  / PROG_K_AIND ) , 2000)  * 1.0000000001)  + ES_E_K_AIND )  - ( C_E_AIND  / PROG_E_AIND  / ( C_K_AIND  / PROG_K_AIND )  / @elem(C_E_AIND  / PROG_E_AIND  / ( C_K_AIND  / PROG_K_AIND ) , 2000) > 1.00001 )  * ( log(F_E_AIND  * PROG_E_AIND  / ( F_K_AIND  * PROG_K_AIND )  / @elem(F_E_AIND  * PROG_E_AIND  / ( F_K_AIND  * PROG_K_AIND ) , 2000))  / log(C_E_AIND  / PROG_E_AIND  / ( C_K_AIND  / PROG_K_AIND )  / @elem(C_E_AIND  / PROG_E_AIND  / ( C_K_AIND  / PROG_K_AIND ) , 2000)  * 1.0000000001)  + ES_E_K_AIND )

RBal_G_Tot_VAL  = Bal_G_Tot_VAL  / ( PGDP  * GDP )

YQbis_CTRP  + NTAXPD_CTRP  + MGPD_CTRP  = QD_CTRP

verif_YQbis_CNJM  = ( YQbis_CNJM  / YQ_CNJM  - 1 )  * 100

ES_act_E_E_ATPO  = ES_E_E_ATPO  - ( C_E_ATPO  / PROG_E_ATPO  / ( C_E_ATPO  / PROG_E_ATPO )  / @elem(C_E_ATPO  / PROG_E_ATPO  / ( C_E_ATPO  / PROG_E_ATPO ) , 2000) < 0.99999 )  * ( log(F_E_ATPO  * PROG_E_ATPO  / ( F_E_ATPO  * PROG_E_ATPO )  / @elem(F_E_ATPO  * PROG_E_ATPO  / ( F_E_ATPO  * PROG_E_ATPO ) , 2000))  / log(C_E_ATPO  / PROG_E_ATPO  / ( C_E_ATPO  / PROG_E_ATPO )  / @elem(C_E_ATPO  / PROG_E_ATPO  / ( C_E_ATPO  / PROG_E_ATPO ) , 2000)  * 1.0000000001)  + ES_E_E_ATPO )  - ( C_E_ATPO  / PROG_E_ATPO  / ( C_E_ATPO  / PROG_E_ATPO )  / @elem(C_E_ATPO  / PROG_E_ATPO  / ( C_E_ATPO  / PROG_E_ATPO ) , 2000) > 1.00001 )  * ( log(F_E_ATPO  * PROG_E_ATPO  / ( F_E_ATPO  * PROG_E_ATPO )  / @elem(F_E_ATPO  * PROG_E_ATPO  / ( F_E_ATPO  * PROG_E_ATPO ) , 2000))  / log(C_E_ATPO  / PROG_E_ATPO  / ( C_E_ATPO  / PROG_E_ATPO )  / @elem(C_E_ATPO  / PROG_E_ATPO  / ( C_E_ATPO  / PROG_E_ATPO ) , 2000)  * 1.0000000001)  + ES_E_E_ATPO )

PGM_CTRP  = PMSBVAT_CTRP

PCID_CNJM_AIND  = PYQSBVAT_CNJM

PCIM_CSER_ANFO  = PMSBVAT_CSER

ES_act_K_K_ANFO  = ES_K_K_ANFO  - ( C_K_ANFO  / PROG_K_ANFO  / ( C_K_ANFO  / PROG_K_ANFO )  / @elem(C_K_ANFO  / PROG_K_ANFO  / ( C_K_ANFO  / PROG_K_ANFO ) , 2000) < 0.99999 )  * ( log(F_K_ANFO  * PROG_K_ANFO  / ( F_K_ANFO  * PROG_K_ANFO )  / @elem(F_K_ANFO  * PROG_K_ANFO  / ( F_K_ANFO  * PROG_K_ANFO ) , 2000))  / log(C_K_ANFO  / PROG_K_ANFO  / ( C_K_ANFO  / PROG_K_ANFO )  / @elem(C_K_ANFO  / PROG_K_ANFO  / ( C_K_ANFO  / PROG_K_ANFO ) , 2000)  * 1.0000000001)  + ES_K_K_ANFO )  - ( C_K_ANFO  / PROG_K_ANFO  / ( C_K_ANFO  / PROG_K_ANFO )  / @elem(C_K_ANFO  / PROG_K_ANFO  / ( C_K_ANFO  / PROG_K_ANFO ) , 2000) > 1.00001 )  * ( log(F_K_ANFO  * PROG_K_ANFO  / ( F_K_ANFO  * PROG_K_ANFO )  / @elem(F_K_ANFO  * PROG_K_ANFO  / ( F_K_ANFO  * PROG_K_ANFO ) , 2000))  / log(C_K_ANFO  / PROG_K_ANFO  / ( C_K_ANFO  / PROG_K_ANFO )  / @elem(C_K_ANFO  / PROG_K_ANFO  / ( C_K_ANFO  / PROG_K_ANFO ) , 2000)  * 1.0000000001)  + ES_K_K_ANFO )

ID_CIND_ANRE  = ( 1  - phi_IM_CIND_ANRE )  * I_CIND_ANRE

d(log(YCAP_AIND))  = 0  + phi_K_AIND(-1)  * d(log(F_K_AIND  * PROG_K_AIND))  + phi_L_AIND(-1)  * d(log(F_L_AIND  * PROG_L_AIND))  + phi_E_AIND(-1)  * d(log(F_E_AIND  * PROG_E_AIND))  + phi_MAT_AIND(-1)  * d(log(F_MAT_AIND  * PROG_MAT_AIND))  + ADJUST_YCAP_Y_AIND  * ( log(Y_AIND(-1))  - log(YCAP_AIND(-1)  * @elem(CUR_AIND , 2000)) )

d(R_ANRE)  = d(R)

GM_CTRP  = phi_GM_CTRP  * G_CTRP

X  = XD  + XM

CID_CIND_ANFO  = ( 1  - phi_CIM_CIND_ANFO )  * CI_CIND_ANFO

d(r_DEBT_G)  = d(r)

PCHD_CNJN  = PYQSBVAT_CNJN  * ( 1  + RVATD_CNJN )  / ( 1  + @elem(RVATD_CNJN , 2000) )

PCHD_CNJM  = PYQSBVAT_CNJM  * ( 1  + RVATD_CNJM )  / ( 1  + @elem(RVATD_CNJM , 2000) )

PMGPD_CIND  * MGPD_CIND  = 0  + PMGPD_CTRP_CIND  * MGPD_CTRP_CIND  + PMGPD_CSER_CIND  * MGPD_CSER_CIND

VA_ATPT  = Y_ATPT  - CI_ATPT

DS_CNJM  = DSD_CNJM  + DSM_CNJM

DS_CNJN  = DSD_CNJN  + DSM_CNJN

PMS_CNJN  * MS_CNJN  = PM_CNJN  * M_CNJN  + NTAXPM_VAL_CNJN  + PMGPM_CNJN  * MGPM_CNJN

PMS_CNJM  * MS_CNJM  = PM_CNJM  * M_CNJM  + NTAXPM_VAL_CNJM  + PMGPM_CNJM  * MGPM_CNJM

VA_ATPO  = Y_ATPO  - CI_ATPO

I_ASER  = ID_ASER  + IM_ASER

WAGES_AIND  * PWAGES_AIND  = W_AIND  * F_L_AIND

d(log(F_e_E_ASER))  = ADJUST1_F_E_ASER  * d(log(F_e_E_ASER(-1)))  + ADJUST2_F_E_ASER  * d(log(F_E_ASER(-1)))  + ADJUST3_F_E_ASER  * d(log(F_n_E_ASER))

d(log(W_AIND))  = ADJUST_W_Wn_AIND  * d(log(W_n_AIND))  + ADJUST_W_W1_AIND  * d(log(W_AIND(-1)))  - ADJUST_W_W1Wn1_AIND  * log(W_AIND(-1)  / W_n_AIND(-1))

PQM_CNJM  * QM_CNJM  = PMGRM_CNJM  * MGRM_CNJM  + PCIM_CNJM  * CIM_CNJM  + PCHM_CNJM  * CHM_CNJM  + PGM_CNJM  * GM_CNJM  + PIM_CNJM  * IM_CNJM  + PXM_CNJM  * XM_CNJM  + PDSM_CNJM  * DSM_CNJM

PQM_CNJN  * QM_CNJN  = PMGRM_CNJN  * MGRM_CNJN  + PCIM_CNJN  * CIM_CNJN  + PCHM_CNJN  * CHM_CNJN  + PGM_CNJN  * GM_CNJN  + PIM_CNJN  * IM_CNJN  + PXM_CNJN  * XM_CNJN  + PDSM_CNJN  * DSM_CNJN

PE_ATPT  * F_E_ATPT  = 0  + PCI_CNJN_ATPT  * CI_CNJN_ATPT  + PCI_CNJM_ATPT  * CI_CNJM_ATPT

PE_ATPO  * F_E_ATPO  = 0  + PCI_CNJN_ATPO  * CI_CNJN_ATPO  + PCI_CNJM_ATPO  * CI_CNJM_ATPO

ES_act_K_L_ANFO  = ES_K_L_ANFO  - ( C_K_ANFO  / PROG_K_ANFO  / ( C_L_ANFO  / PROG_L_ANFO )  / @elem(C_K_ANFO  / PROG_K_ANFO  / ( C_L_ANFO  / PROG_L_ANFO ) , 2000) < 0.99999 )  * ( log(F_K_ANFO  * PROG_K_ANFO  / ( F_L_ANFO  * PROG_L_ANFO )  / @elem(F_K_ANFO  * PROG_K_ANFO  / ( F_L_ANFO  * PROG_L_ANFO ) , 2000))  / log(C_K_ANFO  / PROG_K_ANFO  / ( C_L_ANFO  / PROG_L_ANFO )  / @elem(C_K_ANFO  / PROG_K_ANFO  / ( C_L_ANFO  / PROG_L_ANFO ) , 2000)  * 1.0000000001)  + ES_K_L_ANFO )  - ( C_K_ANFO  / PROG_K_ANFO  / ( C_L_ANFO  / PROG_L_ANFO )  / @elem(C_K_ANFO  / PROG_K_ANFO  / ( C_L_ANFO  / PROG_L_ANFO ) , 2000) > 1.00001 )  * ( log(F_K_ANFO  * PROG_K_ANFO  / ( F_L_ANFO  * PROG_L_ANFO )  / @elem(F_K_ANFO  * PROG_K_ANFO  / ( F_L_ANFO  * PROG_L_ANFO ) , 2000))  / log(C_K_ANFO  / PROG_K_ANFO  / ( C_L_ANFO  / PROG_L_ANFO )  / @elem(C_K_ANFO  / PROG_K_ANFO  / ( C_L_ANFO  / PROG_L_ANFO ) , 2000)  * 1.0000000001)  + ES_K_L_ANFO )

MGP_CTRP_CIND  = MGPD_CTRP_CIND  + MGPM_CTRP_CIND

SUBST_F_L_ANFO  = ADJUST6_F_L_ANFO  * SUBST_n_F_L_ANFO  + ( 1  - ADJUST6_F_L_ANFO )  * SUBST_F_L_ANFO(-1)

phi_L_ANRE  = C_L_ANRE  * F_n_L_ANRE  / ( 0  + C_K_ANRE  * F_n_K_ANRE  + C_L_ANRE  * F_n_L_ANRE  + C_E_ANRE  * F_n_E_ANRE  + C_MAT_ANRE  * F_n_MAT_ANRE )

SUBST_F_L_AIND  = ADJUST6_F_L_AIND  * SUBST_n_F_L_AIND  + ( 1  - ADJUST6_F_L_AIND )  * SUBST_F_L_AIND(-1)

GDP4  = GOS  + WAGES  + RSSC  + NTAXI  + NTAXP

d(log(X_CIND))  = d(log(WD_CIND))  + d(SUBST_X_CIND)

ES_act_K_E_ANRE  = ES_K_E_ANRE  - ( C_K_ANRE  / PROG_K_ANRE  / ( C_E_ANRE  / PROG_E_ANRE )  / @elem(C_K_ANRE  / PROG_K_ANRE  / ( C_E_ANRE  / PROG_E_ANRE ) , 2000) < 0.99999 )  * ( log(F_K_ANRE  * PROG_K_ANRE  / ( F_E_ANRE  * PROG_E_ANRE )  / @elem(F_K_ANRE  * PROG_K_ANRE  / ( F_E_ANRE  * PROG_E_ANRE ) , 2000))  / log(C_K_ANRE  / PROG_K_ANRE  / ( C_E_ANRE  / PROG_E_ANRE )  / @elem(C_K_ANRE  / PROG_K_ANRE  / ( C_E_ANRE  / PROG_E_ANRE ) , 2000)  * 1.0000000001)  + ES_K_E_ANRE )  - ( C_K_ANRE  / PROG_K_ANRE  / ( C_E_ANRE  / PROG_E_ANRE )  / @elem(C_K_ANRE  / PROG_K_ANRE  / ( C_E_ANRE  / PROG_E_ANRE ) , 2000) > 1.00001 )  * ( log(F_K_ANRE  * PROG_K_ANRE  / ( F_E_ANRE  * PROG_E_ANRE )  / @elem(F_K_ANRE  * PROG_K_ANRE  / ( F_E_ANRE  * PROG_E_ANRE ) , 2000))  / log(C_K_ANRE  / PROG_K_ANRE  / ( C_E_ANRE  / PROG_E_ANRE )  / @elem(C_K_ANRE  / PROG_K_ANRE  / ( C_E_ANRE  / PROG_E_ANRE ) , 2000)  * 1.0000000001)  + ES_K_E_ANRE )

CI_CNJM  = CID_CNJM  + CIM_CNJM

CI_CNJN  = CID_CNJN  + CIM_CNJN

M_CNJN  * PM_CNJN  + NTAXPM_VAL_CNJN  + PMGPM_CNJN  * MGPM_CNJN  = PQM_CNJN  * QM_CNJN

d(log(1  + MARKUP_n2_ANRE))  = RHO_MARKUP_Y  * ( d(log(Y_ANRE))  - d(log(Y_ANRE(-1))) )

M_CNJM  * PM_CNJM  + NTAXPM_VAL_CNJM  + PMGPM_CNJM  * MGPM_CNJM  = PQM_CNJM  * QM_CNJM

d(log(F_n_MAT_ANRE))  = d(log(Y_ANRE))  - d(log(PROG_MAT_ANRE))  + d(SUBST_F_MAT_ANRE)

MGRD_CSER  = ( 1  - phi_MGRM_CSER )  * MGR_CSER

log(CH_CNJN)  = ADJUST0_CH_CNJN  * log(CH_n_CNJN)  + ( 1  - ADJUST0_CH_CNJN )  * ( log(CH_CNJN(-1))  + d(log(CH_e_CNJN)) )

log(CH_CNJM)  = ADJUST0_CH_CNJM  * log(CH_n_CNJM)  + ( 1  - ADJUST0_CH_CNJM )  * ( log(CH_CNJM(-1))  + d(log(CH_e_CNJM)) )

PID_CSER_ASER  = PYQSBVAT_CSER

d(log(MGPD_CSER_CNJM))  = d(log(YQ_CNJM))  + d(SUBST_MGPD_CSER_CNJM)

d(log(MGPD_CSER_CNJN))  = d(log(YQ_CNJN))  + d(SUBST_MGPD_CSER_CNJN)

CIM_CNJN_AIND  = phi_CIM_CNJN_AIND  * CI_CNJN_AIND

SUBST_CHM_CIND  = ADJUST6_CHM_CIND  * SUBST_n_CHM_CIND  + ( 1  - ADJUST6_CHM_CIND )  * SUBST_CHM_CIND(-1)

VATM_CNJM  = @elem(RVATM_CNJM , 2000)  * CHM_CNJM  / ( 1  + @elem(RVATM_CNJM , 2000) )

VATM_CNJN  = @elem(RVATM_CNJN , 2000)  * CHM_CNJN  / ( 1  + @elem(RVATM_CNJN , 2000) )

SUBST_F_K_ANFO  = ADJUST6_F_K_ANFO  * SUBST_n_F_K_ANFO  + ( 1  - ADJUST6_F_K_ANFO )  * SUBST_F_K_ANFO(-1)

CI  = CID  + CIM

CH  = CHD  + CHM

RSSC_AIND  * PRSSC_AIND  = W_AIND  * F_L_AIND  * RRSSC_AIND

NTAXPM_CSER  = VATM_CSER  + OTHPTM_CSER  + SUBPM_CSER

CIM_CIND_ANFO  = phi_CIM_CIND_ANFO  * CI_CIND_ANFO

PYQSBVAT_CTRP  * YQSBVAT_CTRP  = PYQ_CTRP  * YQ_CTRP  + POTHPTD_CTRP  * OTHPTD_CTRP  + PSUBPD_CTRP  * SUBPD_CTRP  + PMGPD_CTRP  * MGPD_CTRP

CID_CNJN_ATPO  = ( 1  - phi_CIM_CNJN_ATPO )  * CI_CNJN_ATPO

SUBST_XM_CTRP  = ADJUST6_XM_CTRP  * SUBST_n_XM_CTRP  + ( 1  - ADJUST6_XM_CTRP )  * SUBST_XM_CTRP(-1)

Y_ANRE  = 0  + Y_CIND_ANRE  + Y_CSER_ANRE  + Y_CNJN_ANRE

CIM_CNJM_AIND  = phi_CIM_CNJM_AIND  * CI_CNJM_AIND

CID_CNJN_ATPT  = ( 1  - phi_CIM_CNJN_ATPT )  * CI_CNJN_ATPT

PMGPD_CSER_CNJM  * MGR_CSER  = PMGRD_CSER  * MGRD_CSER  + PMGRM_CSER  * MGRM_CSER

PMGPD_CSER_CNJN  * MGR_CSER  = PMGRD_CSER  * MGRD_CSER  + PMGRM_CSER  * MGRM_CSER

C_MAT_ATPO  = PMAT_ATPO

d(SUBST_n_CIM_CTRP_ATPO)  =  - ES_CIM_CTRP_ATPO  * d(log(PCID_CTRP_ATPO)  - log(PCIM_CTRP_ATPO))

CUR_AIND  = Y_AIND  / YCAP_AIND

SUBST_CIM_CIND_ANRE  = ADJUST6_CIM_CIND_ANRE  * SUBST_n_CIM_CIND_ANRE  + ( 1  - ADJUST6_CIM_CIND_ANRE )  * SUBST_CIM_CIND_ANRE(-1)

phi_E_CNJN_ATPT  = PCI_CNJN_ATPT  * CI_CNJN_ATPT  / ( 0  + PCI_CNJN_ATPT  * CI_CNJN_ATPT  + PCI_CNJM_ATPT  * CI_CNJM_ATPT )

PQM_CTRP  * QM_CTRP  = PMGRM_CTRP  * MGRM_CTRP  + PCIM_CTRP  * CIM_CTRP  + PCHM_CTRP  * CHM_CTRP  + PGM_CTRP  * GM_CTRP  + PIM_CTRP  * IM_CTRP  + PXM_CTRP  * XM_CTRP  + PDSM_CTRP  * DSM_CTRP

SUBST_CIM_CSER_ANRE  = ADJUST6_CIM_CSER_ANRE  * SUBST_n_CIM_CSER_ANRE  + ( 1  - ADJUST6_CIM_CSER_ANRE )  * SUBST_CIM_CSER_ANRE(-1)

CID_CNJM_AIND  = ( 1  - phi_CIM_CNJM_AIND )  * CI_CNJM_AIND

d(SUBST_n_CIM_CTRP_ATPT)  =  - ES_CIM_CTRP_ATPT  * d(log(PCID_CTRP_ATPT)  - log(PCIM_CTRP_ATPT))

C_MAT_ATPT  = PMAT_ATPT

d(log(Y_e_ANFO))  = ADJUST_Ye_Y_ANFO  * d(log(Y_ANFO))  + ( 1  - ADJUST_Ye_Y_ANFO )  * d(log(Y_e_ANFO(-1)))

NTAXP_VAL_CSER  = NTAXPD_VAL_CSER  + NTAXPM_VAL_CSER

phi_XM_CSER  = 1  / ( 1  + @elem(XD_CSER  / XM_CSER , 2000)  * exp(SUBST_XM_CSER) )

d(log(G_CIND))  = d(log(EXPG))

VA  = 0  + VA_AIND  + VA_ATPT  + VA_ATPO  + VA_ASER  + VA_ANRE  + VA_ANFO

PCI_CIND_ASER  * CI_CIND_ASER  = PCID_CIND_ASER  * CID_CIND_ASER  + PCIM_CIND_ASER  * CIM_CIND_ASER

verif_Mbis_CTRP  = ( Mbis_CTRP  / M_CTRP  - 1 )  * 100

d(log(1  + MARKUP_n2_AIND))  = RHO_MARKUP_Y  * ( d(log(Y_AIND))  - d(log(Y_AIND(-1))) )

Y  = 0  + Y_AIND  + Y_ATPT  + Y_ATPO  + Y_ASER  + Y_ANRE  + Y_ANFO

GDP_CIND  = CH_CIND  + G_CIND  + I_CIND  + X_CIND  + DS_CIND  - M_CIND

PVATD_CNJM  * VATD_CNJM  = RVATD_CNJM  * PCHD_CNJM  * CHD_CNJM  / ( 1  + RVATD_CNJM )

PVATD_CNJN  * VATD_CNJN  = RVATD_CNJN  * PCHD_CNJN  * CHD_CNJN  / ( 1  + RVATD_CNJN )

PROG_E_ATPO  = PROG_E_ATPO(-1)  * ( 1  + GR_PROG_E_ATPO )

phi_XM_CIND  = 1  / ( 1  + @elem(XD_CIND  / XM_CIND , 2000)  * exp(SUBST_XM_CIND) )

PCIM_CTRP_ANRE  = PMSBVAT_CTRP

CID_ATPO  = 0  + CID_CIND_ATPO  + CID_CTRP_ATPO  + CID_CSER_ATPO  + CID_CNJN_ATPO  + CID_CNJM_ATPO

d(log(F_n_L_ANFO))  = d(log(Y_ANFO))  - d(log(PROG_L_ANFO))  + d(SUBST_F_L_ANFO)

CID_ATPT  = 0  + CID_CIND_ATPT  + CID_CTRP_ATPT  + CID_CSER_ATPT  + CID_CNJN_ATPT  + CID_CNJM_ATPT

PROG_E_ATPT  = PROG_E_ATPT(-1)  * ( 1  + GR_PROG_E_ATPT )

PCI_CSER_ANRE  * CI_CSER_ANRE  = PCID_CSER_ANRE  * CID_CSER_ANRE  + PCIM_CSER_ANRE  * CIM_CSER_ANRE

PXM_CSER  = PMSBVAT_CSER

C_L_ASER  = W_ASER  * ( 1  + RRSSC_ASER )

C_L_ANRE  = W_ANRE  * ( 1  + RRSSC_ANRE )

SUBST_CI_CTRP_ANFO  = ADJUST6_CI_CTRP_ANFO  * SUBST_n_CI_CTRP_ANFO  + ( 1  - ADJUST6_CI_CTRP_ANFO )  * SUBST_CI_CTRP_ANFO(-1)

SUBST_CI_CNJN_ATPT  = ADJUST6_CI_CNJN_ATPT  * SUBST_n_CI_CNJN_ATPT  + ( 1  - ADJUST6_CI_CNJN_ATPT )  * SUBST_CI_CNJN_ATPT(-1)

GD_CIND  = ( 1  - phi_GM_CIND )  * G_CIND

CIM_CIND  = 0  + CIM_CIND_AIND  + CIM_CIND_ATPT  + CIM_CIND_ATPO  + CIM_CIND_ASER  + CIM_CIND_ANRE  + CIM_CIND_ANFO

QM_CSER  = MGRM_CSER  + CIM_CSER  + CHM_CSER  + GM_CSER  + IM_CSER  + XM_CSER  + DSM_CSER

SUBST_CI_CNJN_ATPO  = ADJUST6_CI_CNJN_ATPO  * SUBST_n_CI_CNJN_ATPO  + ( 1  - ADJUST6_CI_CNJN_ATPO )  * SUBST_CI_CNJN_ATPO(-1)

phi_MGPM_CTRP_CNJM  = PMGPM_CTRP_CNJM  * MGPM_CTRP_CNJM  / ( 0  + PMGPM_CIND_CNJM  * MGPM_CIND_CNJM  + PMGPM_CTRP_CNJM  * MGPM_CTRP_CNJM  + PMGPM_CSER_CNJM  * MGPM_CSER_CNJM  + PMGPM_CNJN_CNJM  * MGPM_CNJN_CNJM  + PMGPM_CNJM_CNJM  * MGPM_CNJM_CNJM )

phi_MGPM_CTRP_CNJN  = PMGPM_CTRP_CNJN  * MGPM_CTRP_CNJN  / ( 0  + PMGPM_CIND_CNJN  * MGPM_CIND_CNJN  + PMGPM_CTRP_CNJN  * MGPM_CTRP_CNJN  + PMGPM_CSER_CNJN  * MGPM_CSER_CNJN  + PMGPM_CNJN_CNJN  * MGPM_CNJN_CNJN  + PMGPM_CNJM_CNJN  * MGPM_CNJM_CNJN )

YQ_CSER  * PYQ_CSER  + NTAXPD_VAL_CSER  + PMGPD_CSER  * MGPD_CSER  = PQD_CSER  * QD_CSER

PIM_CSER_ANFO  = PMSBVAT_CSER

d(SUBST_n_CI_CNJM_AIND)  = 0  +  - ES_NRJ_CNJM_CNJN_AIND  * phi_E_CNJN_AIND  * d(log(PCI_CNJM_AIND)  - log(PCI_CNJN_AIND))  +  - ES_NRJ_CNJM_CNJM_AIND  * phi_E_CNJM_AIND  * d(log(PCI_CNJM_AIND)  - log(PCI_CNJM_AIND))

d(log(CI_CNJM_ASER))  = d(log(F_E_ASER))  + d(SUBST_CI_CNJM_ASER)

IM_CIND_ANFO  = phi_IM_CIND_ANFO  * I_CIND_ANFO

PG_CIND  * G_CIND  = PGD_CIND  * GD_CIND  + PGM_CIND  * GM_CIND

GR_PROG_E_ANRE  = @elem(GR_PROG_E_ANRE , 2000)  + RHO_PROG_E_PE  * ( log(PE_ANRE)  - log(P) > 0 )  * d(log(PE_ANRE)  - log(P))

ES_act_E_E_AIND  = ES_E_E_AIND  - ( C_E_AIND  / PROG_E_AIND  / ( C_E_AIND  / PROG_E_AIND )  / @elem(C_E_AIND  / PROG_E_AIND  / ( C_E_AIND  / PROG_E_AIND ) , 2000) < 0.99999 )  * ( log(F_E_AIND  * PROG_E_AIND  / ( F_E_AIND  * PROG_E_AIND )  / @elem(F_E_AIND  * PROG_E_AIND  / ( F_E_AIND  * PROG_E_AIND ) , 2000))  / log(C_E_AIND  / PROG_E_AIND  / ( C_E_AIND  / PROG_E_AIND )  / @elem(C_E_AIND  / PROG_E_AIND  / ( C_E_AIND  / PROG_E_AIND ) , 2000)  * 1.0000000001)  + ES_E_E_AIND )  - ( C_E_AIND  / PROG_E_AIND  / ( C_E_AIND  / PROG_E_AIND )  / @elem(C_E_AIND  / PROG_E_AIND  / ( C_E_AIND  / PROG_E_AIND ) , 2000) > 1.00001 )  * ( log(F_E_AIND  * PROG_E_AIND  / ( F_E_AIND  * PROG_E_AIND )  / @elem(F_E_AIND  * PROG_E_AIND  / ( F_E_AIND  * PROG_E_AIND ) , 2000))  / log(C_E_AIND  / PROG_E_AIND  / ( C_E_AIND  / PROG_E_AIND )  / @elem(C_E_AIND  / PROG_E_AIND  / ( C_E_AIND  / PROG_E_AIND ) , 2000)  * 1.0000000001)  + ES_E_E_AIND )

d(log(F_n_K_AIND))  = d(log(Y_AIND))  - d(log(PROG_K_AIND))  + d(SUBST_F_K_AIND)

MGP_CSER_CNJN  = MGPD_CSER_CNJN  + MGPM_CSER_CNJN

MGP_CSER_CNJM  = MGPD_CSER_CNJM  + MGPM_CSER_CNJM

d(SUBST_n_CHM_CTRP)  =  - ES_CHM_CTRP  * d(log(PCHD_CTRP)  - log(PCHM_CTRP))

d(log(MGPM_CTRP_CNJM))  = d(log(M_CNJM))  + d(SUBST_MGPM_CTRP_CNJM)

d(log(MGPM_CTRP_CNJN))  = d(log(M_CNJN))  + d(SUBST_MGPM_CTRP_CNJN)

phi_CIM_CNJN_ATPT  = 1  / ( 1  + @elem(CID_CNJN_ATPT  / CIM_CNJN_ATPT , 2000)  * exp(SUBST_CIM_CNJN_ATPT) )

GOS_VAL_ANFO  = VA_VAL_ANFO  - PWAGES_ANFO  * WAGES_ANFO  - PRSSC_ANFO  * RSSC_ANFO  - NTAXI_VAL_ANFO

phi_CIM_CTRP_ANRE  = 1  / ( 1  + @elem(CID_CTRP_ANRE  / CIM_CTRP_ANRE , 2000)  * exp(SUBST_CIM_CTRP_ANRE) )

d(log(IA_ASER))  = ADJUST_IA_Ye_ASER  * d(log(Y_e_ASER))  + ADJUST_IA_IA1_ASER  * d(log(IA_ASER(-1)))  + ADJUST_IA_SUBST_ASER  * d(SUBST_F_K_ASER)  + ADJUST_IA_Kn_ASER  * ( log(F_n_K_ASER(-1))  - log(F_K_ASER(-1)) )

d(log(W_ATPO))  = ADJUST_W_Wn_ATPO  * d(log(W_n_ATPO))  + ADJUST_W_W1_ATPO  * d(log(W_ATPO(-1)))  - ADJUST_W_W1Wn1_ATPO  * log(W_ATPO(-1)  / W_n_ATPO(-1))

d(log(YQS_CIND))  = d(log(YQ_CIND))

SUBST_MGPM_CTRP_CIND  = ADJUST6_MGPM_CTRP_CIND  * SUBST_n_MGPM_CTRP_CIND  + ( 1  - ADJUST6_MGPM_CTRP_CIND )  * SUBST_MGPM_CTRP_CIND(-1)

F_K_ASER  = ( 1  - Rdep_ASER )  * F_K_ASER(-1)  + IA_ASER

phi_CIM_CNJN_ATPO  = 1  / ( 1  + @elem(CID_CNJN_ATPO  / CIM_CNJN_ATPO , 2000)  * exp(SUBST_CIM_CNJN_ATPO) )

phi_IM_CSER_ATPO  = 1  / ( 1  + @elem(ID_CSER_ATPO  / IM_CSER_ATPO , 2000)  * exp(SUBST_IM_CSER_ATPO) )

PCI_CNJN_ASER  * CI_CNJN_ASER  = PCID_CNJN_ASER  * CID_CNJN_ASER  + PCIM_CNJN_ASER  * CIM_CNJN_ASER

d(SUBST_n_F_E_ANRE)  = 0  +  - ES_E_K_ANRE  * phi_K_ANRE(-1)  * d(log(C_E_ANRE  / PROG_E_ANRE)  - log(C_K_ANRE  / PROG_K_ANRE))  +  - ES_E_L_ANRE  * phi_L_ANRE(-1)  * d(log(C_E_ANRE  / PROG_E_ANRE)  - log(C_L_ANRE  / PROG_L_ANRE))  +  - ES_E_E_ANRE  * phi_E_ANRE(-1)  * d(log(C_E_ANRE  / PROG_E_ANRE)  - log(C_E_ANRE  / PROG_E_ANRE))  +  - ES_E_MAT_ANRE  * phi_MAT_ANRE(-1)  * d(log(C_E_ANRE  / PROG_E_ANRE)  - log(C_MAT_ANRE  / PROG_MAT_ANRE))

NOS_VAL_ASER  = GOS_VAL_ASER  - PK_ASER(-1)  * Rdep_ASER  * F_K_ASER(-1)

phi_IM_CSER_ATPT  = 1  / ( 1  + @elem(ID_CSER_ATPT  / IM_CSER_ATPT , 2000)  * exp(SUBST_IM_CSER_ATPT) )

( CH_n_CNJM  - NCH_CNJM )  * PCH_CNJM  = phi_MCH_CNJM  * ( CH_n_VAL  - PNCH  * NCH )

phi_CHM_CIND  = 1  / ( 1  + @elem(CHD_CIND  / CHM_CIND , 2000)  * exp(SUBST_CHM_CIND) )

( CH_n_CSER  - NCH_CSER )  * PCH_CSER  = phi_MCH_CSER  * ( CH_n_VAL  - PNCH  * NCH )

phi_MGPD_CTRP_CIND  = PMGPD_CTRP_CIND  * MGPD_CTRP_CIND  / ( 0  + PMGPD_CIND_CIND  * MGPD_CIND_CIND  + PMGPD_CTRP_CIND  * MGPD_CTRP_CIND  + PMGPD_CSER_CIND  * MGPD_CSER_CIND  + PMGPD_CNJN_CIND  * MGPD_CNJN_CIND  + PMGPD_CNJM_CIND  * MGPD_CNJM_CIND )

verif_phi_F_AIND  = ( 1  - ( 0  + phi_K_AIND  + phi_L_AIND  + phi_E_AIND  + phi_MAT_AIND ) )  * 100

log(F_MAT_ANRE)  = ADJUST0_F_MAT_ANRE  * log(F_n_MAT_ANRE)  + ( 1  - ADJUST0_F_MAT_ANRE )  * ( log(F_MAT_ANRE(-1))  + d(log(F_e_MAT_ANRE)) )

Verif_Bal_G_Prim_VAbis  = ( Bal_G_Prim_VALbis  / Bal_G_Prim_VAL  - 1 )  * 100

PCID_CIND  * CID_CIND  = 0  + PCID_CIND_AIND  * CID_CIND_AIND  + PCID_CIND_ATPT  * CID_CIND_ATPT  + PCID_CIND_ATPO  * CID_CIND_ATPO  + PCID_CIND_ASER  * CID_CIND_ASER  + PCID_CIND_ANRE  * CID_CIND_ANRE  + PCID_CIND_ANFO  * CID_CIND_ANFO

CID_CTRP_AIND  = ( 1  - phi_CIM_CTRP_AIND )  * CI_CTRP_AIND

PIM_ANFO  * IM_ANFO  = 0  + PIM_CIND_ANFO  * IM_CIND_ANFO  + PIM_CSER_ANFO  * IM_CSER_ANFO

d(log(F_e_L_ASER))  = ADJUST1_F_L_ASER  * d(log(F_e_L_ASER(-1)))  + ADJUST2_F_L_ASER  * d(log(F_L_ASER(-1)))  + ADJUST3_F_L_ASER  * d(log(F_n_L_ASER))

SUBST_CIM_CNJN_ASER  = ADJUST6_CIM_CNJN_ASER  * SUBST_n_CIM_CNJN_ASER  + ( 1  - ADJUST6_CIM_CNJN_ASER )  * SUBST_CIM_CNJN_ASER(-1)

phi_E_AIND  = C_E_AIND  * F_n_E_AIND  / ( 0  + C_K_AIND  * F_n_K_AIND  + C_L_AIND  * F_n_L_AIND  + C_E_AIND  * F_n_E_AIND  + C_MAT_AIND  * F_n_MAT_AIND )

PCIM_CIND_ANRE  = PMSBVAT_CIND

( CH_n_CNJN  - NCH_CNJN )  * PCH_CNJN  = phi_MCH_CNJN  * ( CH_n_VAL  - PNCH  * NCH )

d(log(F_e_E_AIND))  = ADJUST1_F_E_AIND  * d(log(F_e_E_AIND(-1)))  + ADJUST2_F_E_AIND  * d(log(F_E_AIND(-1)))  + ADJUST3_F_E_AIND  * d(log(F_n_E_AIND))

GOS_VAL_ATPT  = VA_VAL_ATPT  - PWAGES_ATPT  * WAGES_ATPT  - PRSSC_ATPT  * RSSC_ATPT  - NTAXI_VAL_ATPT

GOS_VAL_ATPO  = VA_VAL_ATPO  - PWAGES_ATPO  * WAGES_ATPO  - PRSSC_ATPO  * RSSC_ATPO  - NTAXI_VAL_ATPO

log(PY_ANRE)  = ADJUST0_PY_ANRE  * log(PY_n_ANRE)  + ( 1  - ADJUST0_PY_ANRE )  * ( log(PY_ANRE(-1))  + d(log(PY_e_ANRE)) )

SUBST_IM_CSER_AIND  = ADJUST6_IM_CSER_AIND  * SUBST_n_IM_CSER_AIND  + ( 1  - ADJUST6_IM_CSER_AIND )  * SUBST_IM_CSER_AIND(-1)

PROG_MAT_ANFO  = PROG_MAT_ANFO(-1)  * ( 1  + GR_PROG_MAT_ANFO )

VA_VAL_ANFO  = PY_ANFO  * Y_ANFO  - PCI_ANFO  * CI_ANFO

I_CSER  = ID_CSER  + IM_CSER

IM_CIND  = 0  + IM_CIND_AIND  + IM_CIND_ATPT  + IM_CIND_ATPO  + IM_CIND_ASER  + IM_CIND_ANRE  + IM_CIND_ANFO

ES_act_L_MAT_ANRE  = ES_L_MAT_ANRE  - ( C_L_ANRE  / PROG_L_ANRE  / ( C_MAT_ANRE  / PROG_MAT_ANRE )  / @elem(C_L_ANRE  / PROG_L_ANRE  / ( C_MAT_ANRE  / PROG_MAT_ANRE ) , 2000) < 0.99999 )  * ( log(F_L_ANRE  * PROG_L_ANRE  / ( F_MAT_ANRE  * PROG_MAT_ANRE )  / @elem(F_L_ANRE  * PROG_L_ANRE  / ( F_MAT_ANRE  * PROG_MAT_ANRE ) , 2000))  / log(C_L_ANRE  / PROG_L_ANRE  / ( C_MAT_ANRE  / PROG_MAT_ANRE )  / @elem(C_L_ANRE  / PROG_L_ANRE  / ( C_MAT_ANRE  / PROG_MAT_ANRE ) , 2000)  * 1.0000000001)  + ES_L_MAT_ANRE )  - ( C_L_ANRE  / PROG_L_ANRE  / ( C_MAT_ANRE  / PROG_MAT_ANRE )  / @elem(C_L_ANRE  / PROG_L_ANRE  / ( C_MAT_ANRE  / PROG_MAT_ANRE ) , 2000) > 1.00001 )  * ( log(F_L_ANRE  * PROG_L_ANRE  / ( F_MAT_ANRE  * PROG_MAT_ANRE )  / @elem(F_L_ANRE  * PROG_L_ANRE  / ( F_MAT_ANRE  * PROG_MAT_ANRE ) , 2000))  / log(C_L_ANRE  / PROG_L_ANRE  / ( C_MAT_ANRE  / PROG_MAT_ANRE )  / @elem(C_L_ANRE  / PROG_L_ANRE  / ( C_MAT_ANRE  / PROG_MAT_ANRE ) , 2000)  * 1.0000000001)  + ES_L_MAT_ANRE )

SUBST_CIM_CNJM_ANFO  = ADJUST6_CIM_CNJM_ANFO  * SUBST_n_CIM_CNJM_ANFO  + ( 1  - ADJUST6_CIM_CNJM_ANFO )  * SUBST_CIM_CNJM_ANFO(-1)

d(log(YCAP_ATPT))  = 0  + phi_K_ATPT(-1)  * d(log(F_K_ATPT  * PROG_K_ATPT))  + phi_L_ATPT(-1)  * d(log(F_L_ATPT  * PROG_L_ATPT))  + phi_E_ATPT(-1)  * d(log(F_E_ATPT  * PROG_E_ATPT))  + phi_MAT_ATPT(-1)  * d(log(F_MAT_ATPT  * PROG_MAT_ATPT))  + ADJUST_YCAP_Y_ATPT  * ( log(Y_ATPT(-1))  - log(YCAP_ATPT(-1)  * @elem(CUR_ATPT , 2000)) )

ES_act_K_L_ATPO  = ES_K_L_ATPO  - ( C_K_ATPO  / PROG_K_ATPO  / ( C_L_ATPO  / PROG_L_ATPO )  / @elem(C_K_ATPO  / PROG_K_ATPO  / ( C_L_ATPO  / PROG_L_ATPO ) , 2000) < 0.99999 )  * ( log(F_K_ATPO  * PROG_K_ATPO  / ( F_L_ATPO  * PROG_L_ATPO )  / @elem(F_K_ATPO  * PROG_K_ATPO  / ( F_L_ATPO  * PROG_L_ATPO ) , 2000))  / log(C_K_ATPO  / PROG_K_ATPO  / ( C_L_ATPO  / PROG_L_ATPO )  / @elem(C_K_ATPO  / PROG_K_ATPO  / ( C_L_ATPO  / PROG_L_ATPO ) , 2000)  * 1.0000000001)  + ES_K_L_ATPO )  - ( C_K_ATPO  / PROG_K_ATPO  / ( C_L_ATPO  / PROG_L_ATPO )  / @elem(C_K_ATPO  / PROG_K_ATPO  / ( C_L_ATPO  / PROG_L_ATPO ) , 2000) > 1.00001 )  * ( log(F_K_ATPO  * PROG_K_ATPO  / ( F_L_ATPO  * PROG_L_ATPO )  / @elem(F_K_ATPO  * PROG_K_ATPO  / ( F_L_ATPO  * PROG_L_ATPO ) , 2000))  / log(C_K_ATPO  / PROG_K_ATPO  / ( C_L_ATPO  / PROG_L_ATPO )  / @elem(C_K_ATPO  / PROG_K_ATPO  / ( C_L_ATPO  / PROG_L_ATPO ) , 2000)  * 1.0000000001)  + ES_K_L_ATPO )

PYQ_CNJM  * YQ_CNJM  = 0  + PY_AIND  * Y_CNJM_AIND  + PY_ASER  * Y_CNJM_ASER  + PY_ANFO  * Y_CNJM_ANFO

PYQ_CNJN  * YQ_CNJN  = 0  + PY_ASER  * Y_CNJN_ASER  + PY_ANRE  * Y_CNJN_ANRE  + PY_ANFO  * Y_CNJN_ANFO

d(SUBST_n_CIM_CNJN_ATPO)  =  - ES_CIM_CNJN_ATPO  * d(log(PCID_CNJN_ATPO)  - log(PCIM_CNJN_ATPO))

log(F_E_ANRE)  = ADJUST0_F_E_ANRE  * log(F_n_E_ANRE)  + ( 1  - ADJUST0_F_E_ANRE )  * ( log(F_E_ANRE(-1))  + d(log(F_e_E_ANRE)) )

d(log(I_CSER_AIND))  = d(log(IA_AIND))

PCID_CIND_ANFO  = PYQSBVAT_CIND

CU_n_AIND  * Y_AIND  = 0  + C_K_AIND  * F_n_K_AIND  + C_L_AIND  * F_n_L_AIND  + C_E_AIND  * F_n_E_AIND  + C_MAT_AIND  * F_n_MAT_AIND  + NTAXI_VAL_AIND

PYQbis_CSER  * YQ_CSER  + NTAXPD_VAL_CSER  + PMGPD_CSER  * MGPD_CSER  = PQD_CSER  * QD_CSER

PCI_CNJN  * CI_CNJN  = PCID_CNJN  * CID_CNJN  + PCIM_CNJN  * CIM_CNJN

Verif_PGDPter  = ( PGDPter  / PGDP  - 1 )  * 100

PCI_CNJM  * CI_CNJM  = PCID_CNJM  * CID_CNJM  + PCIM_CNJM  * CIM_CNJM

M_CIND  * PM_CIND  + NTAXPM_VAL_CIND  + PMGPM_CIND  * MGPM_CIND  = PQM_CIND  * QM_CIND

( CH_n_CTRP  - NCH_CTRP )  * PCH_CTRP  = phi_MCH_CTRP  * ( CH_n_VAL  - PNCH  * NCH )

SUBST_X_CSER  = ADJUST6_X_CSER  * SUBST_n_X_CSER  + ( 1  - ADJUST6_X_CSER )  * SUBST_X_CSER(-1)

PMGPM_CIND  * MGPM_CIND  = 0  + PMGPM_CTRP_CIND  * MGPM_CTRP_CIND  + PMGPM_CSER_CIND  * MGPM_CSER_CIND

d(SUBST_n_F_E_AIND)  = 0  +  - ES_E_K_AIND  * phi_K_AIND(-1)  * d(log(C_E_AIND  / PROG_E_AIND)  - log(C_K_AIND  / PROG_K_AIND))  +  - ES_E_L_AIND  * phi_L_AIND(-1)  * d(log(C_E_AIND  / PROG_E_AIND)  - log(C_L_AIND  / PROG_L_AIND))  +  - ES_E_E_AIND  * phi_E_AIND(-1)  * d(log(C_E_AIND  / PROG_E_AIND)  - log(C_E_AIND  / PROG_E_AIND))  +  - ES_E_MAT_AIND  * phi_MAT_AIND(-1)  * d(log(C_E_AIND  / PROG_E_AIND)  - log(C_MAT_AIND  / PROG_MAT_AIND))

VATD_CIND  = @elem(RVATD_CIND , 2000)  * CHD_CIND  / ( 1  + @elem(RVATD_CIND , 2000) )

verif_phi_TRSP_ANFO  = ( 1  - ( 0  + phi_TRSP_CTRP_ANFO ) )  * 100

phi_TRSP_CTRP_ANFO  = PCI_CTRP_ANFO  * CI_CTRP_ANFO  / ( 0  + PCI_CTRP_ANFO  * CI_CTRP_ANFO )

d(SUBST_n_CIM_CTRP_ANRE)  =  - ES_CIM_CTRP_ANRE  * d(log(PCID_CTRP_ANRE)  - log(PCIM_CTRP_ANRE))

SUBST_F_K_ATPT  = ADJUST6_F_K_ATPT  * SUBST_n_F_K_ATPT  + ( 1  - ADJUST6_F_K_ATPT )  * SUBST_F_K_ATPT(-1)

NTAXPD_VAL_CTRP  = PVATD_CTRP  * VATD_CTRP  + POTHPTD_CTRP  * OTHPTD_CTRP  + PSUBPD_CTRP  * SUBPD_CTRP

PMSBVAT_CTRP  * MSBVAT_CTRP  = PM_CTRP  * M_CTRP  + POTHPTM_CTRP  * OTHPTM_CTRP  + PSUBPM_CTRP  * SUBPM_CTRP  + PMGPM_CTRP  * MGPM_CTRP

log(F_MAT_ATPO)  = ADJUST0_F_MAT_ATPO  * log(F_n_MAT_ATPO)  + ( 1  - ADJUST0_F_MAT_ATPO )  * ( log(F_MAT_ATPO(-1))  + d(log(F_e_MAT_ATPO)) )

PRSSC_ASER  = P

SUBST_F_K_ATPO  = ADJUST6_F_K_ATPO  * SUBST_n_F_K_ATPO  + ( 1  - ADJUST6_F_K_ATPO )  * SUBST_F_K_ATPO(-1)

d(SUBST_n_F_K_ANFO)  = 0  +  - ES_K_K_ANFO  * phi_K_ANFO(-1)  * d(log(C_K_ANFO  / PROG_K_ANFO)  - log(C_K_ANFO  / PROG_K_ANFO))  +  - ES_K_L_ANFO  * phi_L_ANFO(-1)  * d(log(C_K_ANFO  / PROG_K_ANFO)  - log(C_L_ANFO  / PROG_L_ANFO))  +  - ES_K_E_ANFO  * phi_E_ANFO(-1)  * d(log(C_K_ANFO  / PROG_K_ANFO)  - log(C_E_ANFO  / PROG_E_ANFO))  +  - ES_K_MAT_ANFO  * phi_MAT_ANFO(-1)  * d(log(C_K_ANFO  / PROG_K_ANFO)  - log(C_MAT_ANFO  / PROG_MAT_ANFO))

d(SUBST_n_CIM_CNJM_ANFO)  =  - ES_CIM_CNJM_ANFO  * d(log(PCID_CNJM_ANFO)  - log(PCIM_CNJM_ANFO))

d(log(G_CNJN))  = d(log(EXPG))

d(log(I_CSER_ATPO))  = d(log(IA_ATPO))

CU_n_ATPO  * Y_ATPO  = 0  + C_K_ATPO  * F_n_K_ATPO  + C_L_ATPO  * F_n_L_ATPO  + C_E_ATPO  * F_n_E_ATPO  + C_MAT_ATPO  * F_n_MAT_ATPO  + NTAXI_VAL_ATPO

PQD_CIND  * QD_CIND  = PMGRD_CIND  * MGRD_CIND  + PCID_CIND  * CID_CIND  + PCHD_CIND  * CHD_CIND  + PGD_CIND  * GD_CIND  + PID_CIND  * ID_CIND  + PXD_CIND  * XD_CIND  + PDSD_CIND  * DSD_CIND

CU_n_ATPT  * Y_ATPT  = 0  + C_K_ATPT  * F_n_K_ATPT  + C_L_ATPT  * F_n_L_ATPT  + C_E_ATPT  * F_n_E_ATPT  + C_MAT_ATPT  * F_n_MAT_ATPT  + NTAXI_VAL_ATPT

d(log(I_CSER_ATPT))  = d(log(IA_ATPT))

Q_CNJN  = QD_CNJN  + QM_CNJN

Q_CNJM  = QD_CNJM  + QM_CNJM

PGDPbis  * GDPbis  = 0  + PGDP_CIND  * GDP_CIND  + PGDP_CTRP  * GDP_CTRP  + PGDP_CSER  * GDP_CSER  + PGDP_CNJN  * GDP_CNJN  + PGDP_CNJM  * GDP_CNJM

SUBST_CI_CNJN_ANFO  = ADJUST6_CI_CNJN_ANFO  * SUBST_n_CI_CNJN_ANFO  + ( 1  - ADJUST6_CI_CNJN_ANFO )  * SUBST_CI_CNJN_ANFO(-1)

PCIM_CTRP  * CIM_CTRP  = 0  + PCIM_CTRP_AIND  * CIM_CTRP_AIND  + PCIM_CTRP_ATPT  * CIM_CTRP_ATPT  + PCIM_CTRP_ATPO  * CIM_CTRP_ATPO  + PCIM_CTRP_ASER  * CIM_CTRP_ASER  + PCIM_CTRP_ANRE  * CIM_CTRP_ANRE  + PCIM_CTRP_ANFO  * CIM_CTRP_ANFO

Y_CIND_ASER  = PhiY_CIND_ASER  * YQ_CIND

SUBST_CI_CNJM_ANRE  = ADJUST6_CI_CNJM_ANRE  * SUBST_n_CI_CNJM_ANRE  + ( 1  - ADJUST6_CI_CNJM_ANRE )  * SUBST_CI_CNJM_ANRE(-1)

SUBST_F_E_ATPO  = ADJUST6_F_E_ATPO  * SUBST_n_F_E_ATPO  + ( 1  - ADJUST6_F_E_ATPO )  * SUBST_F_E_ATPO(-1)

PVATM_CNJN  * VATM_CNJN  = RVATM_CNJN  * PCHM_CNJN  * CHM_CNJN  / ( 1  + RVATM_CNJN )

PCID_CSER_ATPT  = PYQSBVAT_CSER

PVATM_CNJM  * VATM_CNJM  = RVATM_CNJM  * PCHM_CNJM  * CHM_CNJM  / ( 1  + RVATM_CNJM )

d(log(phi_MCH_CNJN))  = ( 1  - ES_LESCES )  * d(log(PCH_CNJN  / PCH_CES))

d(log(phi_MCH_CNJM))  = ( 1  - ES_LESCES )  * d(log(PCH_CNJM  / PCH_CES))

d(log(I_CIND_ATPO))  = d(log(IA_ATPO))

SUBPM_CTRP  = @elem(RSUBPM_CTRP , 2000)  * M_CTRP

PRSSC_ANFO  = P

d(log(MSBVAT_CNJM))  = d(log(M_CNJM))

SUBST_F_E_ATPT  = ADJUST6_F_E_ATPT  * SUBST_n_F_E_ATPT  + ( 1  - ADJUST6_F_E_ATPT )  * SUBST_F_E_ATPT(-1)

PCID_CSER_ATPO  = PYQSBVAT_CSER

log(PROP_INC_G_VAL)  = ADJUST0_PROP_INC_G_VAL  * log(PROP_INC_G_VAL_n)  + ( 1  - ADJUST0_PROP_INC_G_VAL )  * ( log(PROP_INC_G_VAL(-1))  + d(log(PROP_INC_G_VAL_e)) )

PCI_CNJM_AIND  * CI_CNJM_AIND  = PCID_CNJM_AIND  * CID_CNJM_AIND  + PCIM_CNJM_AIND  * CIM_CNJM_AIND

d(SUBST_n_X_CIND)  =  - ES_X_CIND  * d(log(PX_CIND)  - log(TC  * PWD_CIND))

PCID_CIND_ASER  = PYQSBVAT_CIND

Y_CSER_ASER  = PhiY_CSER_ASER  * YQ_CSER

d(log(I_CIND_ATPT))  = d(log(IA_ATPT))

d(log(CH_e_CIND))  = ADJUST1_CH_CIND  * d(log(CH_e_CIND(-1)))  + ADJUST2_CH_CIND  * d(log(CH_CIND(-1)))  + ADJUST3_CH_CIND  * d(log(CH_n_CIND))

MGRbis_CSER  = MGRD_CSER  + MGRM_CSER

XM_CTRP  = phi_XM_CTRP  * X_CTRP

I_ATPT  = ID_ATPT  + IM_ATPT

d(log(I_CSER_ANFO))  = d(log(IA_ANFO))

I_ATPO  = ID_ATPO  + IM_ATPO

CU_n_ANFO  * Y_ANFO  = 0  + C_K_ANFO  * F_n_K_ANFO  + C_L_ANFO  * F_n_L_ANFO  + C_E_ANFO  * F_n_E_ANFO  + C_MAT_ANFO  * F_n_MAT_ANFO  + NTAXI_VAL_ANFO

Y_CIND_ANFO  = PhiY_CIND_ANFO  * YQ_CIND

F_E  = 0  + F_E_AIND  + F_E_ATPT  + F_E_ATPO  + F_E_ASER  + F_E_ANRE  + F_E_ANFO

PCH_CES  = ( 0  + @elem(phi_MCH_CIND , 2000)  * PCH_CIND ^ ( 1  - ES_LESCES )  + @elem(phi_MCH_CTRP , 2000)  * PCH_CTRP ^ ( 1  - ES_LESCES )  + @elem(phi_MCH_CSER , 2000)  * PCH_CSER ^ ( 1  - ES_LESCES )  + @elem(phi_MCH_CNJN , 2000)  * PCH_CNJN ^ ( 1  - ES_LESCES )  + @elem(phi_MCH_CNJM , 2000)  * PCH_CNJM ^ ( 1  - ES_LESCES ) ) ^ ( 1  / ( 1  - ES_LESCES ) )

F_L  = 0  + F_L_AIND  + F_L_ATPT  + F_L_ATPO  + F_L_ASER  + F_L_ANRE  + F_L_ANFO

PCID_CIND_ATPO  = PYQSBVAT_CIND

F_K  = 0  + F_K_AIND  + F_K_ATPT  + F_K_ATPO  + F_K_ASER  + F_K_ANRE  + F_K_ANFO

PXD_CNJN  = PYQSBVAT_CNJN

PXD_CNJM  = PYQSBVAT_CNJM

PCID_CIND_ATPT  = PYQSBVAT_CIND

PCHM_CTRP  = PMSBVAT_CTRP  * ( 1  + RVATM_CTRP )  / ( 1  + @elem(RVATM_CTRP , 2000) )

d(log(MSBVAT_CSER))  = d(log(M_CSER))

PCI_CSER  * CI_CSER  = PCID_CSER  * CID_CSER  + PCIM_CSER  * CIM_CSER

SUBST_MGPD_CSER_CNJM  = ADJUST6_MGPD_CSER_CNJM  * SUBST_n_MGPD_CSER_CNJM  + ( 1  - ADJUST6_MGPD_CSER_CNJM )  * SUBST_MGPD_CSER_CNJM(-1)

VAT  = VATD  + VATM

PIM_CIND_ATPO  = PMSBVAT_CIND

XM_CNJN  = phi_XM_CNJN  * X_CNJN

XM_CNJM  = phi_XM_CNJM  * X_CNJM

d(log(W_ASER))  = ADJUST_W_Wn_ASER  * d(log(W_n_ASER))  + ADJUST_W_W1_ASER  * d(log(W_ASER(-1)))  - ADJUST_W_W1Wn1_ASER  * log(W_ASER(-1)  / W_n_ASER(-1))

phi_XM_CTRP  = 1  / ( 1  + @elem(XD_CTRP  / XM_CTRP , 2000)  * exp(SUBST_XM_CTRP) )

d(log(W_ANRE))  = ADJUST_W_Wn_ANRE  * d(log(W_n_ANRE))  + ADJUST_W_W1_ANRE  * d(log(W_ANRE(-1)))  - ADJUST_W_W1Wn1_ANRE  * log(W_ANRE(-1)  / W_n_ANRE(-1))

d(log(phi_MCH_CSER))  = ( 1  - ES_LESCES )  * d(log(PCH_CSER  / PCH_CES))

PIM_CIND_ATPT  = PMSBVAT_CIND

Phi_CH_CTRP  = CH_CTRP  / CH

IM_CSER_ATPT  = phi_IM_CSER_ATPT  * I_CSER_ATPT

QD_CSER  = MGRD_CSER  + CID_CSER  + CHD_CSER  + GD_CSER  + ID_CSER  + XD_CSER  + DSD_CSER

PVATD_CTRP  * VATD_CTRP  = RVATD_CTRP  * PCHD_CTRP  * CHD_CTRP  / ( 1  + RVATD_CTRP )

d(SUBST_n_CI_CNJM_ATPT)  = 0  +  - ES_NRJ_CNJM_CNJN_ATPT  * phi_E_CNJN_ATPT  * d(log(PCI_CNJM_ATPT)  - log(PCI_CNJN_ATPT))  +  - ES_NRJ_CNJM_CNJM_ATPT  * phi_E_CNJM_ATPT  * d(log(PCI_CNJM_ATPT)  - log(PCI_CNJM_ATPT))

( 1  + MARKUP_CTRP )  = PYQ_CTRP  * YQ_CTRP  / ( 0  + CU_ATPT  * Y_CTRP_ATPT  + CU_ATPO  * Y_CTRP_ATPO  + CU_ASER  * Y_CTRP_ASER )

PY_n_ATPO  = CU_n_ATPO  * ( 1  + MARKUP_ATPO )

PCIM_CNJN_ANFO  = PMSBVAT_CNJN

PCH  * CH  = PCHD  * CHD  + PCHM  * CHM

PCI  * CI  = PCID  * CID  + PCIM  * CIM

PY_n_ATPT  = CU_n_ATPT  * ( 1  + MARKUP_ATPT )

d(SUBST_n_CI_CNJM_ATPO)  = 0  +  - ES_NRJ_CNJM_CNJN_ATPO  * phi_E_CNJN_ATPO  * d(log(PCI_CNJM_ATPO)  - log(PCI_CNJN_ATPO))  +  - ES_NRJ_CNJM_CNJM_ATPO  * phi_E_CNJM_ATPO  * d(log(PCI_CNJM_ATPO)  - log(PCI_CNJM_ATPO))

GOS_ANFO  = VA_ANFO  - WAGES_ANFO  - RSSC_ANFO  - NTAXI_ANFO

PX_CNJM  * X_CNJM  = PXD_CNJM  * XD_CNJM  + PXM_CNJM  * XM_CNJM

CUR_ATPO  = Y_ATPO  / YCAP_ATPO

PX_CNJN  * X_CNJN  = PXD_CNJN  * XD_CNJN  + PXM_CNJN  * XM_CNJN

CIM_CNJN_ASER  = phi_CIM_CNJN_ASER  * CI_CNJN_ASER

Y_CSER_ANRE  = PhiY_CSER_ANRE  * YQ_CSER

d(log(Y_e_AIND))  = ADJUST_Ye_Y_AIND  * d(log(Y_AIND))  + ( 1  - ADJUST_Ye_Y_AIND )  * d(log(Y_e_AIND(-1)))

PE_AIND  * F_E_AIND  = 0  + PCI_CNJN_AIND  * CI_CNJN_AIND  + PCI_CNJM_AIND  * CI_CNJM_AIND

CUR_ATPT  = Y_ATPT  / YCAP_ATPT

d(R_ANFO)  = d(R)

SAV_G_VAL  = INC_G_VAL  - SPEND_G_VAL

ES_act_K_L_AIND  = ES_K_L_AIND  - ( C_K_AIND  / PROG_K_AIND  / ( C_L_AIND  / PROG_L_AIND )  / @elem(C_K_AIND  / PROG_K_AIND  / ( C_L_AIND  / PROG_L_AIND ) , 2000) < 0.99999 )  * ( log(F_K_AIND  * PROG_K_AIND  / ( F_L_AIND  * PROG_L_AIND )  / @elem(F_K_AIND  * PROG_K_AIND  / ( F_L_AIND  * PROG_L_AIND ) , 2000))  / log(C_K_AIND  / PROG_K_AIND  / ( C_L_AIND  / PROG_L_AIND )  / @elem(C_K_AIND  / PROG_K_AIND  / ( C_L_AIND  / PROG_L_AIND ) , 2000)  * 1.0000000001)  + ES_K_L_AIND )  - ( C_K_AIND  / PROG_K_AIND  / ( C_L_AIND  / PROG_L_AIND )  / @elem(C_K_AIND  / PROG_K_AIND  / ( C_L_AIND  / PROG_L_AIND ) , 2000) > 1.00001 )  * ( log(F_K_AIND  * PROG_K_AIND  / ( F_L_AIND  * PROG_L_AIND )  / @elem(F_K_AIND  * PROG_K_AIND  / ( F_L_AIND  * PROG_L_AIND ) , 2000))  / log(C_K_AIND  / PROG_K_AIND  / ( C_L_AIND  / PROG_L_AIND )  / @elem(C_K_AIND  / PROG_K_AIND  / ( C_L_AIND  / PROG_L_AIND ) , 2000)  * 1.0000000001)  + ES_K_L_AIND )

d(R_ASER)  = d(R)

PI_ATPO  * I_ATPO  = PID_ATPO  * ID_ATPO  + PIM_ATPO  * IM_ATPO

MGPD_CNJN  = 0  + MGPD_CTRP_CNJN  + MGPD_CSER_CNJN

MGPD_CNJM  = 0  + MGPD_CTRP_CNJM  + MGPD_CSER_CNJM

ID_CSER_ATPT  = ( 1  - phi_IM_CSER_ATPT )  * I_CSER_ATPT

ID_AIND  = 0  + ID_CIND_AIND  + ID_CSER_AIND

ID_CSER_ATPO  = ( 1  - phi_IM_CSER_ATPO )  * I_CSER_ATPO

DSM  = 0  + DSM_CIND  + DSM_CTRP  + DSM_CSER  + DSM_CNJN  + DSM_CNJM

NOS_ATPT  = GOS_ATPT  - @elem(PK_ATPT(-1) , 2000)  * Rdep_ATPT  * F_K_ATPT(-1)

DSD  = 0  + DSD_CIND  + DSD_CTRP  + DSD_CSER  + DSD_CNJN  + DSD_CNJM

PCH_CSER  * CH_CSER  = PCHD_CSER  * CHD_CSER  + PCHM_CSER  * CHM_CSER

ES_act_MAT_K_ATPO  = ES_MAT_K_ATPO  - ( C_MAT_ATPO  / PROG_MAT_ATPO  / ( C_K_ATPO  / PROG_K_ATPO )  / @elem(C_MAT_ATPO  / PROG_MAT_ATPO  / ( C_K_ATPO  / PROG_K_ATPO ) , 2000) < 0.99999 )  * ( log(F_MAT_ATPO  * PROG_MAT_ATPO  / ( F_K_ATPO  * PROG_K_ATPO )  / @elem(F_MAT_ATPO  * PROG_MAT_ATPO  / ( F_K_ATPO  * PROG_K_ATPO ) , 2000))  / log(C_MAT_ATPO  / PROG_MAT_ATPO  / ( C_K_ATPO  / PROG_K_ATPO )  / @elem(C_MAT_ATPO  / PROG_MAT_ATPO  / ( C_K_ATPO  / PROG_K_ATPO ) , 2000)  * 1.0000000001)  + ES_MAT_K_ATPO )  - ( C_MAT_ATPO  / PROG_MAT_ATPO  / ( C_K_ATPO  / PROG_K_ATPO )  / @elem(C_MAT_ATPO  / PROG_MAT_ATPO  / ( C_K_ATPO  / PROG_K_ATPO ) , 2000) > 1.00001 )  * ( log(F_MAT_ATPO  * PROG_MAT_ATPO  / ( F_K_ATPO  * PROG_K_ATPO )  / @elem(F_MAT_ATPO  * PROG_MAT_ATPO  / ( F_K_ATPO  * PROG_K_ATPO ) , 2000))  / log(C_MAT_ATPO  / PROG_MAT_ATPO  / ( C_K_ATPO  / PROG_K_ATPO )  / @elem(C_MAT_ATPO  / PROG_MAT_ATPO  / ( C_K_ATPO  / PROG_K_ATPO ) , 2000)  * 1.0000000001)  + ES_MAT_K_ATPO )

d(log(MSBVAT_CIND))  = d(log(M_CIND))

Verif_GDPter  = ( GDPter  / GDP  - 1 )  * 100

ES_act_MAT_K_ATPT  = ES_MAT_K_ATPT  - ( C_MAT_ATPT  / PROG_MAT_ATPT  / ( C_K_ATPT  / PROG_K_ATPT )  / @elem(C_MAT_ATPT  / PROG_MAT_ATPT  / ( C_K_ATPT  / PROG_K_ATPT ) , 2000) < 0.99999 )  * ( log(F_MAT_ATPT  * PROG_MAT_ATPT  / ( F_K_ATPT  * PROG_K_ATPT )  / @elem(F_MAT_ATPT  * PROG_MAT_ATPT  / ( F_K_ATPT  * PROG_K_ATPT ) , 2000))  / log(C_MAT_ATPT  / PROG_MAT_ATPT  / ( C_K_ATPT  / PROG_K_ATPT )  / @elem(C_MAT_ATPT  / PROG_MAT_ATPT  / ( C_K_ATPT  / PROG_K_ATPT ) , 2000)  * 1.0000000001)  + ES_MAT_K_ATPT )  - ( C_MAT_ATPT  / PROG_MAT_ATPT  / ( C_K_ATPT  / PROG_K_ATPT )  / @elem(C_MAT_ATPT  / PROG_MAT_ATPT  / ( C_K_ATPT  / PROG_K_ATPT ) , 2000) > 1.00001 )  * ( log(F_MAT_ATPT  * PROG_MAT_ATPT  / ( F_K_ATPT  * PROG_K_ATPT )  / @elem(F_MAT_ATPT  * PROG_MAT_ATPT  / ( F_K_ATPT  * PROG_K_ATPT ) , 2000))  / log(C_MAT_ATPT  / PROG_MAT_ATPT  / ( C_K_ATPT  / PROG_K_ATPT )  / @elem(C_MAT_ATPT  / PROG_MAT_ATPT  / ( C_K_ATPT  / PROG_K_ATPT ) , 2000)  * 1.0000000001)  + ES_MAT_K_ATPT )

SUBST_CHM_CSER  = ADJUST6_CHM_CSER  * SUBST_n_CHM_CSER  + ( 1  - ADJUST6_CHM_CSER )  * SUBST_CHM_CSER(-1)

verif_YQbis_CIND  = ( YQbis_CIND  / YQ_CIND  - 1 )  * 100

PCIM_CIND_ATPT  = PMSBVAT_CIND

C_MAT  * F_MAT  = 0  + C_MAT_AIND  * F_MAT_AIND  + C_MAT_ATPT  * F_MAT_ATPT  + C_MAT_ATPO  * F_MAT_ATPO  + C_MAT_ASER  * F_MAT_ASER  + C_MAT_ANRE  * F_MAT_ANRE  + C_MAT_ANFO  * F_MAT_ANFO

PCIM_CIND_ATPO  = PMSBVAT_CIND

RNTAXPD_CSER  = NTAXPD_VAL_CSER  / ( PYQ_CSER  * YQ_CSER )

PCI_CNJN_ANFO  * CI_CNJN_ANFO  = PCID_CNJN_ANFO  * CID_CNJN_ANFO  + PCIM_CNJN_ANFO  * CIM_CNJN_ANFO

Verif_CIbis  = ( CIbis  / CI  - 1 )  * 100

d(SUBST_n_CIM_CTRP_ASER)  =  - ES_CIM_CTRP_ASER  * d(log(PCID_CTRP_ASER)  - log(PCIM_CTRP_ASER))

PMGPD_CSER_CIND  * MGR_CSER  = PMGRD_CSER  * MGRD_CSER  + PMGRM_CSER  * MGRM_CSER

SUBST_F_K_AIND  = ADJUST6_F_K_AIND  * SUBST_n_F_K_AIND  + ( 1  - ADJUST6_F_K_AIND )  * SUBST_F_K_AIND(-1)

d(log(YCAP_ASER))  = 0  + phi_K_ASER(-1)  * d(log(F_K_ASER  * PROG_K_ASER))  + phi_L_ASER(-1)  * d(log(F_L_ASER  * PROG_L_ASER))  + phi_E_ASER(-1)  * d(log(F_E_ASER  * PROG_E_ASER))  + phi_MAT_ASER(-1)  * d(log(F_MAT_ASER  * PROG_MAT_ASER))  + ADJUST_YCAP_Y_ASER  * ( log(Y_ASER(-1))  - log(YCAP_ASER(-1)  * @elem(CUR_ASER , 2000)) )

d(log(1  + MARKUP_n2_ATPO))  = RHO_MARKUP_Y  * ( d(log(Y_ATPO))  - d(log(Y_ATPO(-1))) )

Verif_PIbis  = ( PIbis  / PI  - 1 )  * 100

d(log(1  + MARKUP_n2_ATPT))  = RHO_MARKUP_Y  * ( d(log(Y_ATPT))  - d(log(Y_ATPT(-1))) )

POTHPTD_CIND  * OTHPTD_CIND  = ROTHPTD_CIND  * PYQ_CIND  * YQ_CIND

PMS_CIND  * MS_CIND  = PM_CIND  * M_CIND  + NTAXPM_VAL_CIND  + PMGPM_CIND  * MGPM_CIND

SUBST_CIM_CNJN_AIND  = ADJUST6_CIM_CNJN_AIND  * SUBST_n_CIM_CNJN_AIND  + ( 1  - ADJUST6_CIM_CNJN_AIND )  * SUBST_CIM_CNJN_AIND(-1)

PCI_CIND_ATPO  * CI_CIND_ATPO  = PCID_CIND_ATPO  * CID_CIND_ATPO  + PCIM_CIND_ATPO  * CIM_CIND_ATPO

CID_CNJM  = 0  + CID_CNJM_AIND  + CID_CNJM_ATPT  + CID_CNJM_ATPO  + CID_CNJM_ASER  + CID_CNJM_ANRE  + CID_CNJM_ANFO

d(log(F_n_MAT_ASER))  = d(log(Y_ASER))  - d(log(PROG_MAT_ASER))  + d(SUBST_F_MAT_ASER)

phi_CIM_CNJN_ASER  = 1  / ( 1  + @elem(CID_CNJN_ASER  / CIM_CNJN_ASER , 2000)  * exp(SUBST_CIM_CNJN_ASER) )

PXD_CSER  = PYQSBVAT_CSER

PCI_CIND_ATPT  * CI_CIND_ATPT  = PCID_CIND_ATPT  * CID_CIND_ATPT  + PCIM_CIND_ATPT  * CIM_CIND_ATPT

d(log(1  + MARKUP_n_AIND))  = RHO_MARKUP_Y  * d(log(CUR_AIND))

IM_CSER  = 0  + IM_CSER_AIND  + IM_CSER_ATPT  + IM_CSER_ATPO  + IM_CSER_ASER  + IM_CSER_ANRE  + IM_CSER_ANFO

PIM_CIND_ASER  = PMSBVAT_CIND

ID_CIND_AIND  = ( 1  - phi_IM_CIND_AIND )  * I_CIND_AIND

PXM_CNJN  = PMSBVAT_CNJN

d(log(F_n_L_AIND))  = d(log(Y_AIND))  - d(log(PROG_L_AIND))  + d(SUBST_F_L_AIND)

PGD_CSER  = PYQSBVAT_CSER

C_K_ANRE  = PK_ANRE  * ( Rdep_ANRE  + r_ANRE )

CIM_CIND_ANRE  = phi_CIM_CIND_ANRE  * CI_CIND_ANRE

CID_CTRP_ANFO  = ( 1  - phi_CIM_CTRP_ANFO )  * CI_CTRP_ANFO

phi_E_CNJM_ATPO  = PCI_CNJM_ATPO  * CI_CNJM_ATPO  / ( 0  + PCI_CNJN_ATPO  * CI_CNJN_ATPO  + PCI_CNJM_ATPO  * CI_CNJM_ATPO )

PMGR  * MGR  = PMGRD  * MGRD  + PMGRM  * MGRM

ID_ANFO  = 0  + ID_CIND_ANFO  + ID_CSER_ANFO

CID_CTRP_ATPO  = ( 1  - phi_CIM_CTRP_ATPO )  * CI_CTRP_ATPO

d(log(F_n_MAT_ANFO))  = d(log(Y_ANFO))  - d(log(PROG_MAT_ANFO))  + d(SUBST_F_MAT_ANFO)

d(log(1  + MARKUP_n2_ANFO))  = RHO_MARKUP_Y  * ( d(log(Y_ANFO))  - d(log(Y_ANFO(-1))) )

CID_CTRP_ATPT  = ( 1  - phi_CIM_CTRP_ATPT )  * CI_CTRP_ATPT

PG_CTRP  * G_CTRP  = PGD_CTRP  * GD_CTRP  + PGM_CTRP  * GM_CTRP

phi_E_CNJM_ATPT  = PCI_CNJM_ATPT  * CI_CNJM_ATPT  / ( 0  + PCI_CNJN_ATPT  * CI_CNJN_ATPT  + PCI_CNJM_ATPT  * CI_CNJM_ATPT )

PID_CIND_AIND  = PYQSBVAT_CIND

PQD_CNJN  * QD_CNJN  = PMGRD_CNJN  * MGRD_CNJN  + PCID_CNJN  * CID_CNJN  + PCHD_CNJN  * CHD_CNJN  + PGD_CNJN  * GD_CNJN  + PID_CNJN  * ID_CNJN  + PXD_CNJN  * XD_CNJN  + PDSD_CNJN  * DSD_CNJN

PQD_CNJM  * QD_CNJM  = PMGRD_CNJM  * MGRD_CNJM  + PCID_CNJM  * CID_CNJM  + PCHD_CNJM  * CHD_CNJM  + PGD_CNJM  * GD_CNJM  + PID_CNJM  * ID_CNJM  + PXD_CNJM  * XD_CNJM  + PDSD_CNJM  * DSD_CNJM

PIM_AIND  * IM_AIND  = 0  + PIM_CIND_AIND  * IM_CIND_AIND  + PIM_CSER_AIND  * IM_CSER_AIND

C_MAT_ANFO  = PMAT_ANFO

ES_act_E_MAT_AIND  = ES_E_MAT_AIND  - ( C_E_AIND  / PROG_E_AIND  / ( C_MAT_AIND  / PROG_MAT_AIND )  / @elem(C_E_AIND  / PROG_E_AIND  / ( C_MAT_AIND  / PROG_MAT_AIND ) , 2000) < 0.99999 )  * ( log(F_E_AIND  * PROG_E_AIND  / ( F_MAT_AIND  * PROG_MAT_AIND )  / @elem(F_E_AIND  * PROG_E_AIND  / ( F_MAT_AIND  * PROG_MAT_AIND ) , 2000))  / log(C_E_AIND  / PROG_E_AIND  / ( C_MAT_AIND  / PROG_MAT_AIND )  / @elem(C_E_AIND  / PROG_E_AIND  / ( C_MAT_AIND  / PROG_MAT_AIND ) , 2000)  * 1.0000000001)  + ES_E_MAT_AIND )  - ( C_E_AIND  / PROG_E_AIND  / ( C_MAT_AIND  / PROG_MAT_AIND )  / @elem(C_E_AIND  / PROG_E_AIND  / ( C_MAT_AIND  / PROG_MAT_AIND ) , 2000) > 1.00001 )  * ( log(F_E_AIND  * PROG_E_AIND  / ( F_MAT_AIND  * PROG_MAT_AIND )  / @elem(F_E_AIND  * PROG_E_AIND  / ( F_MAT_AIND  * PROG_MAT_AIND ) , 2000))  / log(C_E_AIND  / PROG_E_AIND  / ( C_MAT_AIND  / PROG_MAT_AIND )  / @elem(C_E_AIND  / PROG_E_AIND  / ( C_MAT_AIND  / PROG_MAT_AIND ) , 2000)  * 1.0000000001)  + ES_E_MAT_AIND )

C_E_ANFO  = PE_ANFO

CID_CNJM_ANFO  = ( 1  - phi_CIM_CNJM_ANFO )  * CI_CNJM_ANFO

PY_n_ANFO  = CU_n_ANFO  * ( 1  + MARKUP_ANFO )

F_MAT  = 0  + F_MAT_AIND  + F_MAT_ATPT  + F_MAT_ATPO  + F_MAT_ASER  + F_MAT_ANRE  + F_MAT_ANFO

ES_act_L_E_ANRE  = ES_L_E_ANRE  - ( C_L_ANRE  / PROG_L_ANRE  / ( C_E_ANRE  / PROG_E_ANRE )  / @elem(C_L_ANRE  / PROG_L_ANRE  / ( C_E_ANRE  / PROG_E_ANRE ) , 2000) < 0.99999 )  * ( log(F_L_ANRE  * PROG_L_ANRE  / ( F_E_ANRE  * PROG_E_ANRE )  / @elem(F_L_ANRE  * PROG_L_ANRE  / ( F_E_ANRE  * PROG_E_ANRE ) , 2000))  / log(C_L_ANRE  / PROG_L_ANRE  / ( C_E_ANRE  / PROG_E_ANRE )  / @elem(C_L_ANRE  / PROG_L_ANRE  / ( C_E_ANRE  / PROG_E_ANRE ) , 2000)  * 1.0000000001)  + ES_L_E_ANRE )  - ( C_L_ANRE  / PROG_L_ANRE  / ( C_E_ANRE  / PROG_E_ANRE )  / @elem(C_L_ANRE  / PROG_L_ANRE  / ( C_E_ANRE  / PROG_E_ANRE ) , 2000) > 1.00001 )  * ( log(F_L_ANRE  * PROG_L_ANRE  / ( F_E_ANRE  * PROG_E_ANRE )  / @elem(F_L_ANRE  * PROG_L_ANRE  / ( F_E_ANRE  * PROG_E_ANRE ) , 2000))  / log(C_L_ANRE  / PROG_L_ANRE  / ( C_E_ANRE  / PROG_E_ANRE )  / @elem(C_L_ANRE  / PROG_L_ANRE  / ( C_E_ANRE  / PROG_E_ANRE ) , 2000)  * 1.0000000001)  + ES_L_E_ANRE )

ES_act_CHM_CSER  = ES_CHM_CSER  - ( PCHD_CSER  / PCHM_CSER < 0.99999 )  * ( log(CHD_CSER  / CHM_CSER  / @elem(CHD_CSER  / CHM_CSER , 2000))  / log(PCHD_CSER  / PCHM_CSER  * 1.0000000001)  + ES_CHM_CSER )  - ( PCHD_CSER  / PCHM_CSER > 1.00001 )  * ( log(CHD_CSER  / CHM_CSER  / @elem(CHD_CSER  / CHM_CSER , 2000))  / log(PCHD_CSER  / PCHM_CSER  * 1.0000000001)  + ES_CHM_CSER )

VATD  = 0  + VATD_CIND  + VATD_CTRP  + VATD_CSER  + VATD_CNJN  + VATD_CNJM

ES_act_K_MAT_AIND  = ES_K_MAT_AIND  - ( C_K_AIND  / PROG_K_AIND  / ( C_MAT_AIND  / PROG_MAT_AIND )  / @elem(C_K_AIND  / PROG_K_AIND  / ( C_MAT_AIND  / PROG_MAT_AIND ) , 2000) < 0.99999 )  * ( log(F_K_AIND  * PROG_K_AIND  / ( F_MAT_AIND  * PROG_MAT_AIND )  / @elem(F_K_AIND  * PROG_K_AIND  / ( F_MAT_AIND  * PROG_MAT_AIND ) , 2000))  / log(C_K_AIND  / PROG_K_AIND  / ( C_MAT_AIND  / PROG_MAT_AIND )  / @elem(C_K_AIND  / PROG_K_AIND  / ( C_MAT_AIND  / PROG_MAT_AIND ) , 2000)  * 1.0000000001)  + ES_K_MAT_AIND )  - ( C_K_AIND  / PROG_K_AIND  / ( C_MAT_AIND  / PROG_MAT_AIND )  / @elem(C_K_AIND  / PROG_K_AIND  / ( C_MAT_AIND  / PROG_MAT_AIND ) , 2000) > 1.00001 )  * ( log(F_K_AIND  * PROG_K_AIND  / ( F_MAT_AIND  * PROG_MAT_AIND )  / @elem(F_K_AIND  * PROG_K_AIND  / ( F_MAT_AIND  * PROG_MAT_AIND ) , 2000))  / log(C_K_AIND  / PROG_K_AIND  / ( C_MAT_AIND  / PROG_MAT_AIND )  / @elem(C_K_AIND  / PROG_K_AIND  / ( C_MAT_AIND  / PROG_MAT_AIND ) , 2000)  * 1.0000000001)  + ES_K_MAT_AIND )

d(SUBST_n_F_K_ASER)  = 0  +  - ES_K_K_ASER  * phi_K_ASER(-1)  * d(log(C_K_ASER  / PROG_K_ASER)  - log(C_K_ASER  / PROG_K_ASER))  +  - ES_K_L_ASER  * phi_L_ASER(-1)  * d(log(C_K_ASER  / PROG_K_ASER)  - log(C_L_ASER  / PROG_L_ASER))  +  - ES_K_E_ASER  * phi_E_ASER(-1)  * d(log(C_K_ASER  / PROG_K_ASER)  - log(C_E_ASER  / PROG_E_ASER))  +  - ES_K_MAT_ASER  * phi_MAT_ASER(-1)  * d(log(C_K_ASER  / PROG_K_ASER)  - log(C_MAT_ASER  / PROG_MAT_ASER))

d(SUBST_n_CIM_CTRP_AIND)  =  - ES_CIM_CTRP_AIND  * d(log(PCID_CTRP_AIND)  - log(PCIM_CTRP_AIND))

phi_CIM_CTRP_ATPT  = 1  / ( 1  + @elem(CID_CTRP_ATPT  / CIM_CTRP_ATPT , 2000)  * exp(SUBST_CIM_CTRP_ATPT) )

PCIM_CSER  * CIM_CSER  = 0  + PCIM_CSER_AIND  * CIM_CSER_AIND  + PCIM_CSER_ATPT  * CIM_CSER_ATPT  + PCIM_CSER_ATPO  * CIM_CSER_ATPO  + PCIM_CSER_ASER  * CIM_CSER_ASER  + PCIM_CSER_ANRE  * CIM_CSER_ANRE  + PCIM_CSER_ANFO  * CIM_CSER_ANFO

phi_CIM_CTRP_ATPO  = 1  / ( 1  + @elem(CID_CTRP_ATPO  / CIM_CTRP_ATPO , 2000)  * exp(SUBST_CIM_CTRP_ATPO) )

PCI_CNJN_AIND  * CI_CNJN_AIND  = PCID_CNJN_AIND  * CID_CNJN_AIND  + PCIM_CNJN_AIND  * CIM_CNJN_AIND

verif_phi_E_ATPO  = ( 1  - ( 0  + phi_E_CNJN_ATPO  + phi_E_CNJM_ATPO ) )  * 100

d(SUBST_n_F_L_ATPT)  = 0  +  - ES_L_K_ATPT  * phi_K_ATPT(-1)  * d(log(C_L_ATPT  / PROG_L_ATPT)  - log(C_K_ATPT  / PROG_K_ATPT))  +  - ES_L_L_ATPT  * phi_L_ATPT(-1)  * d(log(C_L_ATPT  / PROG_L_ATPT)  - log(C_L_ATPT  / PROG_L_ATPT))  +  - ES_L_E_ATPT  * phi_E_ATPT(-1)  * d(log(C_L_ATPT  / PROG_L_ATPT)  - log(C_E_ATPT  / PROG_E_ATPT))  +  - ES_L_MAT_ATPT  * phi_MAT_ATPT(-1)  * d(log(C_L_ATPT  / PROG_L_ATPT)  - log(C_MAT_ATPT  / PROG_MAT_ATPT))

phi_E_CNJM_ANRE  = PCI_CNJM_ANRE  * CI_CNJM_ANRE  / ( 0  + PCI_CNJN_ANRE  * CI_CNJN_ANRE  + PCI_CNJM_ANRE  * CI_CNJM_ANRE )

Y_ANFO  = 0  + Y_CIND_ANFO  + Y_CNJN_ANFO  + Y_CNJM_ANFO

PCI_CTRP_ANFO  * CI_CTRP_ANFO  = PCID_CTRP_ANFO  * CID_CTRP_ANFO  + PCIM_CTRP_ANFO  * CIM_CTRP_ANFO

d(SUBST_n_F_L_ATPO)  = 0  +  - ES_L_K_ATPO  * phi_K_ATPO(-1)  * d(log(C_L_ATPO  / PROG_L_ATPO)  - log(C_K_ATPO  / PROG_K_ATPO))  +  - ES_L_L_ATPO  * phi_L_ATPO(-1)  * d(log(C_L_ATPO  / PROG_L_ATPO)  - log(C_L_ATPO  / PROG_L_ATPO))  +  - ES_L_E_ATPO  * phi_E_ATPO(-1)  * d(log(C_L_ATPO  / PROG_L_ATPO)  - log(C_E_ATPO  / PROG_E_ATPO))  +  - ES_L_MAT_ATPO  * phi_MAT_ATPO(-1)  * d(log(C_L_ATPO  / PROG_L_ATPO)  - log(C_MAT_ATPO  / PROG_MAT_ATPO))

verif_phi_E_ATPT  = ( 1  - ( 0  + phi_E_CNJN_ATPT  + phi_E_CNJM_ATPT ) )  * 100

Y_AIND  = 0  + Y_CIND_AIND  + Y_CSER_AIND  + Y_CNJM_AIND

d(log(F_n_E_ATPT))  = d(log(Y_ATPT))  - d(log(PROG_E_ATPT))  + d(SUBST_F_E_ATPT)

d(SUBST_n_CIM_CNJN_ATPT)  =  - ES_CIM_CNJN_ATPT  * d(log(PCID_CNJN_ATPT)  - log(PCIM_CNJN_ATPT))

d(SUBST_n_XM_CSER)  =  - ES_XM_CSER  * d(log(PXD_CSER)  - log(PXM_CSER))

phi_CIM_CTRP_AIND  = 1  / ( 1  + @elem(CID_CTRP_AIND  / CIM_CTRP_AIND , 2000)  * exp(SUBST_CIM_CTRP_AIND) )

PSUBPM_CNJM  * SUBPM_CNJM  = RSUBPM_CNJM  * M_CNJM

PSUBPM_CNJN  * SUBPM_CNJN  = RSUBPM_CNJN  * M_CNJN

XM_CSER  = phi_XM_CSER  * X_CSER

PMGPM_CTRP_CIND  = PMGPD_CTRP_CIND

RSAV_H_VAL  = SAV_H_VAL  / DISPINC_AT_VAL

MGPM_CIND  = 0  + MGPM_CTRP_CIND  + MGPM_CSER_CIND

PM_CIND  = TC  * PWD_CIND

d(SUBST_n_F_MAT_ANFO)  = 0  +  - ES_MAT_K_ANFO  * phi_K_ANFO(-1)  * d(log(C_MAT_ANFO  / PROG_MAT_ANFO)  - log(C_K_ANFO  / PROG_K_ANFO))  +  - ES_MAT_L_ANFO  * phi_L_ANFO(-1)  * d(log(C_MAT_ANFO  / PROG_MAT_ANFO)  - log(C_L_ANFO  / PROG_L_ANFO))  +  - ES_MAT_E_ANFO  * phi_E_ANFO(-1)  * d(log(C_MAT_ANFO  / PROG_MAT_ANFO)  - log(C_E_ANFO  / PROG_E_ANFO))  +  - ES_MAT_MAT_ANFO  * phi_MAT_ANFO(-1)  * d(log(C_MAT_ANFO  / PROG_MAT_ANFO)  - log(C_MAT_ANFO  / PROG_MAT_ANFO))

GOS_VAL_ANRE  = VA_VAL_ANRE  - PWAGES_ANRE  * WAGES_ANRE  - PRSSC_ANRE  * RSSC_ANRE  - NTAXI_VAL_ANRE

NTAXI_VAL_ASER  = RNTAXI_ASER  * PY_ASER  * Y_ASER

SUBST_IM_CSER_ANRE  = ADJUST6_IM_CSER_ANRE  * SUBST_n_IM_CSER_ANRE  + ( 1  - ADJUST6_IM_CSER_ANRE )  * SUBST_IM_CSER_ANRE(-1)

G  = GD  + GM

CID_CNJN_ANFO  = ( 1  - phi_CIM_CNJN_ANFO )  * CI_CNJN_ANFO

d(log(MGPD_CTRP_CIND))  = d(log(YQ_CIND))  + d(SUBST_MGPD_CTRP_CIND)

d(SUBST_n_F_E_ATPT)  = 0  +  - ES_E_K_ATPT  * phi_K_ATPT(-1)  * d(log(C_E_ATPT  / PROG_E_ATPT)  - log(C_K_ATPT  / PROG_K_ATPT))  +  - ES_E_L_ATPT  * phi_L_ATPT(-1)  * d(log(C_E_ATPT  / PROG_E_ATPT)  - log(C_L_ATPT  / PROG_L_ATPT))  +  - ES_E_E_ATPT  * phi_E_ATPT(-1)  * d(log(C_E_ATPT  / PROG_E_ATPT)  - log(C_E_ATPT  / PROG_E_ATPT))  +  - ES_E_MAT_ATPT  * phi_MAT_ATPT(-1)  * d(log(C_E_ATPT  / PROG_E_ATPT)  - log(C_MAT_ATPT  / PROG_MAT_ATPT))

verif_PYQbis_CNJM  = ( PYQbis_CNJM  / PYQ_CNJM  - 1 )  * 100

verif_PYQbis_CNJN  = ( PYQbis_CNJN  / PYQ_CNJN  - 1 )  * 100

d(SUBST_n_F_E_ATPO)  = 0  +  - ES_E_K_ATPO  * phi_K_ATPO(-1)  * d(log(C_E_ATPO  / PROG_E_ATPO)  - log(C_K_ATPO  / PROG_K_ATPO))  +  - ES_E_L_ATPO  * phi_L_ATPO(-1)  * d(log(C_E_ATPO  / PROG_E_ATPO)  - log(C_L_ATPO  / PROG_L_ATPO))  +  - ES_E_E_ATPO  * phi_E_ATPO(-1)  * d(log(C_E_ATPO  / PROG_E_ATPO)  - log(C_E_ATPO  / PROG_E_ATPO))  +  - ES_E_MAT_ATPO  * phi_MAT_ATPO(-1)  * d(log(C_E_ATPO  / PROG_E_ATPO)  - log(C_MAT_ATPO  / PROG_MAT_ATPO))

ES_act_E_MAT_ANRE  = ES_E_MAT_ANRE  - ( C_E_ANRE  / PROG_E_ANRE  / ( C_MAT_ANRE  / PROG_MAT_ANRE )  / @elem(C_E_ANRE  / PROG_E_ANRE  / ( C_MAT_ANRE  / PROG_MAT_ANRE ) , 2000) < 0.99999 )  * ( log(F_E_ANRE  * PROG_E_ANRE  / ( F_MAT_ANRE  * PROG_MAT_ANRE )  / @elem(F_E_ANRE  * PROG_E_ANRE  / ( F_MAT_ANRE  * PROG_MAT_ANRE ) , 2000))  / log(C_E_ANRE  / PROG_E_ANRE  / ( C_MAT_ANRE  / PROG_MAT_ANRE )  / @elem(C_E_ANRE  / PROG_E_ANRE  / ( C_MAT_ANRE  / PROG_MAT_ANRE ) , 2000)  * 1.0000000001)  + ES_E_MAT_ANRE )  - ( C_E_ANRE  / PROG_E_ANRE  / ( C_MAT_ANRE  / PROG_MAT_ANRE )  / @elem(C_E_ANRE  / PROG_E_ANRE  / ( C_MAT_ANRE  / PROG_MAT_ANRE ) , 2000) > 1.00001 )  * ( log(F_E_ANRE  * PROG_E_ANRE  / ( F_MAT_ANRE  * PROG_MAT_ANRE )  / @elem(F_E_ANRE  * PROG_E_ANRE  / ( F_MAT_ANRE  * PROG_MAT_ANRE ) , 2000))  / log(C_E_ANRE  / PROG_E_ANRE  / ( C_MAT_ANRE  / PROG_MAT_ANRE )  / @elem(C_E_ANRE  / PROG_E_ANRE  / ( C_MAT_ANRE  / PROG_MAT_ANRE ) , 2000)  * 1.0000000001)  + ES_E_MAT_ANRE )

ES_act_CHM_CNJN  = ES_CHM_CNJN  - ( PCHD_CNJN  / PCHM_CNJN < 0.99999 )  * ( log(CHD_CNJN  / CHM_CNJN  / @elem(CHD_CNJN  / CHM_CNJN , 2000))  / log(PCHD_CNJN  / PCHM_CNJN  * 1.0000000001)  + ES_CHM_CNJN )  - ( PCHD_CNJN  / PCHM_CNJN > 1.00001 )  * ( log(CHD_CNJN  / CHM_CNJN  / @elem(CHD_CNJN  / CHM_CNJN , 2000))  / log(PCHD_CNJN  / PCHM_CNJN  * 1.0000000001)  + ES_CHM_CNJN )

ES_act_CHM_CNJM  = ES_CHM_CNJM  - ( PCHD_CNJM  / PCHM_CNJM < 0.99999 )  * ( log(CHD_CNJM  / CHM_CNJM  / @elem(CHD_CNJM  / CHM_CNJM , 2000))  / log(PCHD_CNJM  / PCHM_CNJM  * 1.0000000001)  + ES_CHM_CNJM )  - ( PCHD_CNJM  / PCHM_CNJM > 1.00001 )  * ( log(CHD_CNJM  / CHM_CNJM  / @elem(CHD_CNJM  / CHM_CNJM , 2000))  / log(PCHD_CNJM  / PCHM_CNJM  * 1.0000000001)  + ES_CHM_CNJM )

PK_ANFO  * F_K_ANFO  = ( 1  - Rdep_ANFO )  * PK_ANFO(-1)  * F_K_ANFO(-1)  + PI_ANFO  * I_ANFO

PCH_CTRP  * CH_CTRP  = PCHD_CTRP  * CHD_CTRP  + PCHM_CTRP  * CHM_CTRP

DISPINC_BT_VAL  = PWAGES  * WAGES  + PROP_INC_H_VAL  + SOC_BENF_VAL  + TRSF_HH_VAL

SUBST_CIM_CNJM_AIND  = ADJUST6_CIM_CNJM_AIND  * SUBST_n_CIM_CNJM_AIND  + ( 1  - ADJUST6_CIM_CNJM_AIND )  * SUBST_CIM_CNJM_AIND(-1)

d(log(F_n_E_ATPO))  = d(log(Y_ATPO))  - d(log(PROG_E_ATPO))  + d(SUBST_F_E_ATPO)

IM_ASER  = 0  + IM_CIND_ASER  + IM_CSER_ASER

PCIM_CTRP_AIND  = PMSBVAT_CTRP

ES_act_K_MAT_ANRE  = ES_K_MAT_ANRE  - ( C_K_ANRE  / PROG_K_ANRE  / ( C_MAT_ANRE  / PROG_MAT_ANRE )  / @elem(C_K_ANRE  / PROG_K_ANRE  / ( C_MAT_ANRE  / PROG_MAT_ANRE ) , 2000) < 0.99999 )  * ( log(F_K_ANRE  * PROG_K_ANRE  / ( F_MAT_ANRE  * PROG_MAT_ANRE )  / @elem(F_K_ANRE  * PROG_K_ANRE  / ( F_MAT_ANRE  * PROG_MAT_ANRE ) , 2000))  / log(C_K_ANRE  / PROG_K_ANRE  / ( C_MAT_ANRE  / PROG_MAT_ANRE )  / @elem(C_K_ANRE  / PROG_K_ANRE  / ( C_MAT_ANRE  / PROG_MAT_ANRE ) , 2000)  * 1.0000000001)  + ES_K_MAT_ANRE )  - ( C_K_ANRE  / PROG_K_ANRE  / ( C_MAT_ANRE  / PROG_MAT_ANRE )  / @elem(C_K_ANRE  / PROG_K_ANRE  / ( C_MAT_ANRE  / PROG_MAT_ANRE ) , 2000) > 1.00001 )  * ( log(F_K_ANRE  * PROG_K_ANRE  / ( F_MAT_ANRE  * PROG_MAT_ANRE )  / @elem(F_K_ANRE  * PROG_K_ANRE  / ( F_MAT_ANRE  * PROG_MAT_ANRE ) , 2000))  / log(C_K_ANRE  / PROG_K_ANRE  / ( C_MAT_ANRE  / PROG_MAT_ANRE )  / @elem(C_K_ANRE  / PROG_K_ANRE  / ( C_MAT_ANRE  / PROG_MAT_ANRE ) , 2000)  * 1.0000000001)  + ES_K_MAT_ANRE )

phi_MAT_AIND  = C_MAT_AIND  * F_n_MAT_AIND  / ( 0  + C_K_AIND  * F_n_K_AIND  + C_L_AIND  * F_n_L_AIND  + C_E_AIND  * F_n_E_AIND  + C_MAT_AIND  * F_n_MAT_AIND )

CIM_CSER  = 0  + CIM_CSER_AIND  + CIM_CSER_ATPT  + CIM_CSER_ATPO  + CIM_CSER_ASER  + CIM_CSER_ANRE  + CIM_CSER_ANFO

SPEND_G_VAL  = PG  * G  + SOC_BENF_VAL  + DEBT_G_VAL(-1)  * ( Phi_RD_G(-1)  + r_DEBT_G(-1) )

Y_CSER_ATPT  = PhiY_CSER_ATPT  * YQ_CSER

PSUBPM_CIND  * SUBPM_CIND  = RSUBPM_CIND  * M_CIND

d(log(IA_ANRE))  = ADJUST_IA_Ye_ANRE  * d(log(Y_e_ANRE))  + ADJUST_IA_IA1_ANRE  * d(log(IA_ANRE(-1)))  + ADJUST_IA_SUBST_ANRE  * d(SUBST_F_K_ANRE)  + ADJUST_IA_Kn_ANRE  * ( log(F_n_K_ANRE(-1))  - log(F_K_ANRE(-1)) )

d(log(G_CSER))  = d(log(EXPG))

NOS_ASER  = GOS_ASER  - @elem(PK_ASER(-1) , 2000)  * Rdep_ASER  * F_K_ASER(-1)

PX_CSER  * X_CSER  = PXD_CSER  * XD_CSER  + PXM_CSER  * XM_CSER

NTAXP_VAL_CIND  = NTAXPD_VAL_CIND  + NTAXPM_VAL_CIND

GDP_CNJN  = CH_CNJN  + G_CNJN  + I_CNJN  + X_CNJN  + DS_CNJN  - M_CNJN

GDP_CNJM  = CH_CNJM  + G_CNJM  + I_CNJM  + X_CNJM  + DS_CNJM  - M_CNJM

d(SUBST_n_F_MAT_ATPO)  = 0  +  - ES_MAT_K_ATPO  * phi_K_ATPO(-1)  * d(log(C_MAT_ATPO  / PROG_MAT_ATPO)  - log(C_K_ATPO  / PROG_K_ATPO))  +  - ES_MAT_L_ATPO  * phi_L_ATPO(-1)  * d(log(C_MAT_ATPO  / PROG_MAT_ATPO)  - log(C_L_ATPO  / PROG_L_ATPO))  +  - ES_MAT_E_ATPO  * phi_E_ATPO(-1)  * d(log(C_MAT_ATPO  / PROG_MAT_ATPO)  - log(C_E_ATPO  / PROG_E_ATPO))  +  - ES_MAT_MAT_ATPO  * phi_MAT_ATPO(-1)  * d(log(C_MAT_ATPO  / PROG_MAT_ATPO)  - log(C_MAT_ATPO  / PROG_MAT_ATPO))

SUBST_CI_CTRP_AIND  = ADJUST6_CI_CTRP_AIND  * SUBST_n_CI_CTRP_AIND  + ( 1  - ADJUST6_CI_CTRP_AIND )  * SUBST_CI_CTRP_AIND(-1)

PVA  * VA  = 0  + VA_VAL_AIND  + VA_VAL_ATPT  + VA_VAL_ATPO  + VA_VAL_ASER  + VA_VAL_ANRE  + VA_VAL_ANFO

d(SUBST_n_F_MAT_ATPT)  = 0  +  - ES_MAT_K_ATPT  * phi_K_ATPT(-1)  * d(log(C_MAT_ATPT  / PROG_MAT_ATPT)  - log(C_K_ATPT  / PROG_K_ATPT))  +  - ES_MAT_L_ATPT  * phi_L_ATPT(-1)  * d(log(C_MAT_ATPT  / PROG_MAT_ATPT)  - log(C_L_ATPT  / PROG_L_ATPT))  +  - ES_MAT_E_ATPT  * phi_E_ATPT(-1)  * d(log(C_MAT_ATPT  / PROG_MAT_ATPT)  - log(C_E_ATPT  / PROG_E_ATPT))  +  - ES_MAT_MAT_ATPT  * phi_MAT_ATPT(-1)  * d(log(C_MAT_ATPT  / PROG_MAT_ATPT)  - log(C_MAT_ATPT  / PROG_MAT_ATPT))

SUBST_n_MGPD_CSER_CIND  = 0  +  - ES_MGPD_CSER_CTRP_CIND  * phi_MGPD_CTRP_CIND(-1)  * d(log(PMGPD_CSER_CIND)  - log(PMGPD_CTRP_CIND))  +  - ES_MGPD_CSER_CSER_CIND  * phi_MGPD_CSER_CIND(-1)  * d(log(PMGPD_CSER_CIND)  - log(PMGPD_CSER_CIND))

d(SUBST_n_F_E_ANFO)  = 0  +  - ES_E_K_ANFO  * phi_K_ANFO(-1)  * d(log(C_E_ANFO  / PROG_E_ANFO)  - log(C_K_ANFO  / PROG_K_ANFO))  +  - ES_E_L_ANFO  * phi_L_ANFO(-1)  * d(log(C_E_ANFO  / PROG_E_ANFO)  - log(C_L_ANFO  / PROG_L_ANFO))  +  - ES_E_E_ANFO  * phi_E_ANFO(-1)  * d(log(C_E_ANFO  / PROG_E_ANFO)  - log(C_E_ANFO  / PROG_E_ANFO))  +  - ES_E_MAT_ANFO  * phi_MAT_ANFO(-1)  * d(log(C_E_ANFO  / PROG_E_ANFO)  - log(C_MAT_ANFO  / PROG_MAT_ANFO))

PDS  * DS  = PDSD  * DSD  + PDSM  * DSM

Y_CTRP_ASER  = PhiY_CTRP_ASER  * YQ_CTRP

ES_act_MAT_L_ASER  = ES_MAT_L_ASER  - ( C_MAT_ASER  / PROG_MAT_ASER  / ( C_L_ASER  / PROG_L_ASER )  / @elem(C_MAT_ASER  / PROG_MAT_ASER  / ( C_L_ASER  / PROG_L_ASER ) , 2000) < 0.99999 )  * ( log(F_MAT_ASER  * PROG_MAT_ASER  / ( F_L_ASER  * PROG_L_ASER )  / @elem(F_MAT_ASER  * PROG_MAT_ASER  / ( F_L_ASER  * PROG_L_ASER ) , 2000))  / log(C_MAT_ASER  / PROG_MAT_ASER  / ( C_L_ASER  / PROG_L_ASER )  / @elem(C_MAT_ASER  / PROG_MAT_ASER  / ( C_L_ASER  / PROG_L_ASER ) , 2000)  * 1.0000000001)  + ES_MAT_L_ASER )  - ( C_MAT_ASER  / PROG_MAT_ASER  / ( C_L_ASER  / PROG_L_ASER )  / @elem(C_MAT_ASER  / PROG_MAT_ASER  / ( C_L_ASER  / PROG_L_ASER ) , 2000) > 1.00001 )  * ( log(F_MAT_ASER  * PROG_MAT_ASER  / ( F_L_ASER  * PROG_L_ASER )  / @elem(F_MAT_ASER  * PROG_MAT_ASER  / ( F_L_ASER  * PROG_L_ASER ) , 2000))  / log(C_MAT_ASER  / PROG_MAT_ASER  / ( C_L_ASER  / PROG_L_ASER )  / @elem(C_MAT_ASER  / PROG_MAT_ASER  / ( C_L_ASER  / PROG_L_ASER ) , 2000)  * 1.0000000001)  + ES_MAT_L_ASER )

SUBPM  = 0  + SUBPM_CIND  + SUBPM_CTRP  + SUBPM_CSER  + SUBPM_CNJN  + SUBPM_CNJM

( 1  + MARKUP_CIND )  = PYQ_CIND  * YQ_CIND  / ( 0  + CU_AIND  * Y_CIND_AIND  + CU_ASER  * Y_CIND_ASER  + CU_ANRE  * Y_CIND_ANRE  + CU_ANFO  * Y_CIND_ANFO )

verif_phi_F_ANFO  = ( 1  - ( 0  + phi_K_ANFO  + phi_L_ANFO  + phi_E_ANFO  + phi_MAT_ANFO ) )  * 100

SUBST_CI_CTRP_ANRE  = ADJUST6_CI_CTRP_ANRE  * SUBST_n_CI_CTRP_ANRE  + ( 1  - ADJUST6_CI_CTRP_ANRE )  * SUBST_CI_CTRP_ANRE(-1)

VA_ASER  = Y_ASER  - CI_ASER

PWAGES_ANRE  = P

PID_CSER  * ID_CSER  = 0  + PID_CSER_AIND  * ID_CSER_AIND  + PID_CSER_ATPT  * ID_CSER_ATPT  + PID_CSER_ATPO  * ID_CSER_ATPO  + PID_CSER_ASER  * ID_CSER_ASER  + PID_CSER_ANRE  * ID_CSER_ANRE  + PID_CSER_ANFO  * ID_CSER_ANFO

PG_CNJN  * G_CNJN  = PGD_CNJN  * GD_CNJN  + PGM_CNJN  * GM_CNJN

d(SUBST_n_XM_CIND)  =  - ES_XM_CIND  * d(log(PXD_CIND)  - log(PXM_CIND))

verif_YQbis_CNJN  = ( YQbis_CNJN  / YQ_CNJN  - 1 )  * 100

I_ANFO  = ID_ANFO  + IM_ANFO

PSUBPD_CIND  * SUBPD_CIND  = RSUBPD_CIND  * YQ_CIND

DS  = DSD  + DSM

PIM_ANRE  * IM_ANRE  = 0  + PIM_CIND_ANRE  * IM_CIND_ANRE  + PIM_CSER_ANRE  * IM_CSER_ANRE

PID_CSER_ATPO  = PYQSBVAT_CSER

d(log(W_ATPT))  = ADJUST_W_Wn_ATPT  * d(log(W_n_ATPT))  + ADJUST_W_W1_ATPT  * d(log(W_ATPT(-1)))  - ADJUST_W_W1Wn1_ATPT  * log(W_ATPT(-1)  / W_n_ATPT(-1))

PMGPD_CTRP_CNJM  * MGR_CTRP  = PMGRD_CTRP  * MGRD_CTRP  + PMGRM_CTRP  * MGRM_CTRP

C_MAT_ASER  = PMAT_ASER

PID_CSER_ATPT  = PYQSBVAT_CSER

PCID_CSER_ANRE  = PYQSBVAT_CSER

phi_TRSP_CTRP_AIND  = PCI_CTRP_AIND  * CI_CTRP_AIND  / ( 0  + PCI_CTRP_AIND  * CI_CTRP_AIND )

log(PY_ASER)  = ADJUST0_PY_ASER  * log(PY_n_ASER)  + ( 1  - ADJUST0_PY_ASER )  * ( log(PY_ASER(-1))  + d(log(PY_e_ASER)) )

ES_act_MAT_K_ANRE  = ES_MAT_K_ANRE  - ( C_MAT_ANRE  / PROG_MAT_ANRE  / ( C_K_ANRE  / PROG_K_ANRE )  / @elem(C_MAT_ANRE  / PROG_MAT_ANRE  / ( C_K_ANRE  / PROG_K_ANRE ) , 2000) < 0.99999 )  * ( log(F_MAT_ANRE  * PROG_MAT_ANRE  / ( F_K_ANRE  * PROG_K_ANRE )  / @elem(F_MAT_ANRE  * PROG_MAT_ANRE  / ( F_K_ANRE  * PROG_K_ANRE ) , 2000))  / log(C_MAT_ANRE  / PROG_MAT_ANRE  / ( C_K_ANRE  / PROG_K_ANRE )  / @elem(C_MAT_ANRE  / PROG_MAT_ANRE  / ( C_K_ANRE  / PROG_K_ANRE ) , 2000)  * 1.0000000001)  + ES_MAT_K_ANRE )  - ( C_MAT_ANRE  / PROG_MAT_ANRE  / ( C_K_ANRE  / PROG_K_ANRE )  / @elem(C_MAT_ANRE  / PROG_MAT_ANRE  / ( C_K_ANRE  / PROG_K_ANRE ) , 2000) > 1.00001 )  * ( log(F_MAT_ANRE  * PROG_MAT_ANRE  / ( F_K_ANRE  * PROG_K_ANRE )  / @elem(F_MAT_ANRE  * PROG_MAT_ANRE  / ( F_K_ANRE  * PROG_K_ANRE ) , 2000))  / log(C_MAT_ANRE  / PROG_MAT_ANRE  / ( C_K_ANRE  / PROG_K_ANRE )  / @elem(C_MAT_ANRE  / PROG_MAT_ANRE  / ( C_K_ANRE  / PROG_K_ANRE ) , 2000)  * 1.0000000001)  + ES_MAT_K_ANRE )

phi_IM_CIND_ANFO  = 1  / ( 1  + @elem(ID_CIND_ANFO  / IM_CIND_ANFO , 2000)  * exp(SUBST_IM_CIND_ANFO) )

RSAV_G_VAL  = SAV_G_VAL  / ( PGDP  * GDP )

F_K_AIND  = ( 1  - Rdep_AIND )  * F_K_AIND(-1)  + IA_AIND

PMbis_CNJN  * M_CNJN  + NTAXPM_VAL_CNJN  + PMGPM_CNJN  * MGPM_CNJN  = PQM_CNJN  * QM_CNJN

PMbis_CNJM  * M_CNJM  + NTAXPM_VAL_CNJM  + PMGPM_CNJM  * MGPM_CNJM  = PQM_CNJM  * QM_CNJM

d(log(F_n_K_ANFO))  = d(log(Y_ANFO))  - d(log(PROG_K_ANFO))  + d(SUBST_F_K_ANFO)

IM_CSER_ANFO  = phi_IM_CSER_ANFO  * I_CSER_ANFO

PCHM_CSER  = PMSBVAT_CSER  * ( 1  + RVATM_CSER )  / ( 1  + @elem(RVATM_CSER , 2000) )

SUBST_CIM_CNJM_ANRE  = ADJUST6_CIM_CNJM_ANRE  * SUBST_n_CIM_CNJM_ANRE  + ( 1  - ADJUST6_CIM_CNJM_ANRE )  * SUBST_CIM_CNJM_ANRE(-1)

GOS  = 0  + GOS_AIND  + GOS_ATPT  + GOS_ATPO  + GOS_ASER  + GOS_ANRE  + GOS_ANFO

d(log(W_n_ANFO))  = RHO_W_Cons_ANFO  + RHO_W_P_ANFO  * d(log(P))  + RHO_W_Pe_ANFO  * d(log(P_e))  + RHO_W_PROG_ANFO  * d(log(PROG_L_ANFO))  - RHO_W_U_ANFO  * ( UnR  - DNAIRU )  - RHO_W_DU_ANFO  * d(UnR)  + RHO_W_L_ANFO  * d(log(F_L_ANFO)  - log(F_L))

ID_CSER  = 0  + ID_CSER_AIND  + ID_CSER_ATPT  + ID_CSER_ATPO  + ID_CSER_ASER  + ID_CSER_ANRE  + ID_CSER_ANFO

PCI_CNJM_ANFO  * CI_CNJM_ANFO  = PCID_CNJM_ANFO  * CID_CNJM_ANFO  + PCIM_CNJM_ANFO  * CIM_CNJM_ANFO

d(SUBST_n_CI_CNJN_ATPT)  = 0  +  - ES_NRJ_CNJN_CNJN_ATPT  * phi_E_CNJN_ATPT  * d(log(PCI_CNJN_ATPT)  - log(PCI_CNJN_ATPT))  +  - ES_NRJ_CNJN_CNJM_ATPT  * phi_E_CNJM_ATPT  * d(log(PCI_CNJN_ATPT)  - log(PCI_CNJM_ATPT))

d(SUBST_n_CI_CNJN_ATPO)  = 0  +  - ES_NRJ_CNJN_CNJN_ATPO  * phi_E_CNJN_ATPO  * d(log(PCI_CNJN_ATPO)  - log(PCI_CNJN_ATPO))  +  - ES_NRJ_CNJN_CNJM_ATPO  * phi_E_CNJM_ATPO  * d(log(PCI_CNJN_ATPO)  - log(PCI_CNJM_ATPO))

SUBPD_CTRP  = @elem(RSUBPD_CTRP , 2000)  * YQ_CTRP

d(log(CI_CIND_ASER))  = d(log(F_MAT_ASER))

verif_phi_E_AIND  = ( 1  - ( 0  + phi_E_CNJN_AIND  + phi_E_CNJM_AIND ) )  * 100

PQ  * Q  = PQD  * QD  + PQM  * QM

PCI_ATPO  * CI_ATPO  = PCID_ATPO  * CID_ATPO  + PCIM_ATPO  * CIM_ATPO

phi_GM_CNJN  = 1  / ( 1  + @elem(GD_CNJN  / GM_CNJN , 2000)  * exp(SUBST_GM_CNJN) )

PMS_CTRP  * MS_CTRP  = PM_CTRP  * M_CTRP  + NTAXPM_VAL_CTRP  + PMGPM_CTRP  * MGPM_CTRP

PCI_ATPT  * CI_ATPT  = PCID_ATPT  * CID_ATPT  + PCIM_ATPT  * CIM_ATPT

ES_act_K_K_ASER  = ES_K_K_ASER  - ( C_K_ASER  / PROG_K_ASER  / ( C_K_ASER  / PROG_K_ASER )  / @elem(C_K_ASER  / PROG_K_ASER  / ( C_K_ASER  / PROG_K_ASER ) , 2000) < 0.99999 )  * ( log(F_K_ASER  * PROG_K_ASER  / ( F_K_ASER  * PROG_K_ASER )  / @elem(F_K_ASER  * PROG_K_ASER  / ( F_K_ASER  * PROG_K_ASER ) , 2000))  / log(C_K_ASER  / PROG_K_ASER  / ( C_K_ASER  / PROG_K_ASER )  / @elem(C_K_ASER  / PROG_K_ASER  / ( C_K_ASER  / PROG_K_ASER ) , 2000)  * 1.0000000001)  + ES_K_K_ASER )  - ( C_K_ASER  / PROG_K_ASER  / ( C_K_ASER  / PROG_K_ASER )  / @elem(C_K_ASER  / PROG_K_ASER  / ( C_K_ASER  / PROG_K_ASER ) , 2000) > 1.00001 )  * ( log(F_K_ASER  * PROG_K_ASER  / ( F_K_ASER  * PROG_K_ASER )  / @elem(F_K_ASER  * PROG_K_ASER  / ( F_K_ASER  * PROG_K_ASER ) , 2000))  / log(C_K_ASER  / PROG_K_ASER  / ( C_K_ASER  / PROG_K_ASER )  / @elem(C_K_ASER  / PROG_K_ASER  / ( C_K_ASER  / PROG_K_ASER ) , 2000)  * 1.0000000001)  + ES_K_K_ASER )

PCIM_CSER_AIND  = PMSBVAT_CSER

d(log(I_CSER_ASER))  = d(log(IA_ASER))

Phi_CH_CIND  = CH_CIND  / CH

CU_n_ASER  * Y_ASER  = 0  + C_K_ASER  * F_n_K_ASER  + C_L_ASER  * F_n_L_ASER  + C_E_ASER  * F_n_E_ASER  + C_MAT_ASER  * F_n_MAT_ASER  + NTAXI_VAL_ASER

CID_CNJN  = 0  + CID_CNJN_AIND  + CID_CNJN_ATPT  + CID_CNJN_ATPO  + CID_CNJN_ASER  + CID_CNJN_ANRE  + CID_CNJN_ANFO

ES_act_L_K_ASER  = ES_L_K_ASER  - ( C_L_ASER  / PROG_L_ASER  / ( C_K_ASER  / PROG_K_ASER )  / @elem(C_L_ASER  / PROG_L_ASER  / ( C_K_ASER  / PROG_K_ASER ) , 2000) < 0.99999 )  * ( log(F_L_ASER  * PROG_L_ASER  / ( F_K_ASER  * PROG_K_ASER )  / @elem(F_L_ASER  * PROG_L_ASER  / ( F_K_ASER  * PROG_K_ASER ) , 2000))  / log(C_L_ASER  / PROG_L_ASER  / ( C_K_ASER  / PROG_K_ASER )  / @elem(C_L_ASER  / PROG_L_ASER  / ( C_K_ASER  / PROG_K_ASER ) , 2000)  * 1.0000000001)  + ES_L_K_ASER )  - ( C_L_ASER  / PROG_L_ASER  / ( C_K_ASER  / PROG_K_ASER )  / @elem(C_L_ASER  / PROG_L_ASER  / ( C_K_ASER  / PROG_K_ASER ) , 2000) > 1.00001 )  * ( log(F_L_ASER  * PROG_L_ASER  / ( F_K_ASER  * PROG_K_ASER )  / @elem(F_L_ASER  * PROG_L_ASER  / ( F_K_ASER  * PROG_K_ASER ) , 2000))  / log(C_L_ASER  / PROG_L_ASER  / ( C_K_ASER  / PROG_K_ASER )  / @elem(C_L_ASER  / PROG_L_ASER  / ( C_K_ASER  / PROG_K_ASER ) , 2000)  * 1.0000000001)  + ES_L_K_ASER )

PCI_CTRP_ATPT  * CI_CTRP_ATPT  = PCID_CTRP_ATPT  * CID_CTRP_ATPT  + PCIM_CTRP_ATPT  * CIM_CTRP_ATPT

NTAXP_CNJM  = NTAXPD_CNJM  + NTAXPM_CNJM

NTAXP_CNJN  = NTAXPD_CNJN  + NTAXPM_CNJN

M_CSER  * PM_CSER  + NTAXPM_VAL_CSER  + PMGPM_CSER  * MGPM_CSER  = PQM_CSER  * QM_CSER

PWAGES_AIND  = P

d(SUBST_n_CIM_CTRP_ANFO)  =  - ES_CIM_CTRP_ANFO  * d(log(PCID_CTRP_ANFO)  - log(PCIM_CTRP_ANFO))

PCI_CTRP_ATPO  * CI_CTRP_ATPO  = PCID_CTRP_ATPO  * CID_CTRP_ATPO  + PCIM_CTRP_ATPO  * CIM_CTRP_ATPO

d(log(CI_CIND_ANFO))  = d(log(F_MAT_ANFO))

PCID_CIND_ANRE  = PYQSBVAT_CIND

PSUBPM_CSER  * SUBPM_CSER  = RSUBPM_CSER  * M_CSER

log(F_L_ASER)  = ADJUST0_F_L_ASER  * log(F_n_L_ASER)  + ( 1  - ADJUST0_F_L_ASER )  * ( log(F_L_ASER(-1))  + d(log(F_e_L_ASER)) )

d(SUBST_n_F_E_ASER)  = 0  +  - ES_E_K_ASER  * phi_K_ASER(-1)  * d(log(C_E_ASER  / PROG_E_ASER)  - log(C_K_ASER  / PROG_K_ASER))  +  - ES_E_L_ASER  * phi_L_ASER(-1)  * d(log(C_E_ASER  / PROG_E_ASER)  - log(C_L_ASER  / PROG_L_ASER))  +  - ES_E_E_ASER  * phi_E_ASER(-1)  * d(log(C_E_ASER  / PROG_E_ASER)  - log(C_E_ASER  / PROG_E_ASER))  +  - ES_E_MAT_ASER  * phi_MAT_ASER(-1)  * d(log(C_E_ASER  / PROG_E_ASER)  - log(C_MAT_ASER  / PROG_MAT_ASER))

PM  * M  = 0  + PM_CIND  * M_CIND  + PM_CTRP  * M_CTRP  + PM_CSER  * M_CSER  + PM_CNJN  * M_CNJN  + PM_CNJM  * M_CNJM

INC_SOC_TAX_VAL  = RINC_SOC_TAX  * DISPINC_BT_VAL

verif_PYQbis_CTRP  = ( PYQbis_CTRP  / PYQ_CTRP  - 1 )  * 100

phi_CIM_CIND_ASER  = 1  / ( 1  + @elem(CID_CIND_ASER  / CIM_CIND_ASER , 2000)  * exp(SUBST_CIM_CIND_ASER) )

OTHPTM_CNJN  = @elem(ROTHPTM_CNJN , 2000)  * M_CNJN

MGPD_CIND  = 0  + MGPD_CTRP_CIND  + MGPD_CSER_CIND

I_AIND  = ID_AIND  + IM_AIND

d(log(YQS_CSER))  = d(log(YQ_CSER))

ES_act_MAT_E_ANRE  = ES_MAT_E_ANRE  - ( C_MAT_ANRE  / PROG_MAT_ANRE  / ( C_E_ANRE  / PROG_E_ANRE )  / @elem(C_MAT_ANRE  / PROG_MAT_ANRE  / ( C_E_ANRE  / PROG_E_ANRE ) , 2000) < 0.99999 )  * ( log(F_MAT_ANRE  * PROG_MAT_ANRE  / ( F_E_ANRE  * PROG_E_ANRE )  / @elem(F_MAT_ANRE  * PROG_MAT_ANRE  / ( F_E_ANRE  * PROG_E_ANRE ) , 2000))  / log(C_MAT_ANRE  / PROG_MAT_ANRE  / ( C_E_ANRE  / PROG_E_ANRE )  / @elem(C_MAT_ANRE  / PROG_MAT_ANRE  / ( C_E_ANRE  / PROG_E_ANRE ) , 2000)  * 1.0000000001)  + ES_MAT_E_ANRE )  - ( C_MAT_ANRE  / PROG_MAT_ANRE  / ( C_E_ANRE  / PROG_E_ANRE )  / @elem(C_MAT_ANRE  / PROG_MAT_ANRE  / ( C_E_ANRE  / PROG_E_ANRE ) , 2000) > 1.00001 )  * ( log(F_MAT_ANRE  * PROG_MAT_ANRE  / ( F_E_ANRE  * PROG_E_ANRE )  / @elem(F_MAT_ANRE  * PROG_MAT_ANRE  / ( F_E_ANRE  * PROG_E_ANRE ) , 2000))  / log(C_MAT_ANRE  / PROG_MAT_ANRE  / ( C_E_ANRE  / PROG_E_ANRE )  / @elem(C_MAT_ANRE  / PROG_MAT_ANRE  / ( C_E_ANRE  / PROG_E_ANRE ) , 2000)  * 1.0000000001)  + ES_MAT_E_ANRE )

CID_CNJN_ASER  = ( 1  - phi_CIM_CNJN_ASER )  * CI_CNJN_ASER

PCI_CNJN_ANRE  * CI_CNJN_ANRE  = PCID_CNJN_ANRE  * CID_CNJN_ANRE  + PCIM_CNJN_ANRE  * CIM_CNJN_ANRE

SUBST_F_L_ASER  = ADJUST6_F_L_ASER  * SUBST_n_F_L_ASER  + ( 1  - ADJUST6_F_L_ASER )  * SUBST_F_L_ASER(-1)

ID_CSER_ANRE  = ( 1  - phi_IM_CSER_ANRE )  * I_CSER_ANRE

RSSC  = 0  + RSSC_AIND  + RSSC_ATPT  + RSSC_ATPO  + RSSC_ASER  + RSSC_ANRE  + RSSC_ANFO

CU_ASER  * Y_ASER  = 0  + C_K_ASER  * F_K_ASER  + C_L_ASER  * F_L_ASER  + C_E_ASER  * F_E_ASER  + C_MAT_ASER  * F_MAT_ASER  + NTAXI_VAL_ASER

d(log(MGPD_CSER_CIND))  = d(log(YQ_CIND))  + d(SUBST_MGPD_CSER_CIND)

PID_ATPO  * ID_ATPO  = 0  + PID_CIND_ATPO  * ID_CIND_ATPO  + PID_CSER_ATPO  * ID_CSER_ATPO

PX  * X  = PXD  * XD  + PXM  * XM

Stock_SAV_H_VAL  = Stock_SAV_H_VAL(-1)  + SAV_H_VAL

phi_CIM_CNJM_ANFO  = 1  / ( 1  + @elem(CID_CNJM_ANFO  / CIM_CNJM_ANFO , 2000)  * exp(SUBST_CIM_CNJM_ANFO) )

PXD_CIND  = PYQSBVAT_CIND

PCIM_CSER_ATPO  = PMSBVAT_CSER

SUBST_IM_CIND_ATPT  = ADJUST6_IM_CIND_ATPT  * SUBST_n_IM_CIND_ATPT  + ( 1  - ADJUST6_IM_CIND_ATPT )  * SUBST_IM_CIND_ATPT(-1)

phi_CIM_CNJM_AIND  = 1  / ( 1  + @elem(CID_CNJM_AIND  / CIM_CNJM_AIND , 2000)  * exp(SUBST_CIM_CNJM_AIND) )

SUBST_IM_CIND_ATPO  = ADJUST6_IM_CIND_ATPO  * SUBST_n_IM_CIND_ATPO  + ( 1  - ADJUST6_IM_CIND_ATPO )  * SUBST_IM_CIND_ATPO(-1)

PCIM_CSER_ATPT  = PMSBVAT_CSER

PMGPD  * MGPD  = 0  + PMGPD_CIND  * MGPD_CIND  + PMGPD_CNJN  * MGPD_CNJN  + PMGPD_CNJM  * MGPD_CNJM

d(log(X_CSER))  = d(log(WD_CSER))  + d(SUBST_X_CSER)

PMGPM  * MGPM  = 0  + PMGPM_CIND  * MGPM_CIND  + PMGPM_CNJN  * MGPM_CNJN  + PMGPM_CNJM  * MGPM_CNJM

CHD_CTRP  = ( 1  - phi_CHM_CTRP )  * CH_CTRP

d(log(YQS_CTRP))  = d(log(YQ_CTRP))

CIM_CNJM_ANRE  = phi_CIM_CNJM_ANRE  * CI_CNJM_ANRE

ES_act_MAT_L_ANFO  = ES_MAT_L_ANFO  - ( C_MAT_ANFO  / PROG_MAT_ANFO  / ( C_L_ANFO  / PROG_L_ANFO )  / @elem(C_MAT_ANFO  / PROG_MAT_ANFO  / ( C_L_ANFO  / PROG_L_ANFO ) , 2000) < 0.99999 )  * ( log(F_MAT_ANFO  * PROG_MAT_ANFO  / ( F_L_ANFO  * PROG_L_ANFO )  / @elem(F_MAT_ANFO  * PROG_MAT_ANFO  / ( F_L_ANFO  * PROG_L_ANFO ) , 2000))  / log(C_MAT_ANFO  / PROG_MAT_ANFO  / ( C_L_ANFO  / PROG_L_ANFO )  / @elem(C_MAT_ANFO  / PROG_MAT_ANFO  / ( C_L_ANFO  / PROG_L_ANFO ) , 2000)  * 1.0000000001)  + ES_MAT_L_ANFO )  - ( C_MAT_ANFO  / PROG_MAT_ANFO  / ( C_L_ANFO  / PROG_L_ANFO )  / @elem(C_MAT_ANFO  / PROG_MAT_ANFO  / ( C_L_ANFO  / PROG_L_ANFO ) , 2000) > 1.00001 )  * ( log(F_MAT_ANFO  * PROG_MAT_ANFO  / ( F_L_ANFO  * PROG_L_ANFO )  / @elem(F_MAT_ANFO  * PROG_MAT_ANFO  / ( F_L_ANFO  * PROG_L_ANFO ) , 2000))  / log(C_MAT_ANFO  / PROG_MAT_ANFO  / ( C_L_ANFO  / PROG_L_ANFO )  / @elem(C_MAT_ANFO  / PROG_MAT_ANFO  / ( C_L_ANFO  / PROG_L_ANFO ) , 2000)  * 1.0000000001)  + ES_MAT_L_ANFO )

Bal_G_Prim_VALbis  = INC_G_VAL  - ( PG  * G  + SOC_BENF_VAL )

PE_ANFO  * F_E_ANFO  = 0  + PCI_CNJN_ANFO  * CI_CNJN_ANFO  + PCI_CNJM_ANFO  * CI_CNJM_ANFO

d(SUBST_n_X_CNJN)  =  - ES_X_CNJN  * d(log(PX_CNJN)  - log(TC  * PWD_CNJN))

d(SUBST_n_X_CNJM)  =  - ES_X_CNJM  * d(log(PX_CNJM)  - log(TC  * PWD_CNJM))

CIM_CNJM  = 0  + CIM_CNJM_AIND  + CIM_CNJM_ATPT  + CIM_CNJM_ATPO  + CIM_CNJM_ASER  + CIM_CNJM_ANRE  + CIM_CNJM_ANFO

CIM_CNJN  = 0  + CIM_CNJN_AIND  + CIM_CNJN_ATPT  + CIM_CNJN_ATPO  + CIM_CNJN_ASER  + CIM_CNJN_ANRE  + CIM_CNJN_ANFO

Y_CTRP_ATPT  = PhiY_CTRP_ATPT  * YQ_CTRP

XD_CSER  = ( 1  - phi_XM_CSER )  * X_CSER

d(log(W_ANFO))  = ADJUST_W_Wn_ANFO  * d(log(W_n_ANFO))  + ADJUST_W_W1_ANFO  * d(log(W_ANFO(-1)))  - ADJUST_W_W1Wn1_ANFO  * log(W_ANFO(-1)  / W_n_ANFO(-1))

PNOS  * NOS  = 0  + NOS_VAL_AIND  + NOS_VAL_ATPT  + NOS_VAL_ATPO  + NOS_VAL_ASER  + NOS_VAL_ANRE  + NOS_VAL_ANFO

phi_CIM_CIND_AIND  = 1  / ( 1  + @elem(CID_CIND_AIND  / CIM_CIND_AIND , 2000)  * exp(SUBST_CIM_CIND_AIND) )

NTAXP_CIND  = NTAXPD_CIND  + NTAXPM_CIND

SUBST_GM_CNJN  = ADJUST6_GM_CNJN  * SUBST_n_GM_CNJN  + ( 1  - ADJUST6_GM_CNJN )  * SUBST_GM_CNJN(-1)

Y_CTRP_ATPO  = PhiY_CTRP_ATPO  * YQ_CTRP

d(SUBST_n_CIM_CNJM_ANRE)  =  - ES_CIM_CNJM_ANRE  * d(log(PCID_CNJM_ANRE)  - log(PCIM_CNJM_ANRE))

phi_MAT_ASER  = C_MAT_ASER  * F_n_MAT_ASER  / ( 0  + C_K_ASER  * F_n_K_ASER  + C_L_ASER  * F_n_L_ASER  + C_E_ASER  * F_n_E_ASER  + C_MAT_ASER  * F_n_MAT_ASER )

IM_ANFO  = 0  + IM_CIND_ANFO  + IM_CSER_ANFO

verif_PYQbis_CSER  = ( PYQbis_CSER  / PYQ_CSER  - 1 )  * 100

CIM_CIND_AIND  = phi_CIM_CIND_AIND  * CI_CIND_AIND

PCIM_AIND  * CIM_AIND  = 0  + PCIM_CIND_AIND  * CIM_CIND_AIND  + PCIM_CTRP_AIND  * CIM_CTRP_AIND  + PCIM_CSER_AIND  * CIM_CSER_AIND  + PCIM_CNJN_AIND  * CIM_CNJN_AIND  + PCIM_CNJM_AIND  * CIM_CNJM_AIND

QM_CIND  = MGRM_CIND  + CIM_CIND  + CHM_CIND  + GM_CIND  + IM_CIND  + XM_CIND  + DSM_CIND

PCID_CNJN_ANFO  = PYQSBVAT_CNJN

d(log(phi_MCH_CTRP))  = ( 1  - ES_LESCES )  * d(log(PCH_CTRP  / PCH_CES))

d(log(1  + MARKUP_n_ANFO))  = RHO_MARKUP_Y  * d(log(CUR_ANFO))

PI_CIND  * I_CIND  = PID_CIND  * ID_CIND  + PIM_CIND  * IM_CIND

DS_CSER  = DSD_CSER  + DSM_CSER

d(log(F_e_MAT_ASER))  = ADJUST1_F_MAT_ASER  * d(log(F_e_MAT_ASER(-1)))  + ADJUST2_F_MAT_ASER  * d(log(F_MAT_ASER(-1)))  + ADJUST3_F_MAT_ASER  * d(log(F_n_MAT_ASER))

PMGRD_CSER  = PYQSBVAT_CSER

d(log(F_n_L_ANRE))  = d(log(Y_ANRE))  - d(log(PROG_L_ANRE))  + d(SUBST_F_L_ANRE)

GDP_CTRP  = CH_CTRP  + G_CTRP  + I_CTRP  + X_CTRP  + DS_CTRP  - M_CTRP

I  = ID  + IM

PCIM_CNJM_ANFO  = PMSBVAT_CNJM

IM  = 0  + IM_CIND  + IM_CSER

ES_act_E_MAT_ASER  = ES_E_MAT_ASER  - ( C_E_ASER  / PROG_E_ASER  / ( C_MAT_ASER  / PROG_MAT_ASER )  / @elem(C_E_ASER  / PROG_E_ASER  / ( C_MAT_ASER  / PROG_MAT_ASER ) , 2000) < 0.99999 )  * ( log(F_E_ASER  * PROG_E_ASER  / ( F_MAT_ASER  * PROG_MAT_ASER )  / @elem(F_E_ASER  * PROG_E_ASER  / ( F_MAT_ASER  * PROG_MAT_ASER ) , 2000))  / log(C_E_ASER  / PROG_E_ASER  / ( C_MAT_ASER  / PROG_MAT_ASER )  / @elem(C_E_ASER  / PROG_E_ASER  / ( C_MAT_ASER  / PROG_MAT_ASER ) , 2000)  * 1.0000000001)  + ES_E_MAT_ASER )  - ( C_E_ASER  / PROG_E_ASER  / ( C_MAT_ASER  / PROG_MAT_ASER )  / @elem(C_E_ASER  / PROG_E_ASER  / ( C_MAT_ASER  / PROG_MAT_ASER ) , 2000) > 1.00001 )  * ( log(F_E_ASER  * PROG_E_ASER  / ( F_MAT_ASER  * PROG_MAT_ASER )  / @elem(F_E_ASER  * PROG_E_ASER  / ( F_MAT_ASER  * PROG_MAT_ASER ) , 2000))  / log(C_E_ASER  / PROG_E_ASER  / ( C_MAT_ASER  / PROG_MAT_ASER )  / @elem(C_E_ASER  / PROG_E_ASER  / ( C_MAT_ASER  / PROG_MAT_ASER ) , 2000)  * 1.0000000001)  + ES_E_MAT_ASER )

ID  = 0  + ID_CIND  + ID_CSER

PROG_K_ANFO  = PROG_K_ANFO(-1)  * ( 1  + GR_PROG_K_ANFO )

PCI_CTRP  * CI_CTRP  = PCID_CTRP  * CID_CTRP  + PCIM_CTRP  * CIM_CTRP

PCIM_CNJN_ANRE  = PMSBVAT_CNJN

SUBST_IM_CSER_ATPO  = ADJUST6_IM_CSER_ATPO  * SUBST_n_IM_CSER_ATPO  + ( 1  - ADJUST6_IM_CSER_ATPO )  * SUBST_IM_CSER_ATPO(-1)

d(SUBST_n_F_K_AIND)  = 0  +  - ES_K_K_AIND  * phi_K_AIND(-1)  * d(log(C_K_AIND  / PROG_K_AIND)  - log(C_K_AIND  / PROG_K_AIND))  +  - ES_K_L_AIND  * phi_L_AIND(-1)  * d(log(C_K_AIND  / PROG_K_AIND)  - log(C_L_AIND  / PROG_L_AIND))  +  - ES_K_E_AIND  * phi_E_AIND(-1)  * d(log(C_K_AIND  / PROG_K_AIND)  - log(C_E_AIND  / PROG_E_AIND))  +  - ES_K_MAT_AIND  * phi_MAT_AIND(-1)  * d(log(C_K_AIND  / PROG_K_AIND)  - log(C_MAT_AIND  / PROG_MAT_AIND))

SUBPD_CSER  = @elem(RSUBPD_CSER , 2000)  * YQ_CSER

SUBST_IM_CSER_ATPT  = ADJUST6_IM_CSER_ATPT  * SUBST_n_IM_CSER_ATPT  + ( 1  - ADJUST6_IM_CSER_ATPT )  * SUBST_IM_CSER_ATPT(-1)

d(log(Y_e_ASER))  = ADJUST_Ye_Y_ASER  * d(log(Y_ASER))  + ( 1  - ADJUST_Ye_Y_ASER )  * d(log(Y_e_ASER(-1)))

VA_VAL_AIND  = PY_AIND  * Y_AIND  - PCI_AIND  * CI_AIND

VATD_CNJN  = @elem(RVATD_CNJN , 2000)  * CHD_CNJN  / ( 1  + @elem(RVATD_CNJN , 2000) )

VATD_CNJM  = @elem(RVATD_CNJM , 2000)  * CHD_CNJM  / ( 1  + @elem(RVATD_CNJM , 2000) )

PSUBPD_CNJM  * SUBPD_CNJM  = RSUBPD_CNJM  * YQ_CNJM

Mbis_CTRP  + NTAXPM_CTRP  + MGPM_CTRP  = QM_CTRP

PID_CSER_ANRE  = PYQSBVAT_CSER

PSUBPD_CSER  * SUBPD_CSER  = RSUBPD_CSER  * YQ_CSER

SUBST_F_E_ANFO  = ADJUST6_F_E_ANFO  * SUBST_n_F_E_ANFO  + ( 1  - ADJUST6_F_E_ANFO )  * SUBST_F_E_ANFO(-1)

SUBST_IM_CSER_ASER  = ADJUST6_IM_CSER_ASER  * SUBST_n_IM_CSER_ASER  + ( 1  - ADJUST6_IM_CSER_ASER )  * SUBST_IM_CSER_ASER(-1)

d(log(TRSP_ANRE))  = d(log(F_MAT_ANRE))

ES_act_E_E_ANFO  = ES_E_E_ANFO  - ( C_E_ANFO  / PROG_E_ANFO  / ( C_E_ANFO  / PROG_E_ANFO )  / @elem(C_E_ANFO  / PROG_E_ANFO  / ( C_E_ANFO  / PROG_E_ANFO ) , 2000) < 0.99999 )  * ( log(F_E_ANFO  * PROG_E_ANFO  / ( F_E_ANFO  * PROG_E_ANFO )  / @elem(F_E_ANFO  * PROG_E_ANFO  / ( F_E_ANFO  * PROG_E_ANFO ) , 2000))  / log(C_E_ANFO  / PROG_E_ANFO  / ( C_E_ANFO  / PROG_E_ANFO )  / @elem(C_E_ANFO  / PROG_E_ANFO  / ( C_E_ANFO  / PROG_E_ANFO ) , 2000)  * 1.0000000001)  + ES_E_E_ANFO )  - ( C_E_ANFO  / PROG_E_ANFO  / ( C_E_ANFO  / PROG_E_ANFO )  / @elem(C_E_ANFO  / PROG_E_ANFO  / ( C_E_ANFO  / PROG_E_ANFO ) , 2000) > 1.00001 )  * ( log(F_E_ANFO  * PROG_E_ANFO  / ( F_E_ANFO  * PROG_E_ANFO )  / @elem(F_E_ANFO  * PROG_E_ANFO  / ( F_E_ANFO  * PROG_E_ANFO ) , 2000))  / log(C_E_ANFO  / PROG_E_ANFO  / ( C_E_ANFO  / PROG_E_ANFO )  / @elem(C_E_ANFO  / PROG_E_ANFO  / ( C_E_ANFO  / PROG_E_ANFO ) , 2000)  * 1.0000000001)  + ES_E_E_ANFO )

d(SUBST_n_GM_CSER)  =  - ES_GM_CSER  * d(log(PGD_CSER)  - log(PGM_CSER))

PMGPM_CTRP_CNJM  = PMGPD_CTRP_CNJM

PMGPM_CTRP_CNJN  = PMGPD_CTRP_CNJN

IM_CIND_ATPT  = phi_IM_CIND_ATPT  * I_CIND_ATPT

PCIM_CNJN_ASER  = PMSBVAT_CNJN

SUBST_CIM_CNJN_ANFO  = ADJUST6_CIM_CNJN_ANFO  * SUBST_n_CIM_CNJN_ANFO  + ( 1  - ADJUST6_CIM_CNJN_ANFO )  * SUBST_CIM_CNJN_ANFO(-1)

ES_act_L_MAT_AIND  = ES_L_MAT_AIND  - ( C_L_AIND  / PROG_L_AIND  / ( C_MAT_AIND  / PROG_MAT_AIND )  / @elem(C_L_AIND  / PROG_L_AIND  / ( C_MAT_AIND  / PROG_MAT_AIND ) , 2000) < 0.99999 )  * ( log(F_L_AIND  * PROG_L_AIND  / ( F_MAT_AIND  * PROG_MAT_AIND )  / @elem(F_L_AIND  * PROG_L_AIND  / ( F_MAT_AIND  * PROG_MAT_AIND ) , 2000))  / log(C_L_AIND  / PROG_L_AIND  / ( C_MAT_AIND  / PROG_MAT_AIND )  / @elem(C_L_AIND  / PROG_L_AIND  / ( C_MAT_AIND  / PROG_MAT_AIND ) , 2000)  * 1.0000000001)  + ES_L_MAT_AIND )  - ( C_L_AIND  / PROG_L_AIND  / ( C_MAT_AIND  / PROG_MAT_AIND )  / @elem(C_L_AIND  / PROG_L_AIND  / ( C_MAT_AIND  / PROG_MAT_AIND ) , 2000) > 1.00001 )  * ( log(F_L_AIND  * PROG_L_AIND  / ( F_MAT_AIND  * PROG_MAT_AIND )  / @elem(F_L_AIND  * PROG_L_AIND  / ( F_MAT_AIND  * PROG_MAT_AIND ) , 2000))  / log(C_L_AIND  / PROG_L_AIND  / ( C_MAT_AIND  / PROG_MAT_AIND )  / @elem(C_L_AIND  / PROG_L_AIND  / ( C_MAT_AIND  / PROG_MAT_AIND ) , 2000)  * 1.0000000001)  + ES_L_MAT_AIND )

ES_act_L_K_AIND  = ES_L_K_AIND  - ( C_L_AIND  / PROG_L_AIND  / ( C_K_AIND  / PROG_K_AIND )  / @elem(C_L_AIND  / PROG_L_AIND  / ( C_K_AIND  / PROG_K_AIND ) , 2000) < 0.99999 )  * ( log(F_L_AIND  * PROG_L_AIND  / ( F_K_AIND  * PROG_K_AIND )  / @elem(F_L_AIND  * PROG_L_AIND  / ( F_K_AIND  * PROG_K_AIND ) , 2000))  / log(C_L_AIND  / PROG_L_AIND  / ( C_K_AIND  / PROG_K_AIND )  / @elem(C_L_AIND  / PROG_L_AIND  / ( C_K_AIND  / PROG_K_AIND ) , 2000)  * 1.0000000001)  + ES_L_K_AIND )  - ( C_L_AIND  / PROG_L_AIND  / ( C_K_AIND  / PROG_K_AIND )  / @elem(C_L_AIND  / PROG_L_AIND  / ( C_K_AIND  / PROG_K_AIND ) , 2000) > 1.00001 )  * ( log(F_L_AIND  * PROG_L_AIND  / ( F_K_AIND  * PROG_K_AIND )  / @elem(F_L_AIND  * PROG_L_AIND  / ( F_K_AIND  * PROG_K_AIND ) , 2000))  / log(C_L_AIND  / PROG_L_AIND  / ( C_K_AIND  / PROG_K_AIND )  / @elem(C_L_AIND  / PROG_L_AIND  / ( C_K_AIND  / PROG_K_AIND ) , 2000)  * 1.0000000001)  + ES_L_K_AIND )

ES_act_E_K_ASER  = ES_E_K_ASER  - ( C_E_ASER  / PROG_E_ASER  / ( C_K_ASER  / PROG_K_ASER )  / @elem(C_E_ASER  / PROG_E_ASER  / ( C_K_ASER  / PROG_K_ASER ) , 2000) < 0.99999 )  * ( log(F_E_ASER  * PROG_E_ASER  / ( F_K_ASER  * PROG_K_ASER )  / @elem(F_E_ASER  * PROG_E_ASER  / ( F_K_ASER  * PROG_K_ASER ) , 2000))  / log(C_E_ASER  / PROG_E_ASER  / ( C_K_ASER  / PROG_K_ASER )  / @elem(C_E_ASER  / PROG_E_ASER  / ( C_K_ASER  / PROG_K_ASER ) , 2000)  * 1.0000000001)  + ES_E_K_ASER )  - ( C_E_ASER  / PROG_E_ASER  / ( C_K_ASER  / PROG_K_ASER )  / @elem(C_E_ASER  / PROG_E_ASER  / ( C_K_ASER  / PROG_K_ASER ) , 2000) > 1.00001 )  * ( log(F_E_ASER  * PROG_E_ASER  / ( F_K_ASER  * PROG_K_ASER )  / @elem(F_E_ASER  * PROG_E_ASER  / ( F_K_ASER  * PROG_K_ASER ) , 2000))  / log(C_E_ASER  / PROG_E_ASER  / ( C_K_ASER  / PROG_K_ASER )  / @elem(C_E_ASER  / PROG_E_ASER  / ( C_K_ASER  / PROG_K_ASER ) , 2000)  * 1.0000000001)  + ES_E_K_ASER )

PCID_CSER_ASER  = PYQSBVAT_CSER

d(log(CI_CTRP_ASER))  = d(log(TRSP_ASER))  + d(SUBST_CI_CTRP_ASER)

PMSBVAT_CNJN  * MSBVAT_CNJN  = PM_CNJN  * M_CNJN  + POTHPTM_CNJN  * OTHPTM_CNJN  + PSUBPM_CNJN  * SUBPM_CNJN  + PMGPM_CNJN  * MGPM_CNJN

PMSBVAT_CNJM  * MSBVAT_CNJM  = PM_CNJM  * M_CNJM  + POTHPTM_CNJM  * OTHPTM_CNJM  + PSUBPM_CNJM  * SUBPM_CNJM  + PMGPM_CNJM  * MGPM_CNJM

CI_ANFO  = CID_ANFO  + CIM_ANFO

PIM_CSER  * IM_CSER  = 0  + PIM_CSER_AIND  * IM_CSER_AIND  + PIM_CSER_ATPT  * IM_CSER_ATPT  + PIM_CSER_ATPO  * IM_CSER_ATPO  + PIM_CSER_ASER  * IM_CSER_ASER  + PIM_CSER_ANRE  * IM_CSER_ANRE  + PIM_CSER_ANFO  * IM_CSER_ANFO

NTAXI_AIND  = @elem(RNTAXI_AIND , 2000)  * Y_AIND

ES_act_K_L_ANRE  = ES_K_L_ANRE  - ( C_K_ANRE  / PROG_K_ANRE  / ( C_L_ANRE  / PROG_L_ANRE )  / @elem(C_K_ANRE  / PROG_K_ANRE  / ( C_L_ANRE  / PROG_L_ANRE ) , 2000) < 0.99999 )  * ( log(F_K_ANRE  * PROG_K_ANRE  / ( F_L_ANRE  * PROG_L_ANRE )  / @elem(F_K_ANRE  * PROG_K_ANRE  / ( F_L_ANRE  * PROG_L_ANRE ) , 2000))  / log(C_K_ANRE  / PROG_K_ANRE  / ( C_L_ANRE  / PROG_L_ANRE )  / @elem(C_K_ANRE  / PROG_K_ANRE  / ( C_L_ANRE  / PROG_L_ANRE ) , 2000)  * 1.0000000001)  + ES_K_L_ANRE )  - ( C_K_ANRE  / PROG_K_ANRE  / ( C_L_ANRE  / PROG_L_ANRE )  / @elem(C_K_ANRE  / PROG_K_ANRE  / ( C_L_ANRE  / PROG_L_ANRE ) , 2000) > 1.00001 )  * ( log(F_K_ANRE  * PROG_K_ANRE  / ( F_L_ANRE  * PROG_L_ANRE )  / @elem(F_K_ANRE  * PROG_K_ANRE  / ( F_L_ANRE  * PROG_L_ANRE ) , 2000))  / log(C_K_ANRE  / PROG_K_ANRE  / ( C_L_ANRE  / PROG_L_ANRE )  / @elem(C_K_ANRE  / PROG_K_ANRE  / ( C_L_ANRE  / PROG_L_ANRE ) , 2000)  * 1.0000000001)  + ES_K_L_ANRE )

PCI_CTRP_ANRE  * CI_CTRP_ANRE  = PCID_CTRP_ANRE  * CID_CTRP_ANRE  + PCIM_CTRP_ANRE  * CIM_CTRP_ANRE

PGD_CNJN  = PYQSBVAT_CNJN

OTHPT  = OTHPTD  + OTHPTM

SUBST_CIM_CSER_ASER  = ADJUST6_CIM_CSER_ASER  * SUBST_n_CIM_CSER_ASER  + ( 1  - ADJUST6_CIM_CSER_ASER )  * SUBST_CIM_CSER_ASER(-1)

C_MAT_ANRE  = PMAT_ANRE

PID_CIND_ASER  = PYQSBVAT_CIND

SUBST_CIM_CNJN_ATPT  = ADJUST6_CIM_CNJN_ATPT  * SUBST_n_CIM_CNJN_ATPT  + ( 1  - ADJUST6_CIM_CNJN_ATPT )  * SUBST_CIM_CNJN_ATPT(-1)

RNTAXPD_CTRP  = NTAXPD_VAL_CTRP  / ( PYQ_CTRP  * YQ_CTRP )

GM_CNJN  = phi_GM_CNJN  * G_CNJN

SUBST_n_MGPM_CSER_CNJN  = 0  +  - ES_MGPM_CSER_CTRP_CNJN  * phi_MGPM_CTRP_CNJN(-1)  * d(log(PMGPM_CSER_CNJN)  - log(PMGPM_CTRP_CNJN))  +  - ES_MGPM_CSER_CSER_CNJN  * phi_MGPM_CSER_CNJN(-1)  * d(log(PMGPM_CSER_CNJN)  - log(PMGPM_CSER_CNJN))

SUBST_n_MGPM_CSER_CNJM  = 0  +  - ES_MGPM_CSER_CTRP_CNJM  * phi_MGPM_CTRP_CNJM(-1)  * d(log(PMGPM_CSER_CNJM)  - log(PMGPM_CTRP_CNJM))  +  - ES_MGPM_CSER_CSER_CNJM  * phi_MGPM_CSER_CNJM(-1)  * d(log(PMGPM_CSER_CNJM)  - log(PMGPM_CSER_CNJM))

SUBST_CIM_CNJM_ASER  = ADJUST6_CIM_CNJM_ASER  * SUBST_n_CIM_CNJM_ASER  + ( 1  - ADJUST6_CIM_CNJM_ASER )  * SUBST_CIM_CNJM_ASER(-1)

Verif_phi_MCH  = ( 1  - ( 0  + phi_MCH_CIND  + phi_MCH_CTRP  + phi_MCH_CSER  + phi_MCH_CNJN  + phi_MCH_CNJM ) )  * 100

CIM_CSER_ANFO  = phi_CIM_CSER_ANFO  * CI_CSER_ANFO

SUBPD_CIND  = @elem(RSUBPD_CIND , 2000)  * YQ_CIND

PM_CSER  = TC  * PWD_CSER

PI_ANRE  * I_ANRE  = PID_ANRE  * ID_ANRE  + PIM_ANRE  * IM_ANRE

CID_CSER_AIND  = ( 1  - phi_CIM_CSER_AIND )  * CI_CSER_AIND

ES_act_MAT_K_ASER  = ES_MAT_K_ASER  - ( C_MAT_ASER  / PROG_MAT_ASER  / ( C_K_ASER  / PROG_K_ASER )  / @elem(C_MAT_ASER  / PROG_MAT_ASER  / ( C_K_ASER  / PROG_K_ASER ) , 2000) < 0.99999 )  * ( log(F_MAT_ASER  * PROG_MAT_ASER  / ( F_K_ASER  * PROG_K_ASER )  / @elem(F_MAT_ASER  * PROG_MAT_ASER  / ( F_K_ASER  * PROG_K_ASER ) , 2000))  / log(C_MAT_ASER  / PROG_MAT_ASER  / ( C_K_ASER  / PROG_K_ASER )  / @elem(C_MAT_ASER  / PROG_MAT_ASER  / ( C_K_ASER  / PROG_K_ASER ) , 2000)  * 1.0000000001)  + ES_MAT_K_ASER )  - ( C_MAT_ASER  / PROG_MAT_ASER  / ( C_K_ASER  / PROG_K_ASER )  / @elem(C_MAT_ASER  / PROG_MAT_ASER  / ( C_K_ASER  / PROG_K_ASER ) , 2000) > 1.00001 )  * ( log(F_MAT_ASER  * PROG_MAT_ASER  / ( F_K_ASER  * PROG_K_ASER )  / @elem(F_MAT_ASER  * PROG_MAT_ASER  / ( F_K_ASER  * PROG_K_ASER ) , 2000))  / log(C_MAT_ASER  / PROG_MAT_ASER  / ( C_K_ASER  / PROG_K_ASER )  / @elem(C_MAT_ASER  / PROG_MAT_ASER  / ( C_K_ASER  / PROG_K_ASER ) , 2000)  * 1.0000000001)  + ES_MAT_K_ASER )

phi_CIM_CNJM_ATPO  = 1  / ( 1  + @elem(CID_CNJM_ATPO  / CIM_CNJM_ATPO , 2000)  * exp(SUBST_CIM_CNJM_ATPO) )

SUBST_n_MGPD_CSER_CNJN  = 0  +  - ES_MGPD_CSER_CTRP_CNJN  * phi_MGPD_CTRP_CNJN(-1)  * d(log(PMGPD_CSER_CNJN)  - log(PMGPD_CTRP_CNJN))  +  - ES_MGPD_CSER_CSER_CNJN  * phi_MGPD_CSER_CNJN(-1)  * d(log(PMGPD_CSER_CNJN)  - log(PMGPD_CSER_CNJN))

SUBST_n_MGPD_CSER_CNJM  = 0  +  - ES_MGPD_CSER_CTRP_CNJM  * phi_MGPD_CTRP_CNJM(-1)  * d(log(PMGPD_CSER_CNJM)  - log(PMGPD_CTRP_CNJM))  +  - ES_MGPD_CSER_CSER_CNJM  * phi_MGPD_CSER_CNJM(-1)  * d(log(PMGPD_CSER_CNJM)  - log(PMGPD_CSER_CNJM))

CU_AIND  * Y_AIND  = 0  + C_K_AIND  * F_K_AIND  + C_L_AIND  * F_L_AIND  + C_E_AIND  * F_E_AIND  + C_MAT_AIND  * F_MAT_AIND  + NTAXI_VAL_AIND

d(log(MSBVAT_CNJN))  = d(log(M_CNJN))

phi_CHM_CNJM  = 1  / ( 1  + @elem(CHD_CNJM  / CHM_CNJM , 2000)  * exp(SUBST_CHM_CNJM) )

phi_CHM_CNJN  = 1  / ( 1  + @elem(CHD_CNJN  / CHM_CNJN , 2000)  * exp(SUBST_CHM_CNJN) )

Q_CTRP  = QD_CTRP  + QM_CTRP

PYQSBVAT_CSER  * YQSBVAT_CSER  = PYQ_CSER  * YQ_CSER  + POTHPTD_CSER  * OTHPTD_CSER  + PSUBPD_CSER  * SUBPD_CSER  + PMGPD_CSER  * MGPD_CSER

CID_CNJN_ANRE  = ( 1  - phi_CIM_CNJN_ANRE )  * CI_CNJN_ANRE

ES_act_MAT_E_ASER  = ES_MAT_E_ASER  - ( C_MAT_ASER  / PROG_MAT_ASER  / ( C_E_ASER  / PROG_E_ASER )  / @elem(C_MAT_ASER  / PROG_MAT_ASER  / ( C_E_ASER  / PROG_E_ASER ) , 2000) < 0.99999 )  * ( log(F_MAT_ASER  * PROG_MAT_ASER  / ( F_E_ASER  * PROG_E_ASER )  / @elem(F_MAT_ASER  * PROG_MAT_ASER  / ( F_E_ASER  * PROG_E_ASER ) , 2000))  / log(C_MAT_ASER  / PROG_MAT_ASER  / ( C_E_ASER  / PROG_E_ASER )  / @elem(C_MAT_ASER  / PROG_MAT_ASER  / ( C_E_ASER  / PROG_E_ASER ) , 2000)  * 1.0000000001)  + ES_MAT_E_ASER )  - ( C_MAT_ASER  / PROG_MAT_ASER  / ( C_E_ASER  / PROG_E_ASER )  / @elem(C_MAT_ASER  / PROG_MAT_ASER  / ( C_E_ASER  / PROG_E_ASER ) , 2000) > 1.00001 )  * ( log(F_MAT_ASER  * PROG_MAT_ASER  / ( F_E_ASER  * PROG_E_ASER )  / @elem(F_MAT_ASER  * PROG_MAT_ASER  / ( F_E_ASER  * PROG_E_ASER ) , 2000))  / log(C_MAT_ASER  / PROG_MAT_ASER  / ( C_E_ASER  / PROG_E_ASER )  / @elem(C_MAT_ASER  / PROG_MAT_ASER  / ( C_E_ASER  / PROG_E_ASER ) , 2000)  * 1.0000000001)  + ES_MAT_E_ASER )

PIM_CSER_AIND  = PMSBVAT_CSER

PYQ_CTRP  * YQ_CTRP  = 0  + PY_ATPT  * Y_CTRP_ATPT  + PY_ATPO  * Y_CTRP_ATPO  + PY_ASER  * Y_CTRP_ASER

phi_E_CNJN_ASER  = PCI_CNJN_ASER  * CI_CNJN_ASER  / ( 0  + PCI_CNJN_ASER  * CI_CNJN_ASER  + PCI_CNJM_ASER  * CI_CNJM_ASER )

d(SUBST_n_CI_CNJN_ANRE)  = 0  +  - ES_NRJ_CNJN_CNJN_ANRE  * phi_E_CNJN_ANRE  * d(log(PCI_CNJN_ANRE)  - log(PCI_CNJN_ANRE))  +  - ES_NRJ_CNJN_CNJM_ANRE  * phi_E_CNJM_ANRE  * d(log(PCI_CNJN_ANRE)  - log(PCI_CNJM_ANRE))

phi_TRSP_CTRP_ASER  = PCI_CTRP_ASER  * CI_CTRP_ASER  / ( 0  + PCI_CTRP_ASER  * CI_CTRP_ASER )

PNTAXP  * NTAXP  = 0  + NTAXP_VAL_CIND  + NTAXP_VAL_CTRP  + NTAXP_VAL_CSER  + NTAXP_VAL_CNJN  + NTAXP_VAL_CNJM

MGPM_CNJM  = 0  + MGPM_CTRP_CNJM  + MGPM_CSER_CNJM

MGPM_CNJN  = 0  + MGPM_CTRP_CNJN  + MGPM_CSER_CNJN

PCHD_CSER  = PYQSBVAT_CSER  * ( 1  + RVATD_CSER )  / ( 1  + @elem(RVATD_CSER , 2000) )

PM_CTRP  = TC  * PWD_CTRP

PMSBVAT_CIND  * MSBVAT_CIND  = PM_CIND  * M_CIND  + POTHPTM_CIND  * OTHPTM_CIND  + PSUBPM_CIND  * SUBPM_CIND  + PMGPM_CIND  * MGPM_CIND

SUBPM_CNJM  = @elem(RSUBPM_CNJM , 2000)  * M_CNJM

SUBPM_CNJN  = @elem(RSUBPM_CNJN , 2000)  * M_CNJN

ES_act_K_MAT_ASER  = ES_K_MAT_ASER  - ( C_K_ASER  / PROG_K_ASER  / ( C_MAT_ASER  / PROG_MAT_ASER )  / @elem(C_K_ASER  / PROG_K_ASER  / ( C_MAT_ASER  / PROG_MAT_ASER ) , 2000) < 0.99999 )  * ( log(F_K_ASER  * PROG_K_ASER  / ( F_MAT_ASER  * PROG_MAT_ASER )  / @elem(F_K_ASER  * PROG_K_ASER  / ( F_MAT_ASER  * PROG_MAT_ASER ) , 2000))  / log(C_K_ASER  / PROG_K_ASER  / ( C_MAT_ASER  / PROG_MAT_ASER )  / @elem(C_K_ASER  / PROG_K_ASER  / ( C_MAT_ASER  / PROG_MAT_ASER ) , 2000)  * 1.0000000001)  + ES_K_MAT_ASER )  - ( C_K_ASER  / PROG_K_ASER  / ( C_MAT_ASER  / PROG_MAT_ASER )  / @elem(C_K_ASER  / PROG_K_ASER  / ( C_MAT_ASER  / PROG_MAT_ASER ) , 2000) > 1.00001 )  * ( log(F_K_ASER  * PROG_K_ASER  / ( F_MAT_ASER  * PROG_MAT_ASER )  / @elem(F_K_ASER  * PROG_K_ASER  / ( F_MAT_ASER  * PROG_MAT_ASER ) , 2000))  / log(C_K_ASER  / PROG_K_ASER  / ( C_MAT_ASER  / PROG_MAT_ASER )  / @elem(C_K_ASER  / PROG_K_ASER  / ( C_MAT_ASER  / PROG_MAT_ASER ) , 2000)  * 1.0000000001)  + ES_K_MAT_ASER )

PCID_CSER_AIND  = PYQSBVAT_CSER

YQ_CIND  * PYQ_CIND  + NTAXPD_VAL_CIND  + PMGPD_CIND  * MGPD_CIND  = PQD_CIND  * QD_CIND

( CH_n_CIND  - NCH_CIND )  * PCH_CIND  = phi_MCH_CIND  * ( CH_n_VAL  - PNCH  * NCH )

d(SUBST_n_F_MAT_ANRE)  = 0  +  - ES_MAT_K_ANRE  * phi_K_ANRE(-1)  * d(log(C_MAT_ANRE  / PROG_MAT_ANRE)  - log(C_K_ANRE  / PROG_K_ANRE))  +  - ES_MAT_L_ANRE  * phi_L_ANRE(-1)  * d(log(C_MAT_ANRE  / PROG_MAT_ANRE)  - log(C_L_ANRE  / PROG_L_ANRE))  +  - ES_MAT_E_ANRE  * phi_E_ANRE(-1)  * d(log(C_MAT_ANRE  / PROG_MAT_ANRE)  - log(C_E_ANRE  / PROG_E_ANRE))  +  - ES_MAT_MAT_ANRE  * phi_MAT_ANRE(-1)  * d(log(C_MAT_ANRE  / PROG_MAT_ANRE)  - log(C_MAT_ANRE  / PROG_MAT_ANRE))

Phi_CH_CSER  = CH_CSER  / CH

PCIM_CSER_ASER  = PMSBVAT_CSER

INC_G_VAL  = PNTAXP  * NTAXP  + NTAXI_VAL  + INC_SOC_TAX_VAL  + PRSSC  * RSSC  + PROP_INC_G_VAL

PXM  * XM  = 0  + PXM_CIND  * XM_CIND  + PXM_CTRP  * XM_CTRP  + PXM_CSER  * XM_CSER  + PXM_CNJN  * XM_CNJN  + PXM_CNJM  * XM_CNJM

PXD  * XD  = 0  + PXD_CIND  * XD_CIND  + PXD_CTRP  * XD_CTRP  + PXD_CSER  * XD_CSER  + PXD_CNJN  * XD_CNJN  + PXD_CNJM  * XD_CNJM

PCIM_CNJM_ATPT  = PMSBVAT_CNJM

PWAGES_ATPO  = P

CH_n_VAL  = DISPINC_AT_VAL  * ( 1  - MPS_n )

phi_CIM_CIND_ANRE  = 1  / ( 1  + @elem(CID_CIND_ANRE  / CIM_CIND_ANRE , 2000)  * exp(SUBST_CIM_CIND_ANRE) )

Verif_PCIbis  = ( PCIbis  / PCI  - 1 )  * 100

PWAGES_ATPT  = P

PCIM_CNJM_ATPO  = PMSBVAT_CNJM

phi_XM_CNJN  = 1  / ( 1  + @elem(XD_CNJN  / XM_CNJN , 2000)  * exp(SUBST_XM_CNJN) )

CID_CNJM_ASER  = ( 1  - phi_CIM_CNJM_ASER )  * CI_CNJM_ASER

phi_XM_CNJM  = 1  / ( 1  + @elem(XD_CNJM  / XM_CNJM , 2000)  * exp(SUBST_XM_CNJM) )

PVATM_CTRP  * VATM_CTRP  = RVATM_CTRP  * PCHM_CTRP  * CHM_CTRP  / ( 1  + RVATM_CTRP )

NTAXPM_VAL_CNJN  = PVATM_CNJN  * VATM_CNJN  + POTHPTM_CNJN  * OTHPTM_CNJN  + PSUBPM_CNJN  * SUBPM_CNJN

POTHPTM_CTRP  * OTHPTM_CTRP  = ROTHPTM_CTRP  * PM_CTRP  * M_CTRP

Verif_YQ  = ( YQ  / Y  - 1 )  * 100

ES_act_MAT_K_AIND  = ES_MAT_K_AIND  - ( C_MAT_AIND  / PROG_MAT_AIND  / ( C_K_AIND  / PROG_K_AIND )  / @elem(C_MAT_AIND  / PROG_MAT_AIND  / ( C_K_AIND  / PROG_K_AIND ) , 2000) < 0.99999 )  * ( log(F_MAT_AIND  * PROG_MAT_AIND  / ( F_K_AIND  * PROG_K_AIND )  / @elem(F_MAT_AIND  * PROG_MAT_AIND  / ( F_K_AIND  * PROG_K_AIND ) , 2000))  / log(C_MAT_AIND  / PROG_MAT_AIND  / ( C_K_AIND  / PROG_K_AIND )  / @elem(C_MAT_AIND  / PROG_MAT_AIND  / ( C_K_AIND  / PROG_K_AIND ) , 2000)  * 1.0000000001)  + ES_MAT_K_AIND )  - ( C_MAT_AIND  / PROG_MAT_AIND  / ( C_K_AIND  / PROG_K_AIND )  / @elem(C_MAT_AIND  / PROG_MAT_AIND  / ( C_K_AIND  / PROG_K_AIND ) , 2000) > 1.00001 )  * ( log(F_MAT_AIND  * PROG_MAT_AIND  / ( F_K_AIND  * PROG_K_AIND )  / @elem(F_MAT_AIND  * PROG_MAT_AIND  / ( F_K_AIND  * PROG_K_AIND ) , 2000))  / log(C_MAT_AIND  / PROG_MAT_AIND  / ( C_K_AIND  / PROG_K_AIND )  / @elem(C_MAT_AIND  / PROG_MAT_AIND  / ( C_K_AIND  / PROG_K_AIND ) , 2000)  * 1.0000000001)  + ES_MAT_K_AIND )

ES_act_L_E_AIND  = ES_L_E_AIND  - ( C_L_AIND  / PROG_L_AIND  / ( C_E_AIND  / PROG_E_AIND )  / @elem(C_L_AIND  / PROG_L_AIND  / ( C_E_AIND  / PROG_E_AIND ) , 2000) < 0.99999 )  * ( log(F_L_AIND  * PROG_L_AIND  / ( F_E_AIND  * PROG_E_AIND )  / @elem(F_L_AIND  * PROG_L_AIND  / ( F_E_AIND  * PROG_E_AIND ) , 2000))  / log(C_L_AIND  / PROG_L_AIND  / ( C_E_AIND  / PROG_E_AIND )  / @elem(C_L_AIND  / PROG_L_AIND  / ( C_E_AIND  / PROG_E_AIND ) , 2000)  * 1.0000000001)  + ES_L_E_AIND )  - ( C_L_AIND  / PROG_L_AIND  / ( C_E_AIND  / PROG_E_AIND )  / @elem(C_L_AIND  / PROG_L_AIND  / ( C_E_AIND  / PROG_E_AIND ) , 2000) > 1.00001 )  * ( log(F_L_AIND  * PROG_L_AIND  / ( F_E_AIND  * PROG_E_AIND )  / @elem(F_L_AIND  * PROG_L_AIND  / ( F_E_AIND  * PROG_E_AIND ) , 2000))  / log(C_L_AIND  / PROG_L_AIND  / ( C_E_AIND  / PROG_E_AIND )  / @elem(C_L_AIND  / PROG_L_AIND  / ( C_E_AIND  / PROG_E_AIND ) , 2000)  * 1.0000000001)  + ES_L_E_AIND )

log(F_L_ANFO)  = ADJUST0_F_L_ANFO  * log(F_n_L_ANFO)  + ( 1  - ADJUST0_F_L_ANFO )  * ( log(F_L_ANFO(-1))  + d(log(F_e_L_ANFO)) )

CU_ANRE  * Y_ANRE  = 0  + C_K_ANRE  * F_K_ANRE  + C_L_ANRE  * F_L_ANRE  + C_E_ANRE  * F_E_ANRE  + C_MAT_ANRE  * F_MAT_ANRE  + NTAXI_VAL_ANRE

Q_CSER  = QD_CSER  + QM_CSER

d(log(F_n_E_ANRE))  = d(log(Y_ANRE))  - d(log(PROG_E_ANRE))  + d(SUBST_F_E_ANRE)

QD_CTRP  = MGRD_CTRP  + CID_CTRP  + CHD_CTRP  + GD_CTRP  + ID_CTRP  + XD_CTRP  + DSD_CTRP

NTAXPM_VAL_CSER  = PVATM_CSER  * VATM_CSER  + POTHPTM_CSER  * OTHPTM_CSER  + PSUBPM_CSER  * SUBPM_CSER

phi_MGRM_CSER  = 1  / ( 1  + @elem(MGRD_CSER  / MGRM_CSER , 2000)  * exp(SUBST_MGRM_CSER) )

Verif_PGDPbis  = ( PGDPbis  / PGDP  - 1 )  * 100

SUBST_CIM_CNJN_ANRE  = ADJUST6_CIM_CNJN_ANRE  * SUBST_n_CIM_CNJN_ANRE  + ( 1  - ADJUST6_CIM_CNJN_ANRE )  * SUBST_CIM_CNJN_ANRE(-1)

ES_act_E_K_ANFO  = ES_E_K_ANFO  - ( C_E_ANFO  / PROG_E_ANFO  / ( C_K_ANFO  / PROG_K_ANFO )  / @elem(C_E_ANFO  / PROG_E_ANFO  / ( C_K_ANFO  / PROG_K_ANFO ) , 2000) < 0.99999 )  * ( log(F_E_ANFO  * PROG_E_ANFO  / ( F_K_ANFO  * PROG_K_ANFO )  / @elem(F_E_ANFO  * PROG_E_ANFO  / ( F_K_ANFO  * PROG_K_ANFO ) , 2000))  / log(C_E_ANFO  / PROG_E_ANFO  / ( C_K_ANFO  / PROG_K_ANFO )  / @elem(C_E_ANFO  / PROG_E_ANFO  / ( C_K_ANFO  / PROG_K_ANFO ) , 2000)  * 1.0000000001)  + ES_E_K_ANFO )  - ( C_E_ANFO  / PROG_E_ANFO  / ( C_K_ANFO  / PROG_K_ANFO )  / @elem(C_E_ANFO  / PROG_E_ANFO  / ( C_K_ANFO  / PROG_K_ANFO ) , 2000) > 1.00001 )  * ( log(F_E_ANFO  * PROG_E_ANFO  / ( F_K_ANFO  * PROG_K_ANFO )  / @elem(F_E_ANFO  * PROG_E_ANFO  / ( F_K_ANFO  * PROG_K_ANFO ) , 2000))  / log(C_E_ANFO  / PROG_E_ANFO  / ( C_K_ANFO  / PROG_K_ANFO )  / @elem(C_E_ANFO  / PROG_E_ANFO  / ( C_K_ANFO  / PROG_K_ANFO ) , 2000)  * 1.0000000001)  + ES_E_K_ANFO )

d(log(CI_CTRP_ATPO))  = d(log(TRSP_ATPO))  + d(SUBST_CI_CTRP_ATPO)

NTAXP  = 0  + NTAXP_CIND  + NTAXP_CTRP  + NTAXP_CSER  + NTAXP_CNJN  + NTAXP_CNJM

d(log(CI_CTRP_ATPT))  = d(log(TRSP_ATPT))  + d(SUBST_CI_CTRP_ATPT)

d(log(I_CIND_ANRE))  = d(log(IA_ANRE))

ES_act_MAT_K_ANFO  = ES_MAT_K_ANFO  - ( C_MAT_ANFO  / PROG_MAT_ANFO  / ( C_K_ANFO  / PROG_K_ANFO )  / @elem(C_MAT_ANFO  / PROG_MAT_ANFO  / ( C_K_ANFO  / PROG_K_ANFO ) , 2000) < 0.99999 )  * ( log(F_MAT_ANFO  * PROG_MAT_ANFO  / ( F_K_ANFO  * PROG_K_ANFO )  / @elem(F_MAT_ANFO  * PROG_MAT_ANFO  / ( F_K_ANFO  * PROG_K_ANFO ) , 2000))  / log(C_MAT_ANFO  / PROG_MAT_ANFO  / ( C_K_ANFO  / PROG_K_ANFO )  / @elem(C_MAT_ANFO  / PROG_MAT_ANFO  / ( C_K_ANFO  / PROG_K_ANFO ) , 2000)  * 1.0000000001)  + ES_MAT_K_ANFO )  - ( C_MAT_ANFO  / PROG_MAT_ANFO  / ( C_K_ANFO  / PROG_K_ANFO )  / @elem(C_MAT_ANFO  / PROG_MAT_ANFO  / ( C_K_ANFO  / PROG_K_ANFO ) , 2000) > 1.00001 )  * ( log(F_MAT_ANFO  * PROG_MAT_ANFO  / ( F_K_ANFO  * PROG_K_ANFO )  / @elem(F_MAT_ANFO  * PROG_MAT_ANFO  / ( F_K_ANFO  * PROG_K_ANFO ) , 2000))  / log(C_MAT_ANFO  / PROG_MAT_ANFO  / ( C_K_ANFO  / PROG_K_ANFO )  / @elem(C_MAT_ANFO  / PROG_MAT_ANFO  / ( C_K_ANFO  / PROG_K_ANFO ) , 2000)  * 1.0000000001)  + ES_MAT_K_ANFO )

MGP_CSER_CIND  = MGPD_CSER_CIND  + MGPM_CSER_CIND

phi_CIM_CNJN_ANRE  = 1  / ( 1  + @elem(CID_CNJN_ANRE  / CIM_CNJN_ANRE , 2000)  * exp(SUBST_CIM_CNJN_ANRE) )

PMGR_CSER  * MGR_CSER  = 0  + PMGP_CSER_CIND  * MGP_CSER_CIND  + PMGP_CSER_CNJN  * MGP_CSER_CNJN  + PMGP_CSER_CNJM  * MGP_CSER_CNJM

phi_IM_CIND_ANRE  = 1  / ( 1  + @elem(ID_CIND_ANRE  / IM_CIND_ANRE , 2000)  * exp(SUBST_IM_CIND_ANRE) )

SUBST_IM_CIND_ANRE  = ADJUST6_IM_CIND_ANRE  * SUBST_n_IM_CIND_ANRE  + ( 1  - ADJUST6_IM_CIND_ANRE )  * SUBST_IM_CIND_ANRE(-1)

d(SUBST_n_IM_CSER_ATPO)  =  - ES_IM_CSER_ATPO  * d(log(PID_CSER_ATPO)  - log(PIM_CSER_ATPO))

verif_PMGRbis_CSER  = ( PMGRbis_CSER  / PMGR_CSER  - 1 )  * 100

d(log(F_e_MAT_AIND))  = ADJUST1_F_MAT_AIND  * d(log(F_e_MAT_AIND(-1)))  + ADJUST2_F_MAT_AIND  * d(log(F_MAT_AIND(-1)))  + ADJUST3_F_MAT_AIND  * d(log(F_n_MAT_AIND))

PCID_ATPT  * CID_ATPT  = 0  + PCID_CIND_ATPT  * CID_CIND_ATPT  + PCID_CTRP_ATPT  * CID_CTRP_ATPT  + PCID_CSER_ATPT  * CID_CSER_ATPT  + PCID_CNJN_ATPT  * CID_CNJN_ATPT  + PCID_CNJM_ATPT  * CID_CNJM_ATPT

PRSSC_ATPO  = P

PCIM_CNJN_ATPT  = PMSBVAT_CNJN

POTHPT  * OTHPT  = POTHPTD  * OTHPTD  + POTHPTM  * OTHPTM

verif_phi_MGPM_CNJM  = ( 1  - ( 0  + phi_MGPM_CIND_CNJM  + phi_MGPM_CTRP_CNJM  + phi_MGPM_CSER_CNJM  + phi_MGPM_CNJN_CNJM  + phi_MGPM_CNJM_CNJM ) )  * 100

d(SUBST_n_X_CSER)  =  - ES_X_CSER  * d(log(PX_CSER)  - log(TC  * PWD_CSER))

verif_phi_MGPM_CNJN  = ( 1  - ( 0  + phi_MGPM_CIND_CNJN  + phi_MGPM_CTRP_CNJN  + phi_MGPM_CSER_CNJN  + phi_MGPM_CNJN_CNJN  + phi_MGPM_CNJM_CNJN ) )  * 100

PDSM_CTRP  = PMSBVAT_CTRP

log(F_E_ATPT)  = ADJUST0_F_E_ATPT  * log(F_n_E_ATPT)  + ( 1  - ADJUST0_F_E_ATPT )  * ( log(F_E_ATPT(-1))  + d(log(F_e_E_ATPT)) )

PCID_CNJM_ANFO  = PYQSBVAT_CNJM

PCID_ATPO  * CID_ATPO  = 0  + PCID_CIND_ATPO  * CID_CIND_ATPO  + PCID_CTRP_ATPO  * CID_CTRP_ATPO  + PCID_CSER_ATPO  * CID_CSER_ATPO  + PCID_CNJN_ATPO  * CID_CNJN_ATPO  + PCID_CNJM_ATPO  * CID_CNJM_ATPO

PCIM_CNJN_ATPO  = PMSBVAT_CNJN

PRSSC_ATPT  = P

ES_act_MAT_L_ATPT  = ES_MAT_L_ATPT  - ( C_MAT_ATPT  / PROG_MAT_ATPT  / ( C_L_ATPT  / PROG_L_ATPT )  / @elem(C_MAT_ATPT  / PROG_MAT_ATPT  / ( C_L_ATPT  / PROG_L_ATPT ) , 2000) < 0.99999 )  * ( log(F_MAT_ATPT  * PROG_MAT_ATPT  / ( F_L_ATPT  * PROG_L_ATPT )  / @elem(F_MAT_ATPT  * PROG_MAT_ATPT  / ( F_L_ATPT  * PROG_L_ATPT ) , 2000))  / log(C_MAT_ATPT  / PROG_MAT_ATPT  / ( C_L_ATPT  / PROG_L_ATPT )  / @elem(C_MAT_ATPT  / PROG_MAT_ATPT  / ( C_L_ATPT  / PROG_L_ATPT ) , 2000)  * 1.0000000001)  + ES_MAT_L_ATPT )  - ( C_MAT_ATPT  / PROG_MAT_ATPT  / ( C_L_ATPT  / PROG_L_ATPT )  / @elem(C_MAT_ATPT  / PROG_MAT_ATPT  / ( C_L_ATPT  / PROG_L_ATPT ) , 2000) > 1.00001 )  * ( log(F_MAT_ATPT  * PROG_MAT_ATPT  / ( F_L_ATPT  * PROG_L_ATPT )  / @elem(F_MAT_ATPT  * PROG_MAT_ATPT  / ( F_L_ATPT  * PROG_L_ATPT ) , 2000))  / log(C_MAT_ATPT  / PROG_MAT_ATPT  / ( C_L_ATPT  / PROG_L_ATPT )  / @elem(C_MAT_ATPT  / PROG_MAT_ATPT  / ( C_L_ATPT  / PROG_L_ATPT ) , 2000)  * 1.0000000001)  + ES_MAT_L_ATPT )

d(log(IA_ANFO))  = ADJUST_IA_Ye_ANFO  * d(log(Y_e_ANFO))  + ADJUST_IA_IA1_ANFO  * d(log(IA_ANFO(-1)))  + ADJUST_IA_SUBST_ANFO  * d(SUBST_F_K_ANFO)  + ADJUST_IA_Kn_ANFO  * ( log(F_n_K_ANFO(-1))  - log(F_K_ANFO(-1)) )

VA_AIND  = Y_AIND  - CI_AIND

IM_CIND_ATPO  = phi_IM_CIND_ATPO  * I_CIND_ATPO

PCI_ANFO  * CI_ANFO  = PCID_ANFO  * CID_ANFO  + PCIM_ANFO  * CIM_ANFO

d(log(CI_CNJN_ANRE))  = d(log(F_E_ANRE))  + d(SUBST_CI_CNJN_ANRE)

Verif_GDPbis  = ( GDPbis  / GDP  - 1 )  * 100

ES_act_MAT_L_ATPO  = ES_MAT_L_ATPO  - ( C_MAT_ATPO  / PROG_MAT_ATPO  / ( C_L_ATPO  / PROG_L_ATPO )  / @elem(C_MAT_ATPO  / PROG_MAT_ATPO  / ( C_L_ATPO  / PROG_L_ATPO ) , 2000) < 0.99999 )  * ( log(F_MAT_ATPO  * PROG_MAT_ATPO  / ( F_L_ATPO  * PROG_L_ATPO )  / @elem(F_MAT_ATPO  * PROG_MAT_ATPO  / ( F_L_ATPO  * PROG_L_ATPO ) , 2000))  / log(C_MAT_ATPO  / PROG_MAT_ATPO  / ( C_L_ATPO  / PROG_L_ATPO )  / @elem(C_MAT_ATPO  / PROG_MAT_ATPO  / ( C_L_ATPO  / PROG_L_ATPO ) , 2000)  * 1.0000000001)  + ES_MAT_L_ATPO )  - ( C_MAT_ATPO  / PROG_MAT_ATPO  / ( C_L_ATPO  / PROG_L_ATPO )  / @elem(C_MAT_ATPO  / PROG_MAT_ATPO  / ( C_L_ATPO  / PROG_L_ATPO ) , 2000) > 1.00001 )  * ( log(F_MAT_ATPO  * PROG_MAT_ATPO  / ( F_L_ATPO  * PROG_L_ATPO )  / @elem(F_MAT_ATPO  * PROG_MAT_ATPO  / ( F_L_ATPO  * PROG_L_ATPO ) , 2000))  / log(C_MAT_ATPO  / PROG_MAT_ATPO  / ( C_L_ATPO  / PROG_L_ATPO )  / @elem(C_MAT_ATPO  / PROG_MAT_ATPO  / ( C_L_ATPO  / PROG_L_ATPO ) , 2000)  * 1.0000000001)  + ES_MAT_L_ATPO )

Verif_GDP4  = ( GDP4  / GDP  - 1 )  * 100

PCIM_CSER_ANRE  = PMSBVAT_CSER

PID_CIND_ATPT  = PYQSBVAT_CIND

phi_IM_CIND_ASER  = 1  / ( 1  + @elem(ID_CIND_ASER  / IM_CIND_ASER , 2000)  * exp(SUBST_IM_CIND_ASER) )

PCID_CSER_ANFO  = PYQSBVAT_CSER

ES_act_L_L_ATPO  = ES_L_L_ATPO  - ( C_L_ATPO  / PROG_L_ATPO  / ( C_L_ATPO  / PROG_L_ATPO )  / @elem(C_L_ATPO  / PROG_L_ATPO  / ( C_L_ATPO  / PROG_L_ATPO ) , 2000) < 0.99999 )  * ( log(F_L_ATPO  * PROG_L_ATPO  / ( F_L_ATPO  * PROG_L_ATPO )  / @elem(F_L_ATPO  * PROG_L_ATPO  / ( F_L_ATPO  * PROG_L_ATPO ) , 2000))  / log(C_L_ATPO  / PROG_L_ATPO  / ( C_L_ATPO  / PROG_L_ATPO )  / @elem(C_L_ATPO  / PROG_L_ATPO  / ( C_L_ATPO  / PROG_L_ATPO ) , 2000)  * 1.0000000001)  + ES_L_L_ATPO )  - ( C_L_ATPO  / PROG_L_ATPO  / ( C_L_ATPO  / PROG_L_ATPO )  / @elem(C_L_ATPO  / PROG_L_ATPO  / ( C_L_ATPO  / PROG_L_ATPO ) , 2000) > 1.00001 )  * ( log(F_L_ATPO  * PROG_L_ATPO  / ( F_L_ATPO  * PROG_L_ATPO )  / @elem(F_L_ATPO  * PROG_L_ATPO  / ( F_L_ATPO  * PROG_L_ATPO ) , 2000))  / log(C_L_ATPO  / PROG_L_ATPO  / ( C_L_ATPO  / PROG_L_ATPO )  / @elem(C_L_ATPO  / PROG_L_ATPO  / ( C_L_ATPO  / PROG_L_ATPO ) , 2000)  * 1.0000000001)  + ES_L_L_ATPO )

C_K_ASER  = PK_ASER  * ( Rdep_ASER  + r_ASER )

PID_CIND_ATPO  = PYQSBVAT_CIND

ES_act_L_L_ATPT  = ES_L_L_ATPT  - ( C_L_ATPT  / PROG_L_ATPT  / ( C_L_ATPT  / PROG_L_ATPT )  / @elem(C_L_ATPT  / PROG_L_ATPT  / ( C_L_ATPT  / PROG_L_ATPT ) , 2000) < 0.99999 )  * ( log(F_L_ATPT  * PROG_L_ATPT  / ( F_L_ATPT  * PROG_L_ATPT )  / @elem(F_L_ATPT  * PROG_L_ATPT  / ( F_L_ATPT  * PROG_L_ATPT ) , 2000))  / log(C_L_ATPT  / PROG_L_ATPT  / ( C_L_ATPT  / PROG_L_ATPT )  / @elem(C_L_ATPT  / PROG_L_ATPT  / ( C_L_ATPT  / PROG_L_ATPT ) , 2000)  * 1.0000000001)  + ES_L_L_ATPT )  - ( C_L_ATPT  / PROG_L_ATPT  / ( C_L_ATPT  / PROG_L_ATPT )  / @elem(C_L_ATPT  / PROG_L_ATPT  / ( C_L_ATPT  / PROG_L_ATPT ) , 2000) > 1.00001 )  * ( log(F_L_ATPT  * PROG_L_ATPT  / ( F_L_ATPT  * PROG_L_ATPT )  / @elem(F_L_ATPT  * PROG_L_ATPT  / ( F_L_ATPT  * PROG_L_ATPT ) , 2000))  / log(C_L_ATPT  / PROG_L_ATPT  / ( C_L_ATPT  / PROG_L_ATPT )  / @elem(C_L_ATPT  / PROG_L_ATPT  / ( C_L_ATPT  / PROG_L_ATPT ) , 2000)  * 1.0000000001)  + ES_L_L_ATPT )

GR_PROG_E_ASER  = @elem(GR_PROG_E_ASER , 2000)  + RHO_PROG_E_PE  * ( log(PE_ASER)  - log(P) > 0 )  * d(log(PE_ASER)  - log(P))

PYQbis_CNJM  * YQ_CNJM  + NTAXPD_VAL_CNJM  + PMGPD_CNJM  * MGPD_CNJM  = PQD_CNJM  * QD_CNJM

PYQbis_CNJN  * YQ_CNJN  + NTAXPD_VAL_CNJN  + PMGPD_CNJN  * MGPD_CNJN  = PQD_CNJN  * QD_CNJN

Verif_phi_CH  = ( 1  - ( 0  + phi_CH_CIND  + phi_CH_CTRP  + phi_CH_CSER  + phi_CH_CNJN  + phi_CH_CNJM ) )  * 100

SUBST_MGPM_CSER_CIND  = ADJUST6_MGPM_CSER_CIND  * SUBST_n_MGPM_CSER_CIND  + ( 1  - ADJUST6_MGPM_CSER_CIND )  * SUBST_MGPM_CSER_CIND(-1)

d(SUBST_n_IM_CIND_ANRE)  =  - ES_IM_CIND_ANRE  * d(log(PID_CIND_ANRE)  - log(PIM_CIND_ANRE))

d(SUBST_n_X_CTRP)  =  - ES_X_CTRP  * d(log(PX_CTRP)  - log(TC  * PWD_CTRP))

verif_phi_MGPD_CNJN  = ( 1  - ( 0  + phi_MGPD_CIND_CNJN  + phi_MGPD_CTRP_CNJN  + phi_MGPD_CSER_CNJN  + phi_MGPD_CNJN_CNJN  + phi_MGPD_CNJM_CNJN ) )  * 100

verif_phi_MGPD_CNJM  = ( 1  - ( 0  + phi_MGPD_CIND_CNJM  + phi_MGPD_CTRP_CNJM  + phi_MGPD_CSER_CNJM  + phi_MGPD_CNJN_CNJM  + phi_MGPD_CNJM_CNJM ) )  * 100

SUBST_F_MAT_ANRE  = ADJUST6_F_MAT_ANRE  * SUBST_n_F_MAT_ANRE  + ( 1  - ADJUST6_F_MAT_ANRE )  * SUBST_F_MAT_ANRE(-1)

ES_act_MAT_MAT_ASER  = ES_MAT_MAT_ASER  - ( C_MAT_ASER  / PROG_MAT_ASER  / ( C_MAT_ASER  / PROG_MAT_ASER )  / @elem(C_MAT_ASER  / PROG_MAT_ASER  / ( C_MAT_ASER  / PROG_MAT_ASER ) , 2000) < 0.99999 )  * ( log(F_MAT_ASER  * PROG_MAT_ASER  / ( F_MAT_ASER  * PROG_MAT_ASER )  / @elem(F_MAT_ASER  * PROG_MAT_ASER  / ( F_MAT_ASER  * PROG_MAT_ASER ) , 2000))  / log(C_MAT_ASER  / PROG_MAT_ASER  / ( C_MAT_ASER  / PROG_MAT_ASER )  / @elem(C_MAT_ASER  / PROG_MAT_ASER  / ( C_MAT_ASER  / PROG_MAT_ASER ) , 2000)  * 1.0000000001)  + ES_MAT_MAT_ASER )  - ( C_MAT_ASER  / PROG_MAT_ASER  / ( C_MAT_ASER  / PROG_MAT_ASER )  / @elem(C_MAT_ASER  / PROG_MAT_ASER  / ( C_MAT_ASER  / PROG_MAT_ASER ) , 2000) > 1.00001 )  * ( log(F_MAT_ASER  * PROG_MAT_ASER  / ( F_MAT_ASER  * PROG_MAT_ASER )  / @elem(F_MAT_ASER  * PROG_MAT_ASER  / ( F_MAT_ASER  * PROG_MAT_ASER ) , 2000))  / log(C_MAT_ASER  / PROG_MAT_ASER  / ( C_MAT_ASER  / PROG_MAT_ASER )  / @elem(C_MAT_ASER  / PROG_MAT_ASER  / ( C_MAT_ASER  / PROG_MAT_ASER ) , 2000)  * 1.0000000001)  + ES_MAT_MAT_ASER )

CID_CTRP_ASER  = ( 1  - phi_CIM_CTRP_ASER )  * CI_CTRP_ASER

phi_E_CNJN_ANRE  = PCI_CNJN_ANRE  * CI_CNJN_ANRE  / ( 0  + PCI_CNJN_ANRE  * CI_CNJN_ANRE  + PCI_CNJM_ANRE  * CI_CNJM_ANRE )

C_E_ATPO  = PE_ATPO

d(log(CI_CIND_ANRE))  = d(log(F_MAT_ANRE))

phi_CIM_CSER_ANRE  = 1  / ( 1  + @elem(CID_CSER_ANRE  / CIM_CSER_ANRE , 2000)  * exp(SUBST_CIM_CSER_ANRE) )

NOS_VAL_ATPT  = GOS_VAL_ATPT  - PK_ATPT(-1)  * Rdep_ATPT  * F_K_ATPT(-1)

PGDPter  * GDPter  = PVA  * VA  + PNTAXP  * NTAXP

phi_CIM_CTRP_ASER  = 1  / ( 1  + @elem(CID_CTRP_ASER  / CIM_CTRP_ASER , 2000)  * exp(SUBST_CIM_CTRP_ASER) )

SUBST_F_E_ASER  = ADJUST6_F_E_ASER  * SUBST_n_F_E_ASER  + ( 1  - ADJUST6_F_E_ASER )  * SUBST_F_E_ASER(-1)

C_E_ATPT  = PE_ATPT

d(log(YCAP_ANFO))  = 0  + phi_K_ANFO(-1)  * d(log(F_K_ANFO  * PROG_K_ANFO))  + phi_L_ANFO(-1)  * d(log(F_L_ANFO  * PROG_L_ANFO))  + phi_E_ANFO(-1)  * d(log(F_E_ANFO  * PROG_E_ANFO))  + phi_MAT_ANFO(-1)  * d(log(F_MAT_ANFO  * PROG_MAT_ANFO))  + ADJUST_YCAP_Y_ANFO  * ( log(Y_ANFO(-1))  - log(YCAP_ANFO(-1)  * @elem(CUR_ANFO , 2000)) )

CIM_ASER  = 0  + CIM_CIND_ASER  + CIM_CTRP_ASER  + CIM_CSER_ASER  + CIM_CNJN_ASER  + CIM_CNJM_ASER

d(SUBST_n_IM_CSER_AIND)  =  - ES_IM_CSER_AIND  * d(log(PID_CSER_AIND)  - log(PIM_CSER_AIND))

CID_CIND_ANRE  = ( 1  - phi_CIM_CIND_ANRE )  * CI_CIND_ANRE

PMGRM_CSER  = PMSBVAT_CSER

PID_CIND  * ID_CIND  = 0  + PID_CIND_AIND  * ID_CIND_AIND  + PID_CIND_ATPT  * ID_CIND_ATPT  + PID_CIND_ATPO  * ID_CIND_ATPO  + PID_CIND_ASER  * ID_CIND_ASER  + PID_CIND_ANRE  * ID_CIND_ANRE  + PID_CIND_ANFO  * ID_CIND_ANFO

SUBST_F_MAT_AIND  = ADJUST6_F_MAT_AIND  * SUBST_n_F_MAT_AIND  + ( 1  - ADJUST6_F_MAT_AIND )  * SUBST_F_MAT_AIND(-1)

ES_act_K_MAT_ATPO  = ES_K_MAT_ATPO  - ( C_K_ATPO  / PROG_K_ATPO  / ( C_MAT_ATPO  / PROG_MAT_ATPO )  / @elem(C_K_ATPO  / PROG_K_ATPO  / ( C_MAT_ATPO  / PROG_MAT_ATPO ) , 2000) < 0.99999 )  * ( log(F_K_ATPO  * PROG_K_ATPO  / ( F_MAT_ATPO  * PROG_MAT_ATPO )  / @elem(F_K_ATPO  * PROG_K_ATPO  / ( F_MAT_ATPO  * PROG_MAT_ATPO ) , 2000))  / log(C_K_ATPO  / PROG_K_ATPO  / ( C_MAT_ATPO  / PROG_MAT_ATPO )  / @elem(C_K_ATPO  / PROG_K_ATPO  / ( C_MAT_ATPO  / PROG_MAT_ATPO ) , 2000)  * 1.0000000001)  + ES_K_MAT_ATPO )  - ( C_K_ATPO  / PROG_K_ATPO  / ( C_MAT_ATPO  / PROG_MAT_ATPO )  / @elem(C_K_ATPO  / PROG_K_ATPO  / ( C_MAT_ATPO  / PROG_MAT_ATPO ) , 2000) > 1.00001 )  * ( log(F_K_ATPO  * PROG_K_ATPO  / ( F_MAT_ATPO  * PROG_MAT_ATPO )  / @elem(F_K_ATPO  * PROG_K_ATPO  / ( F_MAT_ATPO  * PROG_MAT_ATPO ) , 2000))  / log(C_K_ATPO  / PROG_K_ATPO  / ( C_MAT_ATPO  / PROG_MAT_ATPO )  / @elem(C_K_ATPO  / PROG_K_ATPO  / ( C_MAT_ATPO  / PROG_MAT_ATPO ) , 2000)  * 1.0000000001)  + ES_K_MAT_ATPO )

NOS_VAL_ATPO  = GOS_VAL_ATPO  - PK_ATPO(-1)  * Rdep_ATPO  * F_K_ATPO(-1)

ES_act_K_MAT_ATPT  = ES_K_MAT_ATPT  - ( C_K_ATPT  / PROG_K_ATPT  / ( C_MAT_ATPT  / PROG_MAT_ATPT )  / @elem(C_K_ATPT  / PROG_K_ATPT  / ( C_MAT_ATPT  / PROG_MAT_ATPT ) , 2000) < 0.99999 )  * ( log(F_K_ATPT  * PROG_K_ATPT  / ( F_MAT_ATPT  * PROG_MAT_ATPT )  / @elem(F_K_ATPT  * PROG_K_ATPT  / ( F_MAT_ATPT  * PROG_MAT_ATPT ) , 2000))  / log(C_K_ATPT  / PROG_K_ATPT  / ( C_MAT_ATPT  / PROG_MAT_ATPT )  / @elem(C_K_ATPT  / PROG_K_ATPT  / ( C_MAT_ATPT  / PROG_MAT_ATPT ) , 2000)  * 1.0000000001)  + ES_K_MAT_ATPT )  - ( C_K_ATPT  / PROG_K_ATPT  / ( C_MAT_ATPT  / PROG_MAT_ATPT )  / @elem(C_K_ATPT  / PROG_K_ATPT  / ( C_MAT_ATPT  / PROG_MAT_ATPT ) , 2000) > 1.00001 )  * ( log(F_K_ATPT  * PROG_K_ATPT  / ( F_MAT_ATPT  * PROG_MAT_ATPT )  / @elem(F_K_ATPT  * PROG_K_ATPT  / ( F_MAT_ATPT  * PROG_MAT_ATPT ) , 2000))  / log(C_K_ATPT  / PROG_K_ATPT  / ( C_MAT_ATPT  / PROG_MAT_ATPT )  / @elem(C_K_ATPT  / PROG_K_ATPT  / ( C_MAT_ATPT  / PROG_MAT_ATPT ) , 2000)  * 1.0000000001)  + ES_K_MAT_ATPT )

MARKUP_ANRE  = ADJUST_MARKUP_ANRE  * MARKUP_n_ANRE  + ( 1  - ADJUST_MARKUP_ANRE )  * MARKUP_ANRE(-1)

PMGR_CTRP  * MGR_CTRP  = 0  + PMGP_CTRP_CIND  * MGP_CTRP_CIND  + PMGP_CTRP_CNJN  * MGP_CTRP_CNJN  + PMGP_CTRP_CNJM  * MGP_CTRP_CNJM

SUBST_MGPD_CTRP_CIND  = ADJUST6_MGPD_CTRP_CIND  * SUBST_n_MGPD_CTRP_CIND  + ( 1  - ADJUST6_MGPD_CTRP_CIND )  * SUBST_MGPD_CTRP_CIND(-1)

POTHPTM_CNJN  * OTHPTM_CNJN  = ROTHPTM_CNJN  * PM_CNJN  * M_CNJN

POTHPTM_CNJM  * OTHPTM_CNJM  = ROTHPTM_CNJM  * PM_CNJM  * M_CNJM

d(log(F_n_L_ATPT))  = d(log(Y_ATPT))  - d(log(PROG_L_ATPT))  + d(SUBST_F_L_ATPT)

ES_act_CHM_CTRP  = ES_CHM_CTRP  - ( PCHD_CTRP  / PCHM_CTRP < 0.99999 )  * ( log(CHD_CTRP  / CHM_CTRP  / @elem(CHD_CTRP  / CHM_CTRP , 2000))  / log(PCHD_CTRP  / PCHM_CTRP  * 1.0000000001)  + ES_CHM_CTRP )  - ( PCHD_CTRP  / PCHM_CTRP > 1.00001 )  * ( log(CHD_CTRP  / CHM_CTRP  / @elem(CHD_CTRP  / CHM_CTRP , 2000))  / log(PCHD_CTRP  / PCHM_CTRP  * 1.0000000001)  + ES_CHM_CTRP )

d(log(F_n_L_ATPO))  = d(log(Y_ATPO))  - d(log(PROG_L_ATPO))  + d(SUBST_F_L_ATPO)

phi_MGPD_CSER_CNJM  = PMGPD_CSER_CNJM  * MGPD_CSER_CNJM  / ( 0  + PMGPD_CIND_CNJM  * MGPD_CIND_CNJM  + PMGPD_CTRP_CNJM  * MGPD_CTRP_CNJM  + PMGPD_CSER_CNJM  * MGPD_CSER_CNJM  + PMGPD_CNJN_CNJM  * MGPD_CNJN_CNJM  + PMGPD_CNJM_CNJM  * MGPD_CNJM_CNJM )

phi_MGPD_CSER_CNJN  = PMGPD_CSER_CNJN  * MGPD_CSER_CNJN  / ( 0  + PMGPD_CIND_CNJN  * MGPD_CIND_CNJN  + PMGPD_CTRP_CNJN  * MGPD_CTRP_CNJN  + PMGPD_CSER_CNJN  * MGPD_CSER_CNJN  + PMGPD_CNJN_CNJN  * MGPD_CNJN_CNJN  + PMGPD_CNJM_CNJN  * MGPD_CNJM_CNJN )

NTAXP_VAL_CNJM  = NTAXPD_VAL_CNJM  + NTAXPM_VAL_CNJM

NTAXP_VAL_CNJN  = NTAXPD_VAL_CNJN  + NTAXPM_VAL_CNJN

PWAGES_ASER  = P

d(log(F_e_L_ANRE))  = ADJUST1_F_L_ANRE  * d(log(F_e_L_ANRE(-1)))  + ADJUST2_F_L_ANRE  * d(log(F_L_ANRE(-1)))  + ADJUST3_F_L_ANRE  * d(log(F_n_L_ANRE))

IM_CSER_ASER  = phi_IM_CSER_ASER  * I_CSER_ASER

PYQS_CTRP  * YQS_CTRP  = PYQ_CTRP  * YQ_CTRP  + PMGPD_CTRP  * MGPD_CTRP  + NTAXPD_VAL_CTRP

PIM_CSER_ATPO  = PMSBVAT_CSER

ES_act_E_K_ATPO  = ES_E_K_ATPO  - ( C_E_ATPO  / PROG_E_ATPO  / ( C_K_ATPO  / PROG_K_ATPO )  / @elem(C_E_ATPO  / PROG_E_ATPO  / ( C_K_ATPO  / PROG_K_ATPO ) , 2000) < 0.99999 )  * ( log(F_E_ATPO  * PROG_E_ATPO  / ( F_K_ATPO  * PROG_K_ATPO )  / @elem(F_E_ATPO  * PROG_E_ATPO  / ( F_K_ATPO  * PROG_K_ATPO ) , 2000))  / log(C_E_ATPO  / PROG_E_ATPO  / ( C_K_ATPO  / PROG_K_ATPO )  / @elem(C_E_ATPO  / PROG_E_ATPO  / ( C_K_ATPO  / PROG_K_ATPO ) , 2000)  * 1.0000000001)  + ES_E_K_ATPO )  - ( C_E_ATPO  / PROG_E_ATPO  / ( C_K_ATPO  / PROG_K_ATPO )  / @elem(C_E_ATPO  / PROG_E_ATPO  / ( C_K_ATPO  / PROG_K_ATPO ) , 2000) > 1.00001 )  * ( log(F_E_ATPO  * PROG_E_ATPO  / ( F_K_ATPO  * PROG_K_ATPO )  / @elem(F_E_ATPO  * PROG_E_ATPO  / ( F_K_ATPO  * PROG_K_ATPO ) , 2000))  / log(C_E_ATPO  / PROG_E_ATPO  / ( C_K_ATPO  / PROG_K_ATPO )  / @elem(C_E_ATPO  / PROG_E_ATPO  / ( C_K_ATPO  / PROG_K_ATPO ) , 2000)  * 1.0000000001)  + ES_E_K_ATPO )

RSSC_ASER  * PRSSC_ASER  = W_ASER  * F_L_ASER  * RRSSC_ASER

PMGRD  * MGRD  = 0  + PMGRD_CTRP  * MGRD_CTRP  + PMGRD_CSER  * MGRD_CSER

d(log(F_n_L_ASER))  = d(log(Y_ASER))  - d(log(PROG_L_ASER))  + d(SUBST_F_L_ASER)

phi_E_ASER  = C_E_ASER  * F_n_E_ASER  / ( 0  + C_K_ASER  * F_n_K_ASER  + C_L_ASER  * F_n_L_ASER  + C_E_ASER  * F_n_E_ASER  + C_MAT_ASER  * F_n_MAT_ASER )

PMGRM  * MGRM  = 0  + PMGRM_CTRP  * MGRM_CTRP  + PMGRM_CSER  * MGRM_CSER

PQ_CTRP  * Q_CTRP  = PQD_CTRP  * QD_CTRP  + PQM_CTRP  * QM_CTRP

d(log(PY_e_ANRE))  = ADJUST1_PY_ANRE  * d(log(PY_e_ANRE(-1)))  + ADJUST2_PY_ANRE  * d(log(PY_ANRE(-1)))  + ADJUST3_PY_ANRE  * d(log(PY_n_ANRE))

PXM_CNJM  = PMSBVAT_CNJM

PIM_CSER_ATPT  = PMSBVAT_CSER

SUBST_XM_CSER  = ADJUST6_XM_CSER  * SUBST_n_XM_CSER  + ( 1  - ADJUST6_XM_CSER )  * SUBST_XM_CSER(-1)

RSSC_ANRE  * PRSSC_ANRE  = W_ANRE  * F_L_ANRE  * RRSSC_ANRE

ES_act_E_K_ATPT  = ES_E_K_ATPT  - ( C_E_ATPT  / PROG_E_ATPT  / ( C_K_ATPT  / PROG_K_ATPT )  / @elem(C_E_ATPT  / PROG_E_ATPT  / ( C_K_ATPT  / PROG_K_ATPT ) , 2000) < 0.99999 )  * ( log(F_E_ATPT  * PROG_E_ATPT  / ( F_K_ATPT  * PROG_K_ATPT )  / @elem(F_E_ATPT  * PROG_E_ATPT  / ( F_K_ATPT  * PROG_K_ATPT ) , 2000))  / log(C_E_ATPT  / PROG_E_ATPT  / ( C_K_ATPT  / PROG_K_ATPT )  / @elem(C_E_ATPT  / PROG_E_ATPT  / ( C_K_ATPT  / PROG_K_ATPT ) , 2000)  * 1.0000000001)  + ES_E_K_ATPT )  - ( C_E_ATPT  / PROG_E_ATPT  / ( C_K_ATPT  / PROG_K_ATPT )  / @elem(C_E_ATPT  / PROG_E_ATPT  / ( C_K_ATPT  / PROG_K_ATPT ) , 2000) > 1.00001 )  * ( log(F_E_ATPT  * PROG_E_ATPT  / ( F_K_ATPT  * PROG_K_ATPT )  / @elem(F_E_ATPT  * PROG_E_ATPT  / ( F_K_ATPT  * PROG_K_ATPT ) , 2000))  / log(C_E_ATPT  / PROG_E_ATPT  / ( C_K_ATPT  / PROG_K_ATPT )  / @elem(C_E_ATPT  / PROG_E_ATPT  / ( C_K_ATPT  / PROG_K_ATPT ) , 2000)  * 1.0000000001)  + ES_E_K_ATPT )

log(F_L_ANRE)  = ADJUST0_F_L_ANRE  * log(F_n_L_ANRE)  + ( 1  - ADJUST0_F_L_ANRE )  * ( log(F_L_ANRE(-1))  + d(log(F_e_L_ANRE)) )

PGD  * GD  = 0  + PGD_CIND  * GD_CIND  + PGD_CTRP  * GD_CTRP  + PGD_CSER  * GD_CSER  + PGD_CNJN  * GD_CNJN

MGR  = MGRD  + MGRM

PGM  * GM  = 0  + PGM_CIND  * GM_CIND  + PGM_CTRP  * GM_CTRP  + PGM_CSER  * GM_CSER  + PGM_CNJN  * GM_CNJN

d(log(CI_CIND_AIND))  = d(log(F_MAT_AIND))

CID_CSER_ATPO  = ( 1  - phi_CIM_CSER_ATPO )  * CI_CSER_ATPO

CID_CSER_ATPT  = ( 1  - phi_CIM_CSER_ATPT )  * CI_CSER_ATPT

QD_CNJM  = MGRD_CNJM  + CID_CNJM  + CHD_CNJM  + GD_CNJM  + ID_CNJM  + XD_CNJM  + DSD_CNJM

QD_CNJN  = MGRD_CNJN  + CID_CNJN  + CHD_CNJN  + GD_CNJN  + ID_CNJN  + XD_CNJN  + DSD_CNJN

d(SUBST_n_GM_CIND)  =  - ES_GM_CIND  * d(log(PGD_CIND)  - log(PGM_CIND))

d(SUBST_n_IM_CSER_ANRE)  =  - ES_IM_CSER_ANRE  * d(log(PID_CSER_ANRE)  - log(PIM_CSER_ANRE))

C_E  * F_E  = 0  + C_E_AIND  * F_E_AIND  + C_E_ATPT  * F_E_ATPT  + C_E_ATPO  * F_E_ATPO  + C_E_ASER  * F_E_ASER  + C_E_ANRE  * F_E_ANRE  + C_E_ANFO  * F_E_ANFO

PROG_E_ASER  = PROG_E_ASER(-1)  * ( 1  + GR_PROG_E_ASER )

CID_ASER  = 0  + CID_CIND_ASER  + CID_CTRP_ASER  + CID_CSER_ASER  + CID_CNJN_ASER  + CID_CNJM_ASER

C_K  * F_K  = 0  + C_K_AIND  * F_K_AIND  + C_K_ATPT  * F_K_ATPT  + C_K_ATPO  * F_K_ATPO  + C_K_ASER  * F_K_ASER  + C_K_ANRE  * F_K_ANRE  + C_K_ANFO  * F_K_ANFO

phi_CIM_CSER_AIND  = 1  / ( 1  + @elem(CID_CSER_AIND  / CIM_CSER_AIND , 2000)  * exp(SUBST_CIM_CSER_AIND) )

C_L  * F_L  = 0  + C_L_AIND  * F_L_AIND  + C_L_ATPT  * F_L_ATPT  + C_L_ATPO  * F_L_ATPO  + C_L_ASER  * F_L_ASER  + C_L_ANRE  * F_L_ANRE  + C_L_ANFO  * F_L_ANFO

d(SUBST_n_IM_CSER_ASER)  =  - ES_IM_CSER_ASER  * d(log(PID_CSER_ASER)  - log(PIM_CSER_ASER))

CI_CIND  = CID_CIND  + CIM_CIND

d(SUBST_n_CI_CNJN_ANFO)  = 0  +  - ES_NRJ_CNJN_CNJN_ANFO  * phi_E_CNJN_ANFO  * d(log(PCI_CNJN_ANFO)  - log(PCI_CNJN_ANFO))  +  - ES_NRJ_CNJN_CNJM_ANFO  * phi_E_CNJM_ANFO  * d(log(PCI_CNJN_ANFO)  - log(PCI_CNJM_ANFO))

ES_act_MAT_E_ANFO  = ES_MAT_E_ANFO  - ( C_MAT_ANFO  / PROG_MAT_ANFO  / ( C_E_ANFO  / PROG_E_ANFO )  / @elem(C_MAT_ANFO  / PROG_MAT_ANFO  / ( C_E_ANFO  / PROG_E_ANFO ) , 2000) < 0.99999 )  * ( log(F_MAT_ANFO  * PROG_MAT_ANFO  / ( F_E_ANFO  * PROG_E_ANFO )  / @elem(F_MAT_ANFO  * PROG_MAT_ANFO  / ( F_E_ANFO  * PROG_E_ANFO ) , 2000))  / log(C_MAT_ANFO  / PROG_MAT_ANFO  / ( C_E_ANFO  / PROG_E_ANFO )  / @elem(C_MAT_ANFO  / PROG_MAT_ANFO  / ( C_E_ANFO  / PROG_E_ANFO ) , 2000)  * 1.0000000001)  + ES_MAT_E_ANFO )  - ( C_MAT_ANFO  / PROG_MAT_ANFO  / ( C_E_ANFO  / PROG_E_ANFO )  / @elem(C_MAT_ANFO  / PROG_MAT_ANFO  / ( C_E_ANFO  / PROG_E_ANFO ) , 2000) > 1.00001 )  * ( log(F_MAT_ANFO  * PROG_MAT_ANFO  / ( F_E_ANFO  * PROG_E_ANFO )  / @elem(F_MAT_ANFO  * PROG_MAT_ANFO  / ( F_E_ANFO  * PROG_E_ANFO ) , 2000))  / log(C_MAT_ANFO  / PROG_MAT_ANFO  / ( C_E_ANFO  / PROG_E_ANFO )  / @elem(C_MAT_ANFO  / PROG_MAT_ANFO  / ( C_E_ANFO  / PROG_E_ANFO ) , 2000)  * 1.0000000001)  + ES_MAT_E_ANFO )

SUBST_F_MAT_ASER  = ADJUST6_F_MAT_ASER  * SUBST_n_F_MAT_ASER  + ( 1  - ADJUST6_F_MAT_ASER )  * SUBST_F_MAT_ASER(-1)

IM_AIND  = 0  + IM_CIND_AIND  + IM_CSER_AIND

Mbis_CIND  + NTAXPM_CIND  + MGPM_CIND  = QM_CIND

OTHPTM_CNJM  = @elem(ROTHPTM_CNJM , 2000)  * M_CNJM

C_E_ASER  = PE_ASER

CID_CSER_ANFO  = ( 1  - phi_CIM_CSER_ANFO )  * CI_CSER_ANFO

PCIM_CNJM_ANRE  = PMSBVAT_CNJM

log(PY_ATPT)  = ADJUST0_PY_ATPT  * log(PY_n_ATPT)  + ( 1  - ADJUST0_PY_ATPT )  * ( log(PY_ATPT(-1))  + d(log(PY_e_ATPT)) )

SUBST_GM_CSER  = ADJUST6_GM_CSER  * SUBST_n_GM_CSER  + ( 1  - ADJUST6_GM_CSER )  * SUBST_GM_CSER(-1)

Y_ASER  = 0  + Y_CIND_ASER  + Y_CTRP_ASER  + Y_CSER_ASER  + Y_CNJN_ASER  + Y_CNJM_ASER

log(PY_ATPO)  = ADJUST0_PY_ATPO  * log(PY_n_ATPO)  + ( 1  - ADJUST0_PY_ATPO )  * ( log(PY_ATPO(-1))  + d(log(PY_e_ATPO)) )

SUBST_MGPD_CSER_CNJN  = ADJUST6_MGPD_CSER_CNJN  * SUBST_n_MGPD_CSER_CNJN  + ( 1  - ADJUST6_MGPD_CSER_CNJN )  * SUBST_MGPD_CSER_CNJN(-1)

PCI_ASER  * CI_ASER  = PCID_ASER  * CID_ASER  + PCIM_ASER  * CIM_ASER

phi_K_ASER  = C_K_ASER  * F_n_K_ASER  / ( 0  + C_K_ASER  * F_n_K_ASER  + C_L_ASER  * F_n_L_ASER  + C_E_ASER  * F_n_E_ASER  + C_MAT_ASER  * F_n_MAT_ASER )

POTHPTD_CSER  * OTHPTD_CSER  = ROTHPTD_CSER  * PYQ_CSER  * YQ_CSER

NTAXI_VAL_ATPT  = RNTAXI_ATPT  * PY_ATPT  * Y_ATPT

Phi_CH_CNJN  = CH_CNJN  / CH

Phi_CH_CNJM  = CH_CNJM  / CH

PCI_CTRP_AIND  * CI_CTRP_AIND  = PCID_CTRP_AIND  * CID_CTRP_AIND  + PCIM_CTRP_AIND  * CIM_CTRP_AIND

NTAXPD_VAL_CSER  = PVATD_CSER  * VATD_CSER  + POTHPTD_CSER  * OTHPTD_CSER  + PSUBPD_CSER  * SUBPD_CSER

NTAXI_VAL_ATPO  = RNTAXI_ATPO  * PY_ATPO  * Y_ATPO

Y_CSER_AIND  = PhiY_CSER_AIND  * YQ_CSER

d(log(MS_CNJM))  = d(log(M_CNJM))

d(log(MS_CNJN))  = d(log(M_CNJN))

PYQ  * YQ  = 0  + PYQ_CIND  * YQ_CIND  + PYQ_CTRP  * YQ_CTRP  + PYQ_CSER  * YQ_CSER  + PYQ_CNJN  * YQ_CNJN  + PYQ_CNJM  * YQ_CNJM

ES_act_L_K_ANRE  = ES_L_K_ANRE  - ( C_L_ANRE  / PROG_L_ANRE  / ( C_K_ANRE  / PROG_K_ANRE )  / @elem(C_L_ANRE  / PROG_L_ANRE  / ( C_K_ANRE  / PROG_K_ANRE ) , 2000) < 0.99999 )  * ( log(F_L_ANRE  * PROG_L_ANRE  / ( F_K_ANRE  * PROG_K_ANRE )  / @elem(F_L_ANRE  * PROG_L_ANRE  / ( F_K_ANRE  * PROG_K_ANRE ) , 2000))  / log(C_L_ANRE  / PROG_L_ANRE  / ( C_K_ANRE  / PROG_K_ANRE )  / @elem(C_L_ANRE  / PROG_L_ANRE  / ( C_K_ANRE  / PROG_K_ANRE ) , 2000)  * 1.0000000001)  + ES_L_K_ANRE )  - ( C_L_ANRE  / PROG_L_ANRE  / ( C_K_ANRE  / PROG_K_ANRE )  / @elem(C_L_ANRE  / PROG_L_ANRE  / ( C_K_ANRE  / PROG_K_ANRE ) , 2000) > 1.00001 )  * ( log(F_L_ANRE  * PROG_L_ANRE  / ( F_K_ANRE  * PROG_K_ANRE )  / @elem(F_L_ANRE  * PROG_L_ANRE  / ( F_K_ANRE  * PROG_K_ANRE ) , 2000))  / log(C_L_ANRE  / PROG_L_ANRE  / ( C_K_ANRE  / PROG_K_ANRE )  / @elem(C_L_ANRE  / PROG_L_ANRE  / ( C_K_ANRE  / PROG_K_ANRE ) , 2000)  * 1.0000000001)  + ES_L_K_ANRE )

phi_L_ASER  = C_L_ASER  * F_n_L_ASER  / ( 0  + C_K_ASER  * F_n_K_ASER  + C_L_ASER  * F_n_L_ASER  + C_E_ASER  * F_n_E_ASER  + C_MAT_ASER  * F_n_MAT_ASER )

PCIM_ANFO  * CIM_ANFO  = 0  + PCIM_CIND_ANFO  * CIM_CIND_ANFO  + PCIM_CTRP_ANFO  * CIM_CTRP_ANFO  + PCIM_CSER_ANFO  * CIM_CSER_ANFO  + PCIM_CNJN_ANFO  * CIM_CNJN_ANFO  + PCIM_CNJM_ANFO  * CIM_CNJM_ANFO

d(log(WAPop))  = d(log(POP))

d(log(TRSP_ATPO))  = d(log(F_MAT_ATPO))

SUBST_MGPM_CSER_CNJM  = ADJUST6_MGPM_CSER_CNJM  * SUBST_n_MGPM_CSER_CNJM  + ( 1  - ADJUST6_MGPM_CSER_CNJM )  * SUBST_MGPM_CSER_CNJM(-1)

SUBST_MGPM_CSER_CNJN  = ADJUST6_MGPM_CSER_CNJN  * SUBST_n_MGPM_CSER_CNJN  + ( 1  - ADJUST6_MGPM_CSER_CNJN )  * SUBST_MGPM_CSER_CNJN(-1)

d(log(TRSP_ATPT))  = d(log(F_MAT_ATPT))

GD_CNJN  = ( 1  - phi_GM_CNJN )  * G_CNJN

PCIM_CTRP_ANFO  = PMSBVAT_CTRP

NTAXPM_VAL_CTRP  = PVATM_CTRP  * VATM_CTRP  + POTHPTM_CTRP  * OTHPTM_CTRP  + PSUBPM_CTRP  * SUBPM_CTRP

PSUBPD_CTRP  * SUBPD_CTRP  = RSUBPD_CTRP  * YQ_CTRP

CIM_CIND_ASER  = phi_CIM_CIND_ASER  * CI_CIND_ASER

PX_CIND  * X_CIND  = PXD_CIND  * XD_CIND  + PXM_CIND  * XM_CIND

d(SUBST_n_CIM_CIND_AIND)  =  - ES_CIM_CIND_AIND  * d(log(PCID_CIND_AIND)  - log(PCIM_CIND_AIND))

OTHPTM_CSER  = @elem(ROTHPTM_CSER , 2000)  * M_CSER

PID_ANRE  * ID_ANRE  = 0  + PID_CIND_ANRE  * ID_CIND_ANRE  + PID_CSER_ANRE  * ID_CSER_ANRE

phi_GM_CSER  = 1  / ( 1  + @elem(GD_CSER  / GM_CSER , 2000)  * exp(SUBST_GM_CSER) )

GOS_ASER  = VA_ASER  - WAGES_ASER  - RSSC_ASER  - NTAXI_ASER

PMAT_ANFO  * F_MAT_ANFO  = 0  + PCI_CIND_ANFO  * CI_CIND_ANFO  + PCI_CTRP_ANFO  * CI_CTRP_ANFO  + PCI_CSER_ANFO  * CI_CSER_ANFO

log(PROP_INC_H_VAL)  = ADJUST0_PROP_INC_H_VAL  * log(PROP_INC_H_VAL_n)  + ( 1  - ADJUST0_PROP_INC_H_VAL )  * ( log(PROP_INC_H_VAL(-1))  + d(log(PROP_INC_H_VAL_e)) )

SUBST_CIM_CTRP_ANFO  = ADJUST6_CIM_CTRP_ANFO  * SUBST_n_CIM_CTRP_ANFO  + ( 1  - ADJUST6_CIM_CTRP_ANFO )  * SUBST_CIM_CTRP_ANFO(-1)

NTAXPD_VAL_CNJM  = PVATD_CNJM  * VATD_CNJM  + POTHPTD_CNJM  * OTHPTD_CNJM  + PSUBPD_CNJM  * SUBPD_CNJM

ES_act_MGRM_CSER  = ES_MGRM_CSER  - ( PMGRD_CSER  / PMGRM_CSER < 0.99999 )  * ( log(MGRD_CSER  / MGRM_CSER  / @elem(MGRD_CSER  / MGRM_CSER , 2000))  / log(PMGRD_CSER  / PMGRM_CSER  * 1.0000000001)  + ES_MGRM_CSER )  - ( PMGRD_CSER  / PMGRM_CSER > 1.00001 )  * ( log(MGRD_CSER  / MGRM_CSER  / @elem(MGRD_CSER  / MGRM_CSER , 2000))  / log(PMGRD_CSER  / PMGRM_CSER  * 1.0000000001)  + ES_MGRM_CSER )

PCID_CNJN_ATPO  = PYQSBVAT_CNJN

d(log(F_n_E_ANFO))  = d(log(Y_ANFO))  - d(log(PROG_E_ANFO))  + d(SUBST_F_E_ANFO)

SUBST_CIM_CIND_ATPT  = ADJUST6_CIM_CIND_ATPT  * SUBST_n_CIM_CIND_ATPT  + ( 1  - ADJUST6_CIM_CIND_ATPT )  * SUBST_CIM_CIND_ATPT(-1)

SUBST_F_K_ANRE  = ADJUST6_F_K_ANRE  * SUBST_n_F_K_ANRE  + ( 1  - ADJUST6_F_K_ANRE )  * SUBST_F_K_ANRE(-1)

ES_act_L_L_ANFO  = ES_L_L_ANFO  - ( C_L_ANFO  / PROG_L_ANFO  / ( C_L_ANFO  / PROG_L_ANFO )  / @elem(C_L_ANFO  / PROG_L_ANFO  / ( C_L_ANFO  / PROG_L_ANFO ) , 2000) < 0.99999 )  * ( log(F_L_ANFO  * PROG_L_ANFO  / ( F_L_ANFO  * PROG_L_ANFO )  / @elem(F_L_ANFO  * PROG_L_ANFO  / ( F_L_ANFO  * PROG_L_ANFO ) , 2000))  / log(C_L_ANFO  / PROG_L_ANFO  / ( C_L_ANFO  / PROG_L_ANFO )  / @elem(C_L_ANFO  / PROG_L_ANFO  / ( C_L_ANFO  / PROG_L_ANFO ) , 2000)  * 1.0000000001)  + ES_L_L_ANFO )  - ( C_L_ANFO  / PROG_L_ANFO  / ( C_L_ANFO  / PROG_L_ANFO )  / @elem(C_L_ANFO  / PROG_L_ANFO  / ( C_L_ANFO  / PROG_L_ANFO ) , 2000) > 1.00001 )  * ( log(F_L_ANFO  * PROG_L_ANFO  / ( F_L_ANFO  * PROG_L_ANFO )  / @elem(F_L_ANFO  * PROG_L_ANFO  / ( F_L_ANFO  * PROG_L_ANFO ) , 2000))  / log(C_L_ANFO  / PROG_L_ANFO  / ( C_L_ANFO  / PROG_L_ANFO )  / @elem(C_L_ANFO  / PROG_L_ANFO  / ( C_L_ANFO  / PROG_L_ANFO ) , 2000)  * 1.0000000001)  + ES_L_L_ANFO )

SUBST_CIM_CIND_ATPO  = ADJUST6_CIM_CIND_ATPO  * SUBST_n_CIM_CIND_ATPO  + ( 1  - ADJUST6_CIM_CIND_ATPO )  * SUBST_CIM_CIND_ATPO(-1)

SUBST_CIM_CIND_ASER  = ADJUST6_CIM_CIND_ASER  * SUBST_n_CIM_CIND_ASER  + ( 1  - ADJUST6_CIM_CIND_ASER )  * SUBST_CIM_CIND_ASER(-1)

RNTAXPM_CTRP  = NTAXPM_VAL_CTRP  / ( PM_CTRP  * M_CTRP )

Bal_Trade_VAL_CTRP  = PX_CTRP  * X_CTRP  - PM_CTRP  * M_CTRP

CID_CNJM_ATPO  = ( 1  - phi_CIM_CNJM_ATPO )  * CI_CNJM_ATPO

YQbis_CNJM  + NTAXPD_CNJM  + MGPD_CNJM  = QD_CNJM

YQbis_CNJN  + NTAXPD_CNJN  + MGPD_CNJN  = QD_CNJN

SUBST_F_E_ANRE  = ADJUST6_F_E_ANRE  * SUBST_n_F_E_ANRE  + ( 1  - ADJUST6_F_E_ANRE )  * SUBST_F_E_ANRE(-1)

PCI_CSER_ASER  * CI_CSER_ASER  = PCID_CSER_ASER  * CID_CSER_ASER  + PCIM_CSER_ASER  * CIM_CSER_ASER

d(SUBST_n_CI_CNJM_ASER)  = 0  +  - ES_NRJ_CNJM_CNJN_ASER  * phi_E_CNJN_ASER  * d(log(PCI_CNJM_ASER)  - log(PCI_CNJN_ASER))  +  - ES_NRJ_CNJM_CNJM_ASER  * phi_E_CNJM_ASER  * d(log(PCI_CNJM_ASER)  - log(PCI_CNJM_ASER))

CID_CNJM_ATPT  = ( 1  - phi_CIM_CNJM_ATPT )  * CI_CNJM_ATPT

NTAXI_VAL_ANFO  = RNTAXI_ANFO  * PY_ANFO  * Y_ANFO

d(log(CI_CTRP_ANFO))  = d(log(TRSP_ANFO))  + d(SUBST_CI_CTRP_ANFO)

PGOS  * GOS  = 0  + GOS_VAL_AIND  + GOS_VAL_ATPT  + GOS_VAL_ATPO  + GOS_VAL_ASER  + GOS_VAL_ANRE  + GOS_VAL_ANFO

PCI_CIND_ANFO  * CI_CIND_ANFO  = PCID_CIND_ANFO  * CID_CIND_ANFO  + PCIM_CIND_ANFO  * CIM_CIND_ANFO

d(SUBST_n_CIM_CNJM_ATPO)  =  - ES_CIM_CNJM_ATPO  * d(log(PCID_CNJM_ATPO)  - log(PCIM_CNJM_ATPO))

d(SUBST_n_CIM_CNJM_ATPT)  =  - ES_CIM_CNJM_ATPT  * d(log(PCID_CNJM_ATPT)  - log(PCIM_CNJM_ATPT))

phi_MAT_ANRE  = C_MAT_ANRE  * F_n_MAT_ANRE  / ( 0  + C_K_ANRE  * F_n_K_ANRE  + C_L_ANRE  * F_n_L_ANRE  + C_E_ANRE  * F_n_E_ANRE  + C_MAT_ANRE  * F_n_MAT_ANRE )

Y_CNJN_ASER  = PhiY_CNJN_ASER  * YQ_CNJN

XM  = 0  + XM_CIND  + XM_CTRP  + XM_CSER  + XM_CNJN  + XM_CNJM

verif_phi_TRSP_AIND  = ( 1  - ( 0  + phi_TRSP_CTRP_AIND ) )  * 100

Verif_PYQ  = ( PYQ  / PY  - 1 )  * 100

ES_act_L_L_ASER  = ES_L_L_ASER  - ( C_L_ASER  / PROG_L_ASER  / ( C_L_ASER  / PROG_L_ASER )  / @elem(C_L_ASER  / PROG_L_ASER  / ( C_L_ASER  / PROG_L_ASER ) , 2000) < 0.99999 )  * ( log(F_L_ASER  * PROG_L_ASER  / ( F_L_ASER  * PROG_L_ASER )  / @elem(F_L_ASER  * PROG_L_ASER  / ( F_L_ASER  * PROG_L_ASER ) , 2000))  / log(C_L_ASER  / PROG_L_ASER  / ( C_L_ASER  / PROG_L_ASER )  / @elem(C_L_ASER  / PROG_L_ASER  / ( C_L_ASER  / PROG_L_ASER ) , 2000)  * 1.0000000001)  + ES_L_L_ASER )  - ( C_L_ASER  / PROG_L_ASER  / ( C_L_ASER  / PROG_L_ASER )  / @elem(C_L_ASER  / PROG_L_ASER  / ( C_L_ASER  / PROG_L_ASER ) , 2000) > 1.00001 )  * ( log(F_L_ASER  * PROG_L_ASER  / ( F_L_ASER  * PROG_L_ASER )  / @elem(F_L_ASER  * PROG_L_ASER  / ( F_L_ASER  * PROG_L_ASER ) , 2000))  / log(C_L_ASER  / PROG_L_ASER  / ( C_L_ASER  / PROG_L_ASER )  / @elem(C_L_ASER  / PROG_L_ASER  / ( C_L_ASER  / PROG_L_ASER ) , 2000)  * 1.0000000001)  + ES_L_L_ASER )

d(SUBST_n_F_MAT_ASER)  = 0  +  - ES_MAT_K_ASER  * phi_K_ASER(-1)  * d(log(C_MAT_ASER  / PROG_MAT_ASER)  - log(C_K_ASER  / PROG_K_ASER))  +  - ES_MAT_L_ASER  * phi_L_ASER(-1)  * d(log(C_MAT_ASER  / PROG_MAT_ASER)  - log(C_L_ASER  / PROG_L_ASER))  +  - ES_MAT_E_ASER  * phi_E_ASER(-1)  * d(log(C_MAT_ASER  / PROG_MAT_ASER)  - log(C_E_ASER  / PROG_E_ASER))  +  - ES_MAT_MAT_ASER  * phi_MAT_ASER(-1)  * d(log(C_MAT_ASER  / PROG_MAT_ASER)  - log(C_MAT_ASER  / PROG_MAT_ASER))

PMAT_ASER  * F_MAT_ASER  = 0  + PCI_CIND_ASER  * CI_CIND_ASER  + PCI_CTRP_ASER  * CI_CTRP_ASER  + PCI_CSER_ASER  * CI_CSER_ASER

Y_CNJN_ANRE  = PhiY_CNJN_ANRE  * YQ_CNJN

PID_CSER_ANFO  = PYQSBVAT_CSER

d(log(CI_CSER_ANFO))  = d(log(F_MAT_ANFO))

Y_CNJM_ASER  = PhiY_CNJM_ASER  * YQ_CNJM

SUBPM_CIND  = @elem(RSUBPM_CIND , 2000)  * M_CIND

PROG_K_ASER  = PROG_K_ASER(-1)  * ( 1  + GR_PROG_K_ASER )

CU_ATPO  * Y_ATPO  = 0  + C_K_ATPO  * F_K_ATPO  + C_L_ATPO  * F_L_ATPO  + C_E_ATPO  * F_E_ATPO  + C_MAT_ATPO  * F_MAT_ATPO  + NTAXI_VAL_ATPO

CUR_ANFO  = Y_ANFO  / YCAP_ANFO

VA_VAL_ANRE  = PY_ANRE  * Y_ANRE  - PCI_ANRE  * CI_ANRE

PROG_MAT_ANRE  = PROG_MAT_ANRE(-1)  * ( 1  + GR_PROG_MAT_ANRE )

d(SUBST_n_IM_CIND_AIND)  =  - ES_IM_CIND_AIND  * d(log(PID_CIND_AIND)  - log(PIM_CIND_AIND))

log(PY_ANFO)  = ADJUST0_PY_ANFO  * log(PY_n_ANFO)  + ( 1  - ADJUST0_PY_ANFO )  * ( log(PY_ANFO(-1))  + d(log(PY_e_ANFO)) )

d(SUBST_n_CIM_CNJN_ANFO)  =  - ES_CIM_CNJN_ANFO  * d(log(PCID_CNJN_ANFO)  - log(PCIM_CNJN_ANFO))

log(PY_AIND)  = ADJUST0_PY_AIND  * log(PY_n_AIND)  + ( 1  - ADJUST0_PY_AIND )  * ( log(PY_AIND(-1))  + d(log(PY_e_AIND)) )

F_K_ANRE  = ( 1  - Rdep_ANRE )  * F_K_ANRE(-1)  + IA_ANRE

CIM_CSER_ASER  = phi_CIM_CSER_ASER  * CI_CSER_ASER

CIM_CSER_ANRE  = phi_CIM_CSER_ANRE  * CI_CSER_ANRE

PDS_CTRP  * DS_CTRP  = PDSD_CTRP  * DSD_CTRP  + PDSM_CTRP  * DSM_CTRP

M  = 0  + M_CIND  + M_CTRP  + M_CSER  + M_CNJN  + M_CNJM

phi_GM_CIND  = 1  / ( 1  + @elem(GD_CIND  / GM_CIND , 2000)  * exp(SUBST_GM_CIND) )

VATD_CSER  = @elem(RVATD_CSER , 2000)  * CHD_CSER  / ( 1  + @elem(RVATD_CSER , 2000) )

XD  = 0  + XD_CIND  + XD_CTRP  + XD_CSER  + XD_CNJN  + XD_CNJM

GOS_ATPO  = VA_ATPO  - WAGES_ATPO  - RSSC_ATPO  - NTAXI_ATPO

PRSSC  * RSSC  = 0  + PRSSC_AIND  * RSSC_AIND  + PRSSC_ATPT  * RSSC_ATPT  + PRSSC_ATPO  * RSSC_ATPO  + PRSSC_ASER  * RSSC_ASER  + PRSSC_ANRE  * RSSC_ANRE  + PRSSC_ANFO  * RSSC_ANFO

PDSM  * DSM  = 0  + PDSM_CIND  * DSM_CIND  + PDSM_CTRP  * DSM_CTRP  + PDSM_CSER  * DSM_CSER  + PDSM_CNJN  * DSM_CNJN  + PDSM_CNJM  * DSM_CNJM

phi_K_ANRE  = C_K_ANRE  * F_n_K_ANRE  / ( 0  + C_K_ANRE  * F_n_K_ANRE  + C_L_ANRE  * F_n_L_ANRE  + C_E_ANRE  * F_n_E_ANRE  + C_MAT_ANRE  * F_n_MAT_ANRE )

PDSD  * DSD  = 0  + PDSD_CIND  * DSD_CIND  + PDSD_CTRP  * DSD_CTRP  + PDSD_CSER  * DSD_CSER  + PDSD_CNJN  * DSD_CNJN  + PDSD_CNJM  * DSD_CNJM

CID_CNJN_AIND  = ( 1  - phi_CIM_CNJN_AIND )  * CI_CNJN_AIND

PYQSBVAT_CIND  * YQSBVAT_CIND  = PYQ_CIND  * YQ_CIND  + POTHPTD_CIND  * OTHPTD_CIND  + PSUBPD_CIND  * SUBPD_CIND  + PMGPD_CIND  * MGPD_CIND

WAGES  = 0  + WAGES_AIND  + WAGES_ATPT  + WAGES_ATPO  + WAGES_ASER  + WAGES_ANRE  + WAGES_ANFO

NTAXP_VAL_CTRP  = NTAXPD_VAL_CTRP  + NTAXPM_VAL_CTRP

CID_CIND  = 0  + CID_CIND_AIND  + CID_CIND_ATPT  + CID_CIND_ATPO  + CID_CIND_ASER  + CID_CIND_ANRE  + CID_CIND_ANFO

C_K_ATPT  = PK_ATPT  * ( Rdep_ATPT  + r_ATPT )

PVAT  * VAT  = PVATD  * VATD  + PVATM  * VATM

C_MAT_AIND  = PMAT_AIND

POTHPTD_CTRP  * OTHPTD_CTRP  = ROTHPTD_CTRP  * PYQ_CTRP  * YQ_CTRP

C_K_ATPO  = PK_ATPO  * ( Rdep_ATPO  + r_ATPO )

NTAXI_VAL_AIND  = RNTAXI_AIND  * PY_AIND  * Y_AIND

phi_IM_CIND_AIND  = 1  / ( 1  + @elem(ID_CIND_AIND  / IM_CIND_AIND , 2000)  * exp(SUBST_IM_CIND_AIND) )

d(log(YQSBVAT_CIND))  = d(log(YQ_CIND))

phi_L_ATPO  = C_L_ATPO  * F_n_L_ATPO  / ( 0  + C_K_ATPO  * F_n_K_ATPO  + C_L_ATPO  * F_n_L_ATPO  + C_E_ATPO  * F_n_E_ATPO  + C_MAT_ATPO  * F_n_MAT_ATPO )

CHD_CIND  = ( 1  - phi_CHM_CIND )  * CH_CIND

phi_L_ATPT  = C_L_ATPT  * F_n_L_ATPT  / ( 0  + C_K_ATPT  * F_n_K_ATPT  + C_L_ATPT  * F_n_L_ATPT  + C_E_ATPT  * F_n_E_ATPT  + C_MAT_ATPT  * F_n_MAT_ATPT )

PCI_CIND  * CI_CIND  = PCID_CIND  * CID_CIND  + PCIM_CIND  * CIM_CIND

PCID_ANRE  * CID_ANRE  = 0  + PCID_CIND_ANRE  * CID_CIND_ANRE  + PCID_CTRP_ANRE  * CID_CTRP_ANRE  + PCID_CSER_ANRE  * CID_CSER_ANRE  + PCID_CNJN_ANRE  * CID_CNJN_ANRE  + PCID_CNJM_ANRE  * CID_CNJM_ANRE

NTAXPM_CNJM  = VATM_CNJM  + OTHPTM_CNJM  + SUBPM_CNJM

verif_PMbis_CTRP  = ( PMbis_CTRP  / PM_CTRP  - 1 )  * 100

verif_PMbis_CIND  = ( PMbis_CIND  / PM_CIND  - 1 )  * 100

d(log(F_n_K_ATPO))  = d(log(Y_ATPO))  - d(log(PROG_K_ATPO))  + d(SUBST_F_K_ATPO)

PDSM_CNJN  = PMSBVAT_CNJN

PDSM_CNJM  = PMSBVAT_CNJM

PCIbis  * CIbis  = 0  + PCI_AIND  * CI_AIND  + PCI_ATPT  * CI_ATPT  + PCI_ATPO  * CI_ATPO  + PCI_ASER  * CI_ASER  + PCI_ANRE  * CI_ANRE  + PCI_ANFO  * CI_ANFO

PIM_CIND_ANRE  = PMSBVAT_CIND

d(log(TRSP_AIND))  = d(log(F_MAT_AIND))

PMbis_CSER  * M_CSER  + NTAXPM_VAL_CSER  + PMGPM_CSER  * MGPM_CSER  = PQM_CSER  * QM_CSER

d(log(F_n_K_ATPT))  = d(log(Y_ATPT))  - d(log(PROG_K_ATPT))  + d(SUBST_F_K_ATPT)

CIM_CNJN_ANFO  = phi_CIM_CNJN_ANFO  * CI_CNJN_ANFO

ES_act_MAT_MAT_ATPT  = ES_MAT_MAT_ATPT  - ( C_MAT_ATPT  / PROG_MAT_ATPT  / ( C_MAT_ATPT  / PROG_MAT_ATPT )  / @elem(C_MAT_ATPT  / PROG_MAT_ATPT  / ( C_MAT_ATPT  / PROG_MAT_ATPT ) , 2000) < 0.99999 )  * ( log(F_MAT_ATPT  * PROG_MAT_ATPT  / ( F_MAT_ATPT  * PROG_MAT_ATPT )  / @elem(F_MAT_ATPT  * PROG_MAT_ATPT  / ( F_MAT_ATPT  * PROG_MAT_ATPT ) , 2000))  / log(C_MAT_ATPT  / PROG_MAT_ATPT  / ( C_MAT_ATPT  / PROG_MAT_ATPT )  / @elem(C_MAT_ATPT  / PROG_MAT_ATPT  / ( C_MAT_ATPT  / PROG_MAT_ATPT ) , 2000)  * 1.0000000001)  + ES_MAT_MAT_ATPT )  - ( C_MAT_ATPT  / PROG_MAT_ATPT  / ( C_MAT_ATPT  / PROG_MAT_ATPT )  / @elem(C_MAT_ATPT  / PROG_MAT_ATPT  / ( C_MAT_ATPT  / PROG_MAT_ATPT ) , 2000) > 1.00001 )  * ( log(F_MAT_ATPT  * PROG_MAT_ATPT  / ( F_MAT_ATPT  * PROG_MAT_ATPT )  / @elem(F_MAT_ATPT  * PROG_MAT_ATPT  / ( F_MAT_ATPT  * PROG_MAT_ATPT ) , 2000))  / log(C_MAT_ATPT  / PROG_MAT_ATPT  / ( C_MAT_ATPT  / PROG_MAT_ATPT )  / @elem(C_MAT_ATPT  / PROG_MAT_ATPT  / ( C_MAT_ATPT  / PROG_MAT_ATPT ) , 2000)  * 1.0000000001)  + ES_MAT_MAT_ATPT )

MGRM_CSER  = phi_MGRM_CSER  * MGR_CSER

PI_ANFO  * I_ANFO  = PID_ANFO  * ID_ANFO  + PIM_ANFO  * IM_ANFO

SUBST_CI_CTRP_ASER  = ADJUST6_CI_CTRP_ASER  * SUBST_n_CI_CTRP_ASER  + ( 1  - ADJUST6_CI_CTRP_ASER )  * SUBST_CI_CTRP_ASER(-1)

Y_CNJM_AIND  = PhiY_CNJM_AIND  * YQ_CNJM

SOC_BENF_VAL  = RR_POP  * @elem(W , 2000)  * PROG_L  * P  * POP  + RR_Un  * W  * Un

ES_act_MAT_MAT_ATPO  = ES_MAT_MAT_ATPO  - ( C_MAT_ATPO  / PROG_MAT_ATPO  / ( C_MAT_ATPO  / PROG_MAT_ATPO )  / @elem(C_MAT_ATPO  / PROG_MAT_ATPO  / ( C_MAT_ATPO  / PROG_MAT_ATPO ) , 2000) < 0.99999 )  * ( log(F_MAT_ATPO  * PROG_MAT_ATPO  / ( F_MAT_ATPO  * PROG_MAT_ATPO )  / @elem(F_MAT_ATPO  * PROG_MAT_ATPO  / ( F_MAT_ATPO  * PROG_MAT_ATPO ) , 2000))  / log(C_MAT_ATPO  / PROG_MAT_ATPO  / ( C_MAT_ATPO  / PROG_MAT_ATPO )  / @elem(C_MAT_ATPO  / PROG_MAT_ATPO  / ( C_MAT_ATPO  / PROG_MAT_ATPO ) , 2000)  * 1.0000000001)  + ES_MAT_MAT_ATPO )  - ( C_MAT_ATPO  / PROG_MAT_ATPO  / ( C_MAT_ATPO  / PROG_MAT_ATPO )  / @elem(C_MAT_ATPO  / PROG_MAT_ATPO  / ( C_MAT_ATPO  / PROG_MAT_ATPO ) , 2000) > 1.00001 )  * ( log(F_MAT_ATPO  * PROG_MAT_ATPO  / ( F_MAT_ATPO  * PROG_MAT_ATPO )  / @elem(F_MAT_ATPO  * PROG_MAT_ATPO  / ( F_MAT_ATPO  * PROG_MAT_ATPO ) , 2000))  / log(C_MAT_ATPO  / PROG_MAT_ATPO  / ( C_MAT_ATPO  / PROG_MAT_ATPO )  / @elem(C_MAT_ATPO  / PROG_MAT_ATPO  / ( C_MAT_ATPO  / PROG_MAT_ATPO ) , 2000)  * 1.0000000001)  + ES_MAT_MAT_ATPO )

PIM_ASER  * IM_ASER  = 0  + PIM_CIND_ASER  * IM_CIND_ASER  + PIM_CSER_ASER  * IM_CSER_ASER

PDSD_CIND  = PYQSBVAT_CIND

PGDP_CIND  * GDP_CIND  = PCH_CIND  * CH_CIND  + PG_CIND  * G_CIND  + PI_CIND  * I_CIND  + PX_CIND  * X_CIND  + PDS_CIND  * DS_CIND  - PM_CIND  * M_CIND

MGPD  = 0  + MGPD_CIND  + MGPD_CNJN  + MGPD_CNJM

ES_act_GM_CNJN  = ES_GM_CNJN  - ( PGD_CNJN  / PGM_CNJN < 0.99999 )  * ( log(GD_CNJN  / GM_CNJN  / @elem(GD_CNJN  / GM_CNJN , 2000))  / log(PGD_CNJN  / PGM_CNJN  * 1.0000000001)  + ES_GM_CNJN )  - ( PGD_CNJN  / PGM_CNJN > 1.00001 )  * ( log(GD_CNJN  / GM_CNJN  / @elem(GD_CNJN  / GM_CNJN , 2000))  / log(PGD_CNJN  / PGM_CNJN  * 1.0000000001)  + ES_GM_CNJN )

NOS_ATPO  = GOS_ATPO  - @elem(PK_ATPO(-1) , 2000)  * Rdep_ATPO  * F_K_ATPO(-1)

MGPM  = 0  + MGPM_CIND  + MGPM_CNJN  + MGPM_CNJM

( 1  + MARKUP_CSER )  = PYQ_CSER  * YQ_CSER  / ( 0  + CU_AIND  * Y_CSER_AIND  + CU_ATPT  * Y_CSER_ATPT  + CU_ASER  * Y_CSER_ASER  + CU_ANRE  * Y_CSER_ANRE )

d(SUBST_n_F_L_ANFO)  = 0  +  - ES_L_K_ANFO  * phi_K_ANFO(-1)  * d(log(C_L_ANFO  / PROG_L_ANFO)  - log(C_K_ANFO  / PROG_K_ANFO))  +  - ES_L_L_ANFO  * phi_L_ANFO(-1)  * d(log(C_L_ANFO  / PROG_L_ANFO)  - log(C_L_ANFO  / PROG_L_ANFO))  +  - ES_L_E_ANFO  * phi_E_ANFO(-1)  * d(log(C_L_ANFO  / PROG_L_ANFO)  - log(C_E_ANFO  / PROG_E_ANFO))  +  - ES_L_MAT_ANFO  * phi_MAT_ANFO(-1)  * d(log(C_L_ANFO  / PROG_L_ANFO)  - log(C_MAT_ANFO  / PROG_MAT_ANFO))

SUBST_F_MAT_ATPT  = ADJUST6_F_MAT_ATPT  * SUBST_n_F_MAT_ATPT  + ( 1  - ADJUST6_F_MAT_ATPT )  * SUBST_F_MAT_ATPT(-1)

SUBST_MGPD_CSER_CIND  = ADJUST6_MGPD_CSER_CIND  * SUBST_n_MGPD_CSER_CIND  + ( 1  - ADJUST6_MGPD_CSER_CIND )  * SUBST_MGPD_CSER_CIND(-1)

SUBST_F_MAT_ATPO  = ADJUST6_F_MAT_ATPO  * SUBST_n_F_MAT_ATPO  + ( 1  - ADJUST6_F_MAT_ATPO )  * SUBST_F_MAT_ATPO(-1)

ES_act_XM_CTRP  = ES_XM_CTRP  - ( PXD_CTRP  / PXM_CTRP < 0.99999 )  * ( log(XD_CTRP  / XM_CTRP  / @elem(XD_CTRP  / XM_CTRP , 2000))  / log(PXD_CTRP  / PXM_CTRP  * 1.0000000001)  + ES_XM_CTRP )  - ( PXD_CTRP  / PXM_CTRP > 1.00001 )  * ( log(XD_CTRP  / XM_CTRP  / @elem(XD_CTRP  / XM_CTRP , 2000))  / log(PXD_CTRP  / PXM_CTRP  * 1.0000000001)  + ES_XM_CTRP )

PCID_CNJM_ANRE  = PYQSBVAT_CNJM

PCIM_CIND  * CIM_CIND  = 0  + PCIM_CIND_AIND  * CIM_CIND_AIND  + PCIM_CIND_ATPT  * CIM_CIND_ATPT  + PCIM_CIND_ATPO  * CIM_CIND_ATPO  + PCIM_CIND_ASER  * CIM_CIND_ASER  + PCIM_CIND_ANRE  * CIM_CIND_ANRE  + PCIM_CIND_ANFO  * CIM_CIND_ANFO

d(SUBST_n_MGRM_CSER)  =  - ES_MGRM_CSER  * d(log(PMGRD_CSER)  - log(PMGRM_CSER))

log(F_E_ANFO)  = ADJUST0_F_E_ANFO  * log(F_n_E_ANFO)  + ( 1  - ADJUST0_F_E_ANFO )  * ( log(F_E_ANFO(-1))  + d(log(F_e_E_ANFO)) )

PMGRbis_CSER  * MGRbis_CSER  = PMGRD_CSER  * MGRD_CSER  + PMGRM_CSER  * MGRM_CSER

d(log(phi_MCH_CIND))  = ( 1  - ES_LESCES )  * d(log(PCH_CIND  / PCH_CES))

IM_CSER_AIND  = phi_IM_CSER_AIND  * I_CSER_AIND

SUBST_CI_CNJM_ASER  = ADJUST6_CI_CNJM_ASER  * SUBST_n_CI_CNJM_ASER  + ( 1  - ADJUST6_CI_CNJM_ASER )  * SUBST_CI_CNJM_ASER(-1)

RNTAXPM_CSER  = NTAXPM_VAL_CSER  / ( PM_CSER  * M_CSER )

PXD_CTRP  = PYQSBVAT_CTRP

verif_phi_F_ASER  = ( 1  - ( 0  + phi_K_ASER  + phi_L_ASER  + phi_E_ASER  + phi_MAT_ASER ) )  * 100

CHM_CIND  = phi_CHM_CIND  * CH_CIND

d(SUBST_n_IM_CIND_ATPO)  =  - ES_IM_CIND_ATPO  * d(log(PID_CIND_ATPO)  - log(PIM_CIND_ATPO))

PMGP_CSER_CNJN  * MGP_CSER_CNJN  = PMGPD_CSER_CNJN  * MGPD_CSER_CNJN  + PMGPM_CSER_CNJN  * MGPM_CSER_CNJN

Bal_Trade_VAL_CSER  = PX_CSER  * X_CSER  - PM_CSER  * M_CSER

PI_ATPT  * I_ATPT  = PID_ATPT  * ID_ATPT  + PIM_ATPT  * IM_ATPT

d(SUBST_n_IM_CIND_ATPT)  =  - ES_IM_CIND_ATPT  * d(log(PID_CIND_ATPT)  - log(PIM_CIND_ATPT))

d(log(CH_e_CNJM))  = ADJUST1_CH_CNJM  * d(log(CH_e_CNJM(-1)))  + ADJUST2_CH_CNJM  * d(log(CH_CNJM(-1)))  + ADJUST3_CH_CNJM  * d(log(CH_n_CNJM))

d(log(CH_e_CNJN))  = ADJUST1_CH_CNJN  * d(log(CH_e_CNJN(-1)))  + ADJUST2_CH_CNJN  * d(log(CH_CNJN(-1)))  + ADJUST3_CH_CNJN  * d(log(CH_n_CNJN))

SUBST_IM_CIND_ANFO  = ADJUST6_IM_CIND_ANFO  * SUBST_n_IM_CIND_ANFO  + ( 1  - ADJUST6_IM_CIND_ANFO )  * SUBST_IM_CIND_ANFO(-1)

verif_phi_TRSP_ATPT  = ( 1  - ( 0  + phi_TRSP_CTRP_ATPT ) )  * 100

SUBST_F_MAT_ANFO  = ADJUST6_F_MAT_ANFO  * SUBST_n_F_MAT_ANFO  + ( 1  - ADJUST6_F_MAT_ANFO )  * SUBST_F_MAT_ANFO(-1)

PYQS_CIND  * YQS_CIND  = PYQ_CIND  * YQ_CIND  + PMGPD_CIND  * MGPD_CIND  + NTAXPD_VAL_CIND

PCHM_CIND  = PMSBVAT_CIND  * ( 1  + RVATM_CIND )  / ( 1  + @elem(RVATM_CIND , 2000) )

verif_phi_TRSP_ATPO  = ( 1  - ( 0  + phi_TRSP_CTRP_ATPO ) )  * 100

SUBST_CI_CNJM_ANFO  = ADJUST6_CI_CNJM_ANFO  * SUBST_n_CI_CNJM_ANFO  + ( 1  - ADJUST6_CI_CNJM_ANFO )  * SUBST_CI_CNJM_ANFO(-1)

PDSD_CSER  = PYQSBVAT_CSER

d(log(F_e_MAT_ANFO))  = ADJUST1_F_MAT_ANFO  * d(log(F_e_MAT_ANFO(-1)))  + ADJUST2_F_MAT_ANFO  * d(log(F_MAT_ANFO(-1)))  + ADJUST3_F_MAT_ANFO  * d(log(F_n_MAT_ANFO))

PCI_ANRE  * CI_ANRE  = PCID_ANRE  * CID_ANRE  + PCIM_ANRE  * CIM_ANRE

phi_CIM_CSER_ATPT  = 1  / ( 1  + @elem(CID_CSER_ATPT  / CIM_CSER_ATPT , 2000)  * exp(SUBST_CIM_CSER_ATPT) )

phi_CIM_CSER_ATPO  = 1  / ( 1  + @elem(CID_CSER_ATPO  / CIM_CSER_ATPO , 2000)  * exp(SUBST_CIM_CSER_ATPO) )

NOS_VAL_ANFO  = GOS_VAL_ANFO  - PK_ANFO(-1)  * Rdep_ANFO  * F_K_ANFO(-1)

PYQbis_CIND  * YQ_CIND  + NTAXPD_VAL_CIND  + PMGPD_CIND  * MGPD_CIND  = PQD_CIND  * QD_CIND

phi_IM_CSER_ASER  = 1  / ( 1  + @elem(ID_CSER_ASER  / IM_CSER_ASER , 2000)  * exp(SUBST_IM_CSER_ASER) )

PCI_CTRP_ASER  * CI_CTRP_ASER  = PCID_CTRP_ASER  * CID_CTRP_ASER  + PCIM_CTRP_ASER  * CIM_CTRP_ASER

verif_Mbis_CNJM  = ( Mbis_CNJM  / M_CNJM  - 1 )  * 100

verif_Mbis_CNJN  = ( Mbis_CNJN  / M_CNJN  - 1 )  * 100

CU_ANFO  * Y_ANFO  = 0  + C_K_ANFO  * F_K_ANFO  + C_L_ANFO  * F_L_ANFO  + C_E_ANFO  * F_E_ANFO  + C_MAT_ANFO  * F_MAT_ANFO  + NTAXI_VAL_ANFO

d(SUBST_n_XM_CTRP)  =  - ES_XM_CTRP  * d(log(PXD_CTRP)  - log(PXM_CTRP))

phi_IM_CIND_ATPO  = 1  / ( 1  + @elem(ID_CIND_ATPO  / IM_CIND_ATPO , 2000)  * exp(SUBST_IM_CIND_ATPO) )

Y_CNJM_ANFO  = PhiY_CNJM_ANFO  * YQ_CNJM

VATD_CTRP  = @elem(RVATD_CTRP , 2000)  * CHD_CTRP  / ( 1  + @elem(RVATD_CTRP , 2000) )

ES_act_L_E_ATPT  = ES_L_E_ATPT  - ( C_L_ATPT  / PROG_L_ATPT  / ( C_E_ATPT  / PROG_E_ATPT )  / @elem(C_L_ATPT  / PROG_L_ATPT  / ( C_E_ATPT  / PROG_E_ATPT ) , 2000) < 0.99999 )  * ( log(F_L_ATPT  * PROG_L_ATPT  / ( F_E_ATPT  * PROG_E_ATPT )  / @elem(F_L_ATPT  * PROG_L_ATPT  / ( F_E_ATPT  * PROG_E_ATPT ) , 2000))  / log(C_L_ATPT  / PROG_L_ATPT  / ( C_E_ATPT  / PROG_E_ATPT )  / @elem(C_L_ATPT  / PROG_L_ATPT  / ( C_E_ATPT  / PROG_E_ATPT ) , 2000)  * 1.0000000001)  + ES_L_E_ATPT )  - ( C_L_ATPT  / PROG_L_ATPT  / ( C_E_ATPT  / PROG_E_ATPT )  / @elem(C_L_ATPT  / PROG_L_ATPT  / ( C_E_ATPT  / PROG_E_ATPT ) , 2000) > 1.00001 )  * ( log(F_L_ATPT  * PROG_L_ATPT  / ( F_E_ATPT  * PROG_E_ATPT )  / @elem(F_L_ATPT  * PROG_L_ATPT  / ( F_E_ATPT  * PROG_E_ATPT ) , 2000))  / log(C_L_ATPT  / PROG_L_ATPT  / ( C_E_ATPT  / PROG_E_ATPT )  / @elem(C_L_ATPT  / PROG_L_ATPT  / ( C_E_ATPT  / PROG_E_ATPT ) , 2000)  * 1.0000000001)  + ES_L_E_ATPT )

ES_act_L_E_ATPO  = ES_L_E_ATPO  - ( C_L_ATPO  / PROG_L_ATPO  / ( C_E_ATPO  / PROG_E_ATPO )  / @elem(C_L_ATPO  / PROG_L_ATPO  / ( C_E_ATPO  / PROG_E_ATPO ) , 2000) < 0.99999 )  * ( log(F_L_ATPO  * PROG_L_ATPO  / ( F_E_ATPO  * PROG_E_ATPO )  / @elem(F_L_ATPO  * PROG_L_ATPO  / ( F_E_ATPO  * PROG_E_ATPO ) , 2000))  / log(C_L_ATPO  / PROG_L_ATPO  / ( C_E_ATPO  / PROG_E_ATPO )  / @elem(C_L_ATPO  / PROG_L_ATPO  / ( C_E_ATPO  / PROG_E_ATPO ) , 2000)  * 1.0000000001)  + ES_L_E_ATPO )  - ( C_L_ATPO  / PROG_L_ATPO  / ( C_E_ATPO  / PROG_E_ATPO )  / @elem(C_L_ATPO  / PROG_L_ATPO  / ( C_E_ATPO  / PROG_E_ATPO ) , 2000) > 1.00001 )  * ( log(F_L_ATPO  * PROG_L_ATPO  / ( F_E_ATPO  * PROG_E_ATPO )  / @elem(F_L_ATPO  * PROG_L_ATPO  / ( F_E_ATPO  * PROG_E_ATPO ) , 2000))  / log(C_L_ATPO  / PROG_L_ATPO  / ( C_E_ATPO  / PROG_E_ATPO )  / @elem(C_L_ATPO  / PROG_L_ATPO  / ( C_E_ATPO  / PROG_E_ATPO ) , 2000)  * 1.0000000001)  + ES_L_E_ATPO )

d(SUBST_n_XM_CNJN)  =  - ES_XM_CNJN  * d(log(PXD_CNJN)  - log(PXM_CNJN))

d(SUBST_n_XM_CNJM)  =  - ES_XM_CNJM  * d(log(PXD_CNJM)  - log(PXM_CNJM))

PQ_CIND  * Q_CIND  = PQD_CIND  * QD_CIND  + PQM_CIND  * QM_CIND

CIM_CSER_ATPT  = phi_CIM_CSER_ATPT  * CI_CSER_ATPT

WAGES_ATPT  * PWAGES_ATPT  = W_ATPT  * F_L_ATPT

CID_ANRE  = 0  + CID_CIND_ANRE  + CID_CTRP_ANRE  + CID_CSER_ANRE  + CID_CNJN_ANRE  + CID_CNJM_ANRE

PROG_E_ANRE  = PROG_E_ANRE(-1)  * ( 1  + GR_PROG_E_ANRE )

CIM_CSER_ATPO  = phi_CIM_CSER_ATPO  * CI_CSER_ATPO

OTHPTM_CTRP  = @elem(ROTHPTM_CTRP , 2000)  * M_CTRP

d(log(I_CIND_ANFO))  = d(log(IA_ANFO))

MGR_CTRP  = 0  + MGP_CTRP_CIND  + MGP_CTRP_CNJN  + MGP_CTRP_CNJM

phi_K_ANFO  = C_K_ANFO  * F_n_K_ANFO  / ( 0  + C_K_ANFO  * F_n_K_ANFO  + C_L_ANFO  * F_n_L_ANFO  + C_E_ANFO  * F_n_E_ANFO  + C_MAT_ANFO  * F_n_MAT_ANFO )

RSSC_ATPT  * PRSSC_ATPT  = W_ATPT  * F_L_ATPT  * RRSSC_ATPT

d(log(F_e_MAT_ATPT))  = ADJUST1_F_MAT_ATPT  * d(log(F_e_MAT_ATPT(-1)))  + ADJUST2_F_MAT_ATPT  * d(log(F_MAT_ATPT(-1)))  + ADJUST3_F_MAT_ATPT  * d(log(F_n_MAT_ATPT))

PCI_CSER_ATPT  * CI_CSER_ATPT  = PCID_CSER_ATPT  * CID_CSER_ATPT  + PCIM_CSER_ATPT  * CIM_CSER_ATPT

( 1  + MARKUP_CNJN )  = PYQ_CNJN  * YQ_CNJN  / ( 0  + CU_ASER  * Y_CNJN_ASER  + CU_ANRE  * Y_CNJN_ANRE  + CU_ANFO  * Y_CNJN_ANFO )

d(log(F_e_MAT_ATPO))  = ADJUST1_F_MAT_ATPO  * d(log(F_e_MAT_ATPO(-1)))  + ADJUST2_F_MAT_ATPO  * d(log(F_MAT_ATPO(-1)))  + ADJUST3_F_MAT_ATPO  * d(log(F_n_MAT_ATPO))

RSSC_ATPO  * PRSSC_ATPO  = W_ATPO  * F_L_ATPO  * RRSSC_ATPO

PCIM_CNJM_AIND  = PMSBVAT_CNJM

Y_CIND_AIND  = PhiY_CIND_AIND  * YQ_CIND

d(log(MSBVAT_CTRP))  = d(log(M_CTRP))

Bal_G_Tot_VAL  = Bal_G_Prim_VAL  - DEBT_G_VAL(-1)  * r_DEBT_G(-1)

RNTAXPM_CIND  = NTAXPM_VAL_CIND  / ( PM_CIND  * M_CIND )

Bal_Trade_VAL_CIND  = PX_CIND  * X_CIND  - PM_CIND  * M_CIND

CHD_CNJN  = ( 1  - phi_CHM_CNJN )  * CH_CNJN

d(SUBST_n_GM_CNJN)  =  - ES_GM_CNJN  * d(log(PGD_CNJN)  - log(PGM_CNJN))

d(PARTR_n)  = d(PARTR_trend)  - RHO_PART_UnR  * d(UnR)

d(SUBST_n_F_K_ATPO)  = 0  +  - ES_K_K_ATPO  * phi_K_ATPO(-1)  * d(log(C_K_ATPO  / PROG_K_ATPO)  - log(C_K_ATPO  / PROG_K_ATPO))  +  - ES_K_L_ATPO  * phi_L_ATPO(-1)  * d(log(C_K_ATPO  / PROG_K_ATPO)  - log(C_L_ATPO  / PROG_L_ATPO))  +  - ES_K_E_ATPO  * phi_E_ATPO(-1)  * d(log(C_K_ATPO  / PROG_K_ATPO)  - log(C_E_ATPO  / PROG_E_ATPO))  +  - ES_K_MAT_ATPO  * phi_MAT_ATPO(-1)  * d(log(C_K_ATPO  / PROG_K_ATPO)  - log(C_MAT_ATPO  / PROG_MAT_ATPO))

d(SUBST_n_F_K_ATPT)  = 0  +  - ES_K_K_ATPT  * phi_K_ATPT(-1)  * d(log(C_K_ATPT  / PROG_K_ATPT)  - log(C_K_ATPT  / PROG_K_ATPT))  +  - ES_K_L_ATPT  * phi_L_ATPT(-1)  * d(log(C_K_ATPT  / PROG_K_ATPT)  - log(C_L_ATPT  / PROG_L_ATPT))  +  - ES_K_E_ATPT  * phi_E_ATPT(-1)  * d(log(C_K_ATPT  / PROG_K_ATPT)  - log(C_E_ATPT  / PROG_E_ATPT))  +  - ES_K_MAT_ATPT  * phi_MAT_ATPT(-1)  * d(log(C_K_ATPT  / PROG_K_ATPT)  - log(C_MAT_ATPT  / PROG_MAT_ATPT))

ES_act_E_E_ATPT  = ES_E_E_ATPT  - ( C_E_ATPT  / PROG_E_ATPT  / ( C_E_ATPT  / PROG_E_ATPT )  / @elem(C_E_ATPT  / PROG_E_ATPT  / ( C_E_ATPT  / PROG_E_ATPT ) , 2000) < 0.99999 )  * ( log(F_E_ATPT  * PROG_E_ATPT  / ( F_E_ATPT  * PROG_E_ATPT )  / @elem(F_E_ATPT  * PROG_E_ATPT  / ( F_E_ATPT  * PROG_E_ATPT ) , 2000))  / log(C_E_ATPT  / PROG_E_ATPT  / ( C_E_ATPT  / PROG_E_ATPT )  / @elem(C_E_ATPT  / PROG_E_ATPT  / ( C_E_ATPT  / PROG_E_ATPT ) , 2000)  * 1.0000000001)  + ES_E_E_ATPT )  - ( C_E_ATPT  / PROG_E_ATPT  / ( C_E_ATPT  / PROG_E_ATPT )  / @elem(C_E_ATPT  / PROG_E_ATPT  / ( C_E_ATPT  / PROG_E_ATPT ) , 2000) > 1.00001 )  * ( log(F_E_ATPT  * PROG_E_ATPT  / ( F_E_ATPT  * PROG_E_ATPT )  / @elem(F_E_ATPT  * PROG_E_ATPT  / ( F_E_ATPT  * PROG_E_ATPT ) , 2000))  / log(C_E_ATPT  / PROG_E_ATPT  / ( C_E_ATPT  / PROG_E_ATPT )  / @elem(C_E_ATPT  / PROG_E_ATPT  / ( C_E_ATPT  / PROG_E_ATPT ) , 2000)  * 1.0000000001)  + ES_E_E_ATPT )

PCID_CNJN_AIND  = PYQSBVAT_CNJN

PIM  * IM  = 0  + PIM_CIND  * IM_CIND  + PIM_CSER  * IM_CSER

WAGES_ATPO  * PWAGES_ATPO  = W_ATPO  * F_L_ATPO

PCIM_CIND_ANFO  = PMSBVAT_CIND

PID  * ID  = 0  + PID_CIND  * ID_CIND  + PID_CSER  * ID_CSER

d(SUBST_n_IM_CSER_ANFO)  =  - ES_IM_CSER_ANFO  * d(log(PID_CSER_ANFO)  - log(PIM_CSER_ANFO))

SUBST_CIM_CTRP_ASER  = ADJUST6_CIM_CTRP_ASER  * SUBST_n_CIM_CTRP_ASER  + ( 1  - ADJUST6_CIM_CTRP_ASER )  * SUBST_CIM_CTRP_ASER(-1)

verif_phi_F_ATPT  = ( 1  - ( 0  + phi_K_ATPT  + phi_L_ATPT  + phi_E_ATPT  + phi_MAT_ATPT ) )  * 100

d(log(F_e_E_ATPO))  = ADJUST1_F_E_ATPO  * d(log(F_e_E_ATPO(-1)))  + ADJUST2_F_E_ATPO  * d(log(F_E_ATPO(-1)))  + ADJUST3_F_E_ATPO  * d(log(F_n_E_ATPO))

d(log(F_e_E_ATPT))  = ADJUST1_F_E_ATPT  * d(log(F_e_E_ATPT(-1)))  + ADJUST2_F_E_ATPT  * d(log(F_E_ATPT(-1)))  + ADJUST3_F_E_ATPT  * d(log(F_n_E_ATPT))

verif_phi_F_ATPO  = ( 1  - ( 0  + phi_K_ATPO  + phi_L_ATPO  + phi_E_ATPO  + phi_MAT_ATPO ) )  * 100

phi_E_CNJN_ATPO  = PCI_CNJN_ATPO  * CI_CNJN_ATPO  / ( 0  + PCI_CNJN_ATPO  * CI_CNJN_ATPO  + PCI_CNJM_ATPO  * CI_CNJM_ATPO )

GOS_ANRE  = VA_ANRE  - WAGES_ANRE  - RSSC_ANRE  - NTAXI_ANRE

d(log(CI_CNJN_AIND))  = d(log(F_E_AIND))  + d(SUBST_CI_CNJN_AIND)

PMbis_CTRP  * M_CTRP  + NTAXPM_VAL_CTRP  + PMGPM_CTRP  * MGPM_CTRP  = PQM_CTRP  * QM_CTRP

RNTAXPD_CNJN  = NTAXPD_VAL_CNJN  / ( PYQ_CNJN  * YQ_CNJN )

RNTAXPD_CNJM  = NTAXPD_VAL_CNJM  / ( PYQ_CNJM  * YQ_CNJM )

d(log(F_e_L_AIND))  = ADJUST1_F_L_AIND  * d(log(F_e_L_AIND(-1)))  + ADJUST2_F_L_AIND  * d(log(F_L_AIND(-1)))  + ADJUST3_F_L_AIND  * d(log(F_n_L_AIND))

d(SUBST_n_CIM_CNJM_ASER)  =  - ES_CIM_CNJM_ASER  * d(log(PCID_CNJM_ASER)  - log(PCIM_CNJM_ASER))

XD_CNJM  = ( 1  - phi_XM_CNJM )  * X_CNJM

PYQ_CSER  * YQ_CSER  = 0  + PY_AIND  * Y_CSER_AIND  + PY_ATPT  * Y_CSER_ATPT  + PY_ASER  * Y_CSER_ASER  + PY_ANRE  * Y_CSER_ANRE

XD_CNJN  = ( 1  - phi_XM_CNJN )  * X_CNJN

SUBST_n_MGPD_CTRP_CNJM  = 0  +  - ES_MGPD_CTRP_CTRP_CNJM  * phi_MGPD_CTRP_CNJM(-1)  * d(log(PMGPD_CTRP_CNJM)  - log(PMGPD_CTRP_CNJM))  +  - ES_MGPD_CTRP_CSER_CNJM  * phi_MGPD_CSER_CNJM(-1)  * d(log(PMGPD_CTRP_CNJM)  - log(PMGPD_CSER_CNJM))

PCIM_CIND_ASER  = PMSBVAT_CIND

SUBST_GM_CTRP  = ADJUST6_GM_CTRP  * SUBST_n_GM_CTRP  + ( 1  - ADJUST6_GM_CTRP )  * SUBST_GM_CTRP(-1)

CID_CTRP  = 0  + CID_CTRP_AIND  + CID_CTRP_ATPT  + CID_CTRP_ATPO  + CID_CTRP_ASER  + CID_CTRP_ANRE  + CID_CTRP_ANFO

SUBST_GM_CIND  = ADJUST6_GM_CIND  * SUBST_n_GM_CIND  + ( 1  - ADJUST6_GM_CIND )  * SUBST_GM_CIND(-1)

SUBPD_CNJM  = @elem(RSUBPD_CNJM , 2000)  * YQ_CNJM

NTAXI_ATPT  = @elem(RNTAXI_ATPT , 2000)  * Y_ATPT

SUBST_XM_CIND  = ADJUST6_XM_CIND  * SUBST_n_XM_CIND  + ( 1  - ADJUST6_XM_CIND )  * SUBST_XM_CIND(-1)

PMGRM_CTRP  = PMSBVAT_CTRP

NTAXI_ATPO  = @elem(RNTAXI_ATPO , 2000)  * Y_ATPO

d(log(CI_CSER_ATPT))  = d(log(F_MAT_ATPT))

PROG_K_AIND  = PROG_K_AIND(-1)  * ( 1  + GR_PROG_K_AIND )

NTAXPD_VAL_CNJN  = PVATD_CNJN  * VATD_CNJN  + POTHPTD_CNJN  * OTHPTD_CNJN  + PSUBPD_CNJN  * SUBPD_CNJN

RSSC_ANFO  * PRSSC_ANFO  = W_ANFO  * F_L_ANFO  * RRSSC_ANFO

phi_CIM_CSER_ASER  = 1  / ( 1  + @elem(CID_CSER_ASER  / CIM_CSER_ASER , 2000)  * exp(SUBST_CIM_CSER_ASER) )

PCID_ASER  * CID_ASER  = 0  + PCID_CIND_ASER  * CID_CIND_ASER  + PCID_CTRP_ASER  * CID_CTRP_ASER  + PCID_CSER_ASER  * CID_CSER_ASER  + PCID_CNJN_ASER  * CID_CNJN_ASER  + PCID_CNJM_ASER  * CID_CNJM_ASER

d(log(CI_CSER_ATPO))  = d(log(F_MAT_ATPO))

log(F_L_ATPT)  = ADJUST0_F_L_ATPT  * log(F_n_L_ATPT)  + ( 1  - ADJUST0_F_L_ATPT )  * ( log(F_L_ATPT(-1))  + d(log(F_e_L_ATPT)) )

Verif_PGDP4  = ( PGDP4  / PGDP  - 1 )  * 100

d(log(empl))  = d(log(F_L))

d(SUBST_n_CI_CNJN_AIND)  = 0  +  - ES_NRJ_CNJN_CNJN_AIND  * phi_E_CNJN_AIND  * d(log(PCI_CNJN_AIND)  - log(PCI_CNJN_AIND))  +  - ES_NRJ_CNJN_CNJM_AIND  * phi_E_CNJM_AIND  * d(log(PCI_CNJN_AIND)  - log(PCI_CNJM_AIND))

PDSD_CTRP  = PYQSBVAT_CTRP

log(F_L_ATPO)  = ADJUST0_F_L_ATPO  * log(F_n_L_ATPO)  + ( 1  - ADJUST0_F_L_ATPO )  * ( log(F_L_ATPO(-1))  + d(log(F_e_L_ATPO)) )

SUBST_MGRM_CTRP  = ADJUST6_MGRM_CTRP  * SUBST_n_MGRM_CTRP  + ( 1  - ADJUST6_MGRM_CTRP )  * SUBST_MGRM_CTRP(-1)

phi_L_ANFO  = C_L_ANFO  * F_n_L_ANFO  / ( 0  + C_K_ANFO  * F_n_K_ANFO  + C_L_ANFO  * F_n_L_ANFO  + C_E_ANFO  * F_n_E_ANFO  + C_MAT_ANFO  * F_n_MAT_ANFO )

PWAGES  * WAGES  = 0  + PWAGES_AIND  * WAGES_AIND  + PWAGES_ATPT  * WAGES_ATPT  + PWAGES_ATPO  * WAGES_ATPO  + PWAGES_ASER  * WAGES_ASER  + PWAGES_ANRE  * WAGES_ANRE  + PWAGES_ANFO  * WAGES_ANFO

Mbis_CSER  + NTAXPM_CSER  + MGPM_CSER  = QM_CSER

PGDP_CNJN  * GDP_CNJN  = PCH_CNJN  * CH_CNJN  + PG_CNJN  * G_CNJN  + PI_CNJN  * I_CNJN  + PX_CNJN  * X_CNJN  + PDS_CNJN  * DS_CNJN  - PM_CNJN  * M_CNJN

PGDP_CNJM  * GDP_CNJM  = PCH_CNJM  * CH_CNJM  + PG_CNJM  * G_CNJM  + PI_CNJM  * I_CNJM  + PX_CNJM  * X_CNJM  + PDS_CNJM  * DS_CNJM  - PM_CNJM  * M_CNJM

SUBST_CHM_CTRP  = ADJUST6_CHM_CTRP  * SUBST_n_CHM_CTRP  + ( 1  - ADJUST6_CHM_CTRP )  * SUBST_CHM_CTRP(-1)

WAGES_ASER  * PWAGES_ASER  = W_ASER  * F_L_ASER

CID_CIND_ASER  = ( 1  - phi_CIM_CIND_ASER )  * CI_CIND_ASER

NTAXPD_VAL_CIND  = PVATD_CIND  * VATD_CIND  + POTHPTD_CIND  * OTHPTD_CIND  + PSUBPD_CIND  * SUBPD_CIND

GDP  = CH  + G  + I  + X  + DS  - M

d(SUBST_n_CI_CTRP_AIND)  = 0  +  - ES_TRSP_CTRP_CTRP_AIND  * phi_TRSP_CTRP_AIND  * d(log(PCI_CTRP_AIND)  - log(PCI_CTRP_AIND))

Verif_PCH_CES  = ( PCH  / PCH_CES  - 1 )  * 100

C_K_ANFO  = PK_ANFO  * ( Rdep_ANFO  + r_ANFO )

ES_act_L_MAT_ASER  = ES_L_MAT_ASER  - ( C_L_ASER  / PROG_L_ASER  / ( C_MAT_ASER  / PROG_MAT_ASER )  / @elem(C_L_ASER  / PROG_L_ASER  / ( C_MAT_ASER  / PROG_MAT_ASER ) , 2000) < 0.99999 )  * ( log(F_L_ASER  * PROG_L_ASER  / ( F_MAT_ASER  * PROG_MAT_ASER )  / @elem(F_L_ASER  * PROG_L_ASER  / ( F_MAT_ASER  * PROG_MAT_ASER ) , 2000))  / log(C_L_ASER  / PROG_L_ASER  / ( C_MAT_ASER  / PROG_MAT_ASER )  / @elem(C_L_ASER  / PROG_L_ASER  / ( C_MAT_ASER  / PROG_MAT_ASER ) , 2000)  * 1.0000000001)  + ES_L_MAT_ASER )  - ( C_L_ASER  / PROG_L_ASER  / ( C_MAT_ASER  / PROG_MAT_ASER )  / @elem(C_L_ASER  / PROG_L_ASER  / ( C_MAT_ASER  / PROG_MAT_ASER ) , 2000) > 1.00001 )  * ( log(F_L_ASER  * PROG_L_ASER  / ( F_MAT_ASER  * PROG_MAT_ASER )  / @elem(F_L_ASER  * PROG_L_ASER  / ( F_MAT_ASER  * PROG_MAT_ASER ) , 2000))  / log(C_L_ASER  / PROG_L_ASER  / ( C_MAT_ASER  / PROG_MAT_ASER )  / @elem(C_L_ASER  / PROG_L_ASER  / ( C_MAT_ASER  / PROG_MAT_ASER ) , 2000)  * 1.0000000001)  + ES_L_MAT_ASER )

log(CH_CTRP)  = ADJUST0_CH_CTRP  * log(CH_n_CTRP)  + ( 1  - ADJUST0_CH_CTRP )  * ( log(CH_CTRP(-1))  + d(log(CH_e_CTRP)) )

d(log(F_n_K_ASER))  = d(log(Y_ASER))  - d(log(PROG_K_ASER))  + d(SUBST_F_K_ASER)

SUBST_n_MGPM_CTRP_CIND  = 0  +  - ES_MGPM_CTRP_CTRP_CIND  * phi_MGPM_CTRP_CIND(-1)  * d(log(PMGPM_CTRP_CIND)  - log(PMGPM_CTRP_CIND))  +  - ES_MGPM_CTRP_CSER_CIND  * phi_MGPM_CSER_CIND(-1)  * d(log(PMGPM_CTRP_CIND)  - log(PMGPM_CSER_CIND))

SUBST_CI_CNJN_ASER  = ADJUST6_CI_CNJN_ASER  * SUBST_n_CI_CNJN_ASER  + ( 1  - ADJUST6_CI_CNJN_ASER )  * SUBST_CI_CNJN_ASER(-1)

d(log(W_n_AIND))  = RHO_W_Cons_AIND  + RHO_W_P_AIND  * d(log(P))  + RHO_W_Pe_AIND  * d(log(P_e))  + RHO_W_PROG_AIND  * d(log(PROG_L_AIND))  - RHO_W_U_AIND  * ( UnR  - DNAIRU )  - RHO_W_DU_AIND  * d(UnR)  + RHO_W_L_AIND  * d(log(F_L_AIND)  - log(F_L))

phi_MAT_ATPT  = C_MAT_ATPT  * F_n_MAT_ATPT  / ( 0  + C_K_ATPT  * F_n_K_ATPT  + C_L_ATPT  * F_n_L_ATPT  + C_E_ATPT  * F_n_E_ATPT  + C_MAT_ATPT  * F_n_MAT_ATPT )

phi_MAT_ATPO  = C_MAT_ATPO  * F_n_MAT_ATPO  / ( 0  + C_K_ATPO  * F_n_K_ATPO  + C_L_ATPO  * F_n_L_ATPO  + C_E_ATPO  * F_n_E_ATPO  + C_MAT_ATPO  * F_n_MAT_ATPO )

PK_ANRE  * F_K_ANRE  = ( 1  - Rdep_ANRE )  * PK_ANRE(-1)  * F_K_ANRE(-1)  + PI_ANRE  * I_ANRE

d(log(MS_CIND))  = d(log(M_CIND))

GR_PROG_E_ATPT  = @elem(GR_PROG_E_ATPT , 2000)  + RHO_PROG_E_PE  * ( log(PE_ATPT)  - log(P) > 0 )  * d(log(PE_ATPT)  - log(P))

d(SUBST_n_CI_CTRP_ANFO)  = 0  +  - ES_TRSP_CTRP_CTRP_ANFO  * phi_TRSP_CTRP_ANFO  * d(log(PCI_CTRP_ANFO)  - log(PCI_CTRP_ANFO))

Y_CNJN_ANFO  = PhiY_CNJN_ANFO  * YQ_CNJN

PROG_MAT_AIND  = PROG_MAT_AIND(-1)  * ( 1  + GR_PROG_MAT_AIND )

PGM_CNJN  = PMSBVAT_CNJN

ES_act_K_E_AIND  = ES_K_E_AIND  - ( C_K_AIND  / PROG_K_AIND  / ( C_E_AIND  / PROG_E_AIND )  / @elem(C_K_AIND  / PROG_K_AIND  / ( C_E_AIND  / PROG_E_AIND ) , 2000) < 0.99999 )  * ( log(F_K_AIND  * PROG_K_AIND  / ( F_E_AIND  * PROG_E_AIND )  / @elem(F_K_AIND  * PROG_K_AIND  / ( F_E_AIND  * PROG_E_AIND ) , 2000))  / log(C_K_AIND  / PROG_K_AIND  / ( C_E_AIND  / PROG_E_AIND )  / @elem(C_K_AIND  / PROG_K_AIND  / ( C_E_AIND  / PROG_E_AIND ) , 2000)  * 1.0000000001)  + ES_K_E_AIND )  - ( C_K_AIND  / PROG_K_AIND  / ( C_E_AIND  / PROG_E_AIND )  / @elem(C_K_AIND  / PROG_K_AIND  / ( C_E_AIND  / PROG_E_AIND ) , 2000) > 1.00001 )  * ( log(F_K_AIND  * PROG_K_AIND  / ( F_E_AIND  * PROG_E_AIND )  / @elem(F_K_AIND  * PROG_K_AIND  / ( F_E_AIND  * PROG_E_AIND ) , 2000))  / log(C_K_AIND  / PROG_K_AIND  / ( C_E_AIND  / PROG_E_AIND )  / @elem(C_K_AIND  / PROG_K_AIND  / ( C_E_AIND  / PROG_E_AIND ) , 2000)  * 1.0000000001)  + ES_K_E_AIND )

PROG_L_ASER  = PROG_L_ASER(-1)  * ( 1  + GR_PROG_L_ASER )

CIM_CTRP_AIND  = phi_CIM_CTRP_AIND  * CI_CTRP_AIND

OTHPTD_CNJM  = @elem(ROTHPTD_CNJM , 2000)  * YQ_CNJM

GR_PROG_E_ATPO  = @elem(GR_PROG_E_ATPO , 2000)  + RHO_PROG_E_PE  * ( log(PE_ATPO)  - log(P) > 0 )  * d(log(PE_ATPO)  - log(P))

ES_act_L_L_ANRE  = ES_L_L_ANRE  - ( C_L_ANRE  / PROG_L_ANRE  / ( C_L_ANRE  / PROG_L_ANRE )  / @elem(C_L_ANRE  / PROG_L_ANRE  / ( C_L_ANRE  / PROG_L_ANRE ) , 2000) < 0.99999 )  * ( log(F_L_ANRE  * PROG_L_ANRE  / ( F_L_ANRE  * PROG_L_ANRE )  / @elem(F_L_ANRE  * PROG_L_ANRE  / ( F_L_ANRE  * PROG_L_ANRE ) , 2000))  / log(C_L_ANRE  / PROG_L_ANRE  / ( C_L_ANRE  / PROG_L_ANRE )  / @elem(C_L_ANRE  / PROG_L_ANRE  / ( C_L_ANRE  / PROG_L_ANRE ) , 2000)  * 1.0000000001)  + ES_L_L_ANRE )  - ( C_L_ANRE  / PROG_L_ANRE  / ( C_L_ANRE  / PROG_L_ANRE )  / @elem(C_L_ANRE  / PROG_L_ANRE  / ( C_L_ANRE  / PROG_L_ANRE ) , 2000) > 1.00001 )  * ( log(F_L_ANRE  * PROG_L_ANRE  / ( F_L_ANRE  * PROG_L_ANRE )  / @elem(F_L_ANRE  * PROG_L_ANRE  / ( F_L_ANRE  * PROG_L_ANRE ) , 2000))  / log(C_L_ANRE  / PROG_L_ANRE  / ( C_L_ANRE  / PROG_L_ANRE )  / @elem(C_L_ANRE  / PROG_L_ANRE  / ( C_L_ANRE  / PROG_L_ANRE ) , 2000)  * 1.0000000001)  + ES_L_L_ANRE )

ES_act_CHM_CIND  = ES_CHM_CIND  - ( PCHD_CIND  / PCHM_CIND < 0.99999 )  * ( log(CHD_CIND  / CHM_CIND  / @elem(CHD_CIND  / CHM_CIND , 2000))  / log(PCHD_CIND  / PCHM_CIND  * 1.0000000001)  + ES_CHM_CIND )  - ( PCHD_CIND  / PCHM_CIND > 1.00001 )  * ( log(CHD_CIND  / CHM_CIND  / @elem(CHD_CIND  / CHM_CIND , 2000))  / log(PCHD_CIND  / PCHM_CIND  * 1.0000000001)  + ES_CHM_CIND )

MGP_CTRP_CNJN  = MGPD_CTRP_CNJN  + MGPM_CTRP_CNJN

MGP_CTRP_CNJM  = MGPD_CTRP_CNJM  + MGPM_CTRP_CNJM

ES_act_L_E_ANFO  = ES_L_E_ANFO  - ( C_L_ANFO  / PROG_L_ANFO  / ( C_E_ANFO  / PROG_E_ANFO )  / @elem(C_L_ANFO  / PROG_L_ANFO  / ( C_E_ANFO  / PROG_E_ANFO ) , 2000) < 0.99999 )  * ( log(F_L_ANFO  * PROG_L_ANFO  / ( F_E_ANFO  * PROG_E_ANFO )  / @elem(F_L_ANFO  * PROG_L_ANFO  / ( F_E_ANFO  * PROG_E_ANFO ) , 2000))  / log(C_L_ANFO  / PROG_L_ANFO  / ( C_E_ANFO  / PROG_E_ANFO )  / @elem(C_L_ANFO  / PROG_L_ANFO  / ( C_E_ANFO  / PROG_E_ANFO ) , 2000)  * 1.0000000001)  + ES_L_E_ANFO )  - ( C_L_ANFO  / PROG_L_ANFO  / ( C_E_ANFO  / PROG_E_ANFO )  / @elem(C_L_ANFO  / PROG_L_ANFO  / ( C_E_ANFO  / PROG_E_ANFO ) , 2000) > 1.00001 )  * ( log(F_L_ANFO  * PROG_L_ANFO  / ( F_E_ANFO  * PROG_E_ANFO )  / @elem(F_L_ANFO  * PROG_L_ANFO  / ( F_E_ANFO  * PROG_E_ANFO ) , 2000))  / log(C_L_ANFO  / PROG_L_ANFO  / ( C_E_ANFO  / PROG_E_ANFO )  / @elem(C_L_ANFO  / PROG_L_ANFO  / ( C_E_ANFO  / PROG_E_ANFO ) , 2000)  * 1.0000000001)  + ES_L_E_ANFO )

phi_CHM_CTRP  = 1  / ( 1  + @elem(CHD_CTRP  / CHM_CTRP , 2000)  * exp(SUBST_CHM_CTRP) )

GOS_ATPT  = VA_ATPT  - WAGES_ATPT  - RSSC_ATPT  - NTAXI_ATPT

SUBST_F_E_AIND  = ADJUST6_F_E_AIND  * SUBST_n_F_E_AIND  + ( 1  - ADJUST6_F_E_AIND )  * SUBST_F_E_AIND(-1)

NTAXPD_CIND  = VATD_CIND  + OTHPTD_CIND  + SUBPD_CIND

phi_IM_CSER_ANFO  = 1  / ( 1  + @elem(ID_CSER_ANFO  / IM_CSER_ANFO , 2000)  * exp(SUBST_IM_CSER_ANFO) )

PCID_AIND  * CID_AIND  = 0  + PCID_CIND_AIND  * CID_CIND_AIND  + PCID_CTRP_AIND  * CID_CTRP_AIND  + PCID_CSER_AIND  * CID_CSER_AIND  + PCID_CNJN_AIND  * CID_CNJN_AIND  + PCID_CNJM_AIND  * CID_CNJM_AIND

PCI_CIND_AIND  * CI_CIND_AIND  = PCID_CIND_AIND  * CID_CIND_AIND  + PCIM_CIND_AIND  * CIM_CIND_AIND

PCIM_CTRP_ATPO  = PMSBVAT_CTRP

d(SUBST_n_CHM_CNJN)  =  - ES_CHM_CNJN  * d(log(PCHD_CNJN)  - log(PCHM_CNJN))

d(SUBST_n_CHM_CNJM)  =  - ES_CHM_CNJM  * d(log(PCHD_CNJM)  - log(PCHM_CNJM))

PSUBPM_CTRP  * SUBPM_CTRP  = RSUBPM_CTRP  * M_CTRP

ES_act_E_L_ATPT  = ES_E_L_ATPT  - ( C_E_ATPT  / PROG_E_ATPT  / ( C_L_ATPT  / PROG_L_ATPT )  / @elem(C_E_ATPT  / PROG_E_ATPT  / ( C_L_ATPT  / PROG_L_ATPT ) , 2000) < 0.99999 )  * ( log(F_E_ATPT  * PROG_E_ATPT  / ( F_L_ATPT  * PROG_L_ATPT )  / @elem(F_E_ATPT  * PROG_E_ATPT  / ( F_L_ATPT  * PROG_L_ATPT ) , 2000))  / log(C_E_ATPT  / PROG_E_ATPT  / ( C_L_ATPT  / PROG_L_ATPT )  / @elem(C_E_ATPT  / PROG_E_ATPT  / ( C_L_ATPT  / PROG_L_ATPT ) , 2000)  * 1.0000000001)  + ES_E_L_ATPT )  - ( C_E_ATPT  / PROG_E_ATPT  / ( C_L_ATPT  / PROG_L_ATPT )  / @elem(C_E_ATPT  / PROG_E_ATPT  / ( C_L_ATPT  / PROG_L_ATPT ) , 2000) > 1.00001 )  * ( log(F_E_ATPT  * PROG_E_ATPT  / ( F_L_ATPT  * PROG_L_ATPT )  / @elem(F_E_ATPT  * PROG_E_ATPT  / ( F_L_ATPT  * PROG_L_ATPT ) , 2000))  / log(C_E_ATPT  / PROG_E_ATPT  / ( C_L_ATPT  / PROG_L_ATPT )  / @elem(C_E_ATPT  / PROG_E_ATPT  / ( C_L_ATPT  / PROG_L_ATPT ) , 2000)  * 1.0000000001)  + ES_E_L_ATPT )

d(SUBST_n_CI_CTRP_ASER)  = 0  +  - ES_TRSP_CTRP_CTRP_ASER  * phi_TRSP_CTRP_ASER  * d(log(PCI_CTRP_ASER)  - log(PCI_CTRP_ASER))

SUBST_IM_CIND_AIND  = ADJUST6_IM_CIND_AIND  * SUBST_n_IM_CIND_AIND  + ( 1  - ADJUST6_IM_CIND_AIND )  * SUBST_IM_CIND_AIND(-1)

PYQbis_CTRP  * YQ_CTRP  + NTAXPD_VAL_CTRP  + PMGPD_CTRP  * MGPD_CTRP  = PQD_CTRP  * QD_CTRP

d(SUBST_n_IM_CSER_ATPT)  =  - ES_IM_CSER_ATPT  * d(log(PID_CSER_ATPT)  - log(PIM_CSER_ATPT))

PCIM_CTRP_ATPT  = PMSBVAT_CTRP

ES_act_E_L_ATPO  = ES_E_L_ATPO  - ( C_E_ATPO  / PROG_E_ATPO  / ( C_L_ATPO  / PROG_L_ATPO )  / @elem(C_E_ATPO  / PROG_E_ATPO  / ( C_L_ATPO  / PROG_L_ATPO ) , 2000) < 0.99999 )  * ( log(F_E_ATPO  * PROG_E_ATPO  / ( F_L_ATPO  * PROG_L_ATPO )  / @elem(F_E_ATPO  * PROG_E_ATPO  / ( F_L_ATPO  * PROG_L_ATPO ) , 2000))  / log(C_E_ATPO  / PROG_E_ATPO  / ( C_L_ATPO  / PROG_L_ATPO )  / @elem(C_E_ATPO  / PROG_E_ATPO  / ( C_L_ATPO  / PROG_L_ATPO ) , 2000)  * 1.0000000001)  + ES_E_L_ATPO )  - ( C_E_ATPO  / PROG_E_ATPO  / ( C_L_ATPO  / PROG_L_ATPO )  / @elem(C_E_ATPO  / PROG_E_ATPO  / ( C_L_ATPO  / PROG_L_ATPO ) , 2000) > 1.00001 )  * ( log(F_E_ATPO  * PROG_E_ATPO  / ( F_L_ATPO  * PROG_L_ATPO )  / @elem(F_E_ATPO  * PROG_E_ATPO  / ( F_L_ATPO  * PROG_L_ATPO ) , 2000))  / log(C_E_ATPO  / PROG_E_ATPO  / ( C_L_ATPO  / PROG_L_ATPO )  / @elem(C_E_ATPO  / PROG_E_ATPO  / ( C_L_ATPO  / PROG_L_ATPO ) , 2000)  * 1.0000000001)  + ES_E_L_ATPO )

d(SUBST_n_IM_CIND_ASER)  =  - ES_IM_CIND_ASER  * d(log(PID_CIND_ASER)  - log(PIM_CIND_ASER))

verif_phi_F_ANRE  = ( 1  - ( 0  + phi_K_ANRE  + phi_L_ANRE  + phi_E_ANRE  + phi_MAT_ANRE ) )  * 100

phi_CIM_CNJN_AIND  = 1  / ( 1  + @elem(CID_CNJN_AIND  / CIM_CNJN_AIND , 2000)  * exp(SUBST_CIM_CNJN_AIND) )

phi_E_ATPO  = C_E_ATPO  * F_n_E_ATPO  / ( 0  + C_K_ATPO  * F_n_K_ATPO  + C_L_ATPO  * F_n_L_ATPO  + C_E_ATPO  * F_n_E_ATPO  + C_MAT_ATPO  * F_n_MAT_ATPO )

phi_E_CNJM_ASER  = PCI_CNJM_ASER  * CI_CNJM_ASER  / ( 0  + PCI_CNJN_ASER  * CI_CNJN_ASER  + PCI_CNJM_ASER  * CI_CNJM_ASER )

ES_act_K_K_ATPO  = ES_K_K_ATPO  - ( C_K_ATPO  / PROG_K_ATPO  / ( C_K_ATPO  / PROG_K_ATPO )  / @elem(C_K_ATPO  / PROG_K_ATPO  / ( C_K_ATPO  / PROG_K_ATPO ) , 2000) < 0.99999 )  * ( log(F_K_ATPO  * PROG_K_ATPO  / ( F_K_ATPO  * PROG_K_ATPO )  / @elem(F_K_ATPO  * PROG_K_ATPO  / ( F_K_ATPO  * PROG_K_ATPO ) , 2000))  / log(C_K_ATPO  / PROG_K_ATPO  / ( C_K_ATPO  / PROG_K_ATPO )  / @elem(C_K_ATPO  / PROG_K_ATPO  / ( C_K_ATPO  / PROG_K_ATPO ) , 2000)  * 1.0000000001)  + ES_K_K_ATPO )  - ( C_K_ATPO  / PROG_K_ATPO  / ( C_K_ATPO  / PROG_K_ATPO )  / @elem(C_K_ATPO  / PROG_K_ATPO  / ( C_K_ATPO  / PROG_K_ATPO ) , 2000) > 1.00001 )  * ( log(F_K_ATPO  * PROG_K_ATPO  / ( F_K_ATPO  * PROG_K_ATPO )  / @elem(F_K_ATPO  * PROG_K_ATPO  / ( F_K_ATPO  * PROG_K_ATPO ) , 2000))  / log(C_K_ATPO  / PROG_K_ATPO  / ( C_K_ATPO  / PROG_K_ATPO )  / @elem(C_K_ATPO  / PROG_K_ATPO  / ( C_K_ATPO  / PROG_K_ATPO ) , 2000)  * 1.0000000001)  + ES_K_K_ATPO )

SUBST_MGRM_CSER  = ADJUST6_MGRM_CSER  * SUBST_n_MGRM_CSER  + ( 1  - ADJUST6_MGRM_CSER )  * SUBST_MGRM_CSER(-1)

ES_act_K_K_ATPT  = ES_K_K_ATPT  - ( C_K_ATPT  / PROG_K_ATPT  / ( C_K_ATPT  / PROG_K_ATPT )  / @elem(C_K_ATPT  / PROG_K_ATPT  / ( C_K_ATPT  / PROG_K_ATPT ) , 2000) < 0.99999 )  * ( log(F_K_ATPT  * PROG_K_ATPT  / ( F_K_ATPT  * PROG_K_ATPT )  / @elem(F_K_ATPT  * PROG_K_ATPT  / ( F_K_ATPT  * PROG_K_ATPT ) , 2000))  / log(C_K_ATPT  / PROG_K_ATPT  / ( C_K_ATPT  / PROG_K_ATPT )  / @elem(C_K_ATPT  / PROG_K_ATPT  / ( C_K_ATPT  / PROG_K_ATPT ) , 2000)  * 1.0000000001)  + ES_K_K_ATPT )  - ( C_K_ATPT  / PROG_K_ATPT  / ( C_K_ATPT  / PROG_K_ATPT )  / @elem(C_K_ATPT  / PROG_K_ATPT  / ( C_K_ATPT  / PROG_K_ATPT ) , 2000) > 1.00001 )  * ( log(F_K_ATPT  * PROG_K_ATPT  / ( F_K_ATPT  * PROG_K_ATPT )  / @elem(F_K_ATPT  * PROG_K_ATPT  / ( F_K_ATPT  * PROG_K_ATPT ) , 2000))  / log(C_K_ATPT  / PROG_K_ATPT  / ( C_K_ATPT  / PROG_K_ATPT )  / @elem(C_K_ATPT  / PROG_K_ATPT  / ( C_K_ATPT  / PROG_K_ATPT ) , 2000)  * 1.0000000001)  + ES_K_K_ATPT )

PCID_CTRP  * CID_CTRP  = 0  + PCID_CTRP_AIND  * CID_CTRP_AIND  + PCID_CTRP_ATPT  * CID_CTRP_ATPT  + PCID_CTRP_ATPO  * CID_CTRP_ATPO  + PCID_CTRP_ASER  * CID_CTRP_ASER  + PCID_CTRP_ANRE  * CID_CTRP_ANRE  + PCID_CTRP_ANFO  * CID_CTRP_ANFO

phi_E_ATPT  = C_E_ATPT  * F_n_E_ATPT  / ( 0  + C_K_ATPT  * F_n_K_ATPT  + C_L_ATPT  * F_n_L_ATPT  + C_E_ATPT  * F_n_E_ATPT  + C_MAT_ATPT  * F_n_MAT_ATPT )

d(log(CI_CSER_ANRE))  = d(log(F_MAT_ANRE))

ES_act_GM_CTRP  = ES_GM_CTRP  - ( PGD_CTRP  / PGM_CTRP < 0.99999 )  * ( log(GD_CTRP  / GM_CTRP  / @elem(GD_CTRP  / GM_CTRP , 2000))  / log(PGD_CTRP  / PGM_CTRP  * 1.0000000001)  + ES_GM_CTRP )  - ( PGD_CTRP  / PGM_CTRP > 1.00001 )  * ( log(GD_CTRP  / GM_CTRP  / @elem(GD_CTRP  / GM_CTRP , 2000))  / log(PGD_CTRP  / PGM_CTRP  * 1.0000000001)  + ES_GM_CTRP )

CI_AIND  = CID_AIND  + CIM_AIND

P  = PCH

SUBST_CI_CNJN_AIND  = ADJUST6_CI_CNJN_AIND  * SUBST_n_CI_CNJN_AIND  + ( 1  - ADJUST6_CI_CNJN_AIND )  * SUBST_CI_CNJN_AIND(-1)

VA_VAL_ATPO  = PY_ATPO  * Y_ATPO  - PCI_ATPO  * CI_ATPO

PROG_MAT_ATPO  = PROG_MAT_ATPO(-1)  * ( 1  + GR_PROG_MAT_ATPO )

VA_VAL_ATPT  = PY_ATPT  * Y_ATPT  - PCI_ATPT  * CI_ATPT

PROG_MAT_ATPT  = PROG_MAT_ATPT(-1)  * ( 1  + GR_PROG_MAT_ATPT )

C_K_AIND  = PK_AIND  * ( Rdep_AIND  + r_AIND )

Bal_G_Prim_VAL  = SAV_G_VAL  + DEBT_G_VAL(-1)  * ( Phi_RD_G(-1)  + r_DEBT_G(-1) )

d(log(W_n_ANRE))  = RHO_W_Cons_ANRE  + RHO_W_P_ANRE  * d(log(P))  + RHO_W_Pe_ANRE  * d(log(P_e))  + RHO_W_PROG_ANRE  * d(log(PROG_L_ANRE))  - RHO_W_U_ANRE  * ( UnR  - DNAIRU )  - RHO_W_DU_ANRE  * d(UnR)  + RHO_W_L_ANRE  * d(log(F_L_ANRE)  - log(F_L))

PYQS_CSER  * YQS_CSER  = PYQ_CSER  * YQ_CSER  + PMGPD_CSER  * MGPD_CSER  + NTAXPD_VAL_CSER

NTAXPM_CTRP  = VATM_CTRP  + OTHPTM_CTRP  + SUBPM_CTRP

C_L_ATPO  = W_ATPO  * ( 1  + RRSSC_ATPO )

SUBST_F_L_ATPO  = ADJUST6_F_L_ATPO  * SUBST_n_F_L_ATPO  + ( 1  - ADJUST6_F_L_ATPO )  * SUBST_F_L_ATPO(-1)

SUBST_F_L_ATPT  = ADJUST6_F_L_ATPT  * SUBST_n_F_L_ATPT  + ( 1  - ADJUST6_F_L_ATPT )  * SUBST_F_L_ATPT(-1)

C_L_ATPT  = W_ATPT  * ( 1  + RRSSC_ATPT )

d(R_AIND)  = d(R)

phi_CIM_CTRP_ANFO  = 1  / ( 1  + @elem(CID_CTRP_ANFO  / CIM_CTRP_ANFO , 2000)  * exp(SUBST_CIM_CTRP_ANFO) )

PCI_CSER_ANFO  * CI_CSER_ANFO  = PCID_CSER_ANFO  * CID_CSER_ANFO  + PCIM_CSER_ANFO  * CIM_CSER_ANFO

SUBST_CIM_CNJN_ATPO  = ADJUST6_CIM_CNJN_ATPO  * SUBST_n_CIM_CNJN_ATPO  + ( 1  - ADJUST6_CIM_CNJN_ATPO )  * SUBST_CIM_CNJN_ATPO(-1)

verif_phi_E_ANRE  = ( 1  - ( 0  + phi_E_CNJN_ANRE  + phi_E_CNJM_ANRE ) )  * 100

PCIM_CNJN_AIND  = PMSBVAT_CNJN

PDS_CSER  * DS_CSER  = PDSD_CSER  * DSD_CSER  + PDSM_CSER  * DSM_CSER

ES_act_E_E_ASER  = ES_E_E_ASER  - ( C_E_ASER  / PROG_E_ASER  / ( C_E_ASER  / PROG_E_ASER )  / @elem(C_E_ASER  / PROG_E_ASER  / ( C_E_ASER  / PROG_E_ASER ) , 2000) < 0.99999 )  * ( log(F_E_ASER  * PROG_E_ASER  / ( F_E_ASER  * PROG_E_ASER )  / @elem(F_E_ASER  * PROG_E_ASER  / ( F_E_ASER  * PROG_E_ASER ) , 2000))  / log(C_E_ASER  / PROG_E_ASER  / ( C_E_ASER  / PROG_E_ASER )  / @elem(C_E_ASER  / PROG_E_ASER  / ( C_E_ASER  / PROG_E_ASER ) , 2000)  * 1.0000000001)  + ES_E_E_ASER )  - ( C_E_ASER  / PROG_E_ASER  / ( C_E_ASER  / PROG_E_ASER )  / @elem(C_E_ASER  / PROG_E_ASER  / ( C_E_ASER  / PROG_E_ASER ) , 2000) > 1.00001 )  * ( log(F_E_ASER  * PROG_E_ASER  / ( F_E_ASER  * PROG_E_ASER )  / @elem(F_E_ASER  * PROG_E_ASER  / ( F_E_ASER  * PROG_E_ASER ) , 2000))  / log(C_E_ASER  / PROG_E_ASER  / ( C_E_ASER  / PROG_E_ASER )  / @elem(C_E_ASER  / PROG_E_ASER  / ( C_E_ASER  / PROG_E_ASER ) , 2000)  * 1.0000000001)  + ES_E_E_ASER )

GM_CIND  = phi_GM_CIND  * G_CIND

d(SUBST_n_CI_CNJM_ANRE)  = 0  +  - ES_NRJ_CNJM_CNJN_ANRE  * phi_E_CNJN_ANRE  * d(log(PCI_CNJM_ANRE)  - log(PCI_CNJN_ANRE))  +  - ES_NRJ_CNJM_CNJM_ANRE  * phi_E_CNJM_ANRE  * d(log(PCI_CNJM_ANRE)  - log(PCI_CNJM_ANRE))

PCIM_CNJM_ASER  = PMSBVAT_CNJM

WAGES_ANRE  * PWAGES_ANRE  = W_ANRE  * F_L_ANRE

XD_CTRP  = ( 1  - phi_XM_CTRP )  * X_CTRP

PCID_CNJM_ATPT  = PYQSBVAT_CNJM

d(log(F_n_E_ASER))  = d(log(Y_ASER))  - d(log(PROG_E_ASER))  + d(SUBST_F_E_ASER)

PCID_CNJM_ATPO  = PYQSBVAT_CNJM

NTAXI_VAL  = 0  + NTAXI_VAL_AIND  + NTAXI_VAL_ATPT  + NTAXI_VAL_ATPO  + NTAXI_VAL_ASER  + NTAXI_VAL_ANRE  + NTAXI_VAL_ANFO

SUBST_CIM_CIND_ANFO  = ADJUST6_CIM_CIND_ANFO  * SUBST_n_CIM_CIND_ANFO  + ( 1  - ADJUST6_CIM_CIND_ANFO )  * SUBST_CIM_CIND_ANFO(-1)

CUR_ANRE  = Y_ANRE  / YCAP_ANRE

VATM_CIND  = @elem(RVATM_CIND , 2000)  * CHM_CIND  / ( 1  + @elem(RVATM_CIND , 2000) )

PX_CTRP  * X_CTRP  = PXD_CTRP  * XD_CTRP  + PXM_CTRP  * XM_CTRP

PCID_ANFO  * CID_ANFO  = 0  + PCID_CIND_ANFO  * CID_CIND_ANFO  + PCID_CTRP_ANFO  * CID_CTRP_ANFO  + PCID_CSER_ANFO  * CID_CSER_ANFO  + PCID_CNJN_ANFO  * CID_CNJN_ANFO  + PCID_CNJM_ANFO  * CID_CNJM_ANFO

MGRD  = 0  + MGRD_CTRP  + MGRD_CSER

SUBPD_CNJN  = @elem(RSUBPD_CNJN , 2000)  * YQ_CNJN

MGRM  = 0  + MGRM_CTRP  + MGRM_CSER

PCI_CIND_ANRE  * CI_CIND_ANRE  = PCID_CIND_ANRE  * CID_CIND_ANRE  + PCIM_CIND_ANRE  * CIM_CIND_ANRE

PVATD  * VATD  = 0  + PVATD_CIND  * VATD_CIND  + PVATD_CTRP  * VATD_CTRP  + PVATD_CSER  * VATD_CSER  + PVATD_CNJN  * VATD_CNJN  + PVATD_CNJM  * VATD_CNJM

PVATM  * VATM  = 0  + PVATM_CIND  * VATM_CIND  + PVATM_CTRP  * VATM_CTRP  + PVATM_CSER  * VATM_CSER  + PVATM_CNJN  * VATM_CNJN  + PVATM_CNJM  * VATM_CNJM

ES_act_L_MAT_ANFO  = ES_L_MAT_ANFO  - ( C_L_ANFO  / PROG_L_ANFO  / ( C_MAT_ANFO  / PROG_MAT_ANFO )  / @elem(C_L_ANFO  / PROG_L_ANFO  / ( C_MAT_ANFO  / PROG_MAT_ANFO ) , 2000) < 0.99999 )  * ( log(F_L_ANFO  * PROG_L_ANFO  / ( F_MAT_ANFO  * PROG_MAT_ANFO )  / @elem(F_L_ANFO  * PROG_L_ANFO  / ( F_MAT_ANFO  * PROG_MAT_ANFO ) , 2000))  / log(C_L_ANFO  / PROG_L_ANFO  / ( C_MAT_ANFO  / PROG_MAT_ANFO )  / @elem(C_L_ANFO  / PROG_L_ANFO  / ( C_MAT_ANFO  / PROG_MAT_ANFO ) , 2000)  * 1.0000000001)  + ES_L_MAT_ANFO )  - ( C_L_ANFO  / PROG_L_ANFO  / ( C_MAT_ANFO  / PROG_MAT_ANFO )  / @elem(C_L_ANFO  / PROG_L_ANFO  / ( C_MAT_ANFO  / PROG_MAT_ANFO ) , 2000) > 1.00001 )  * ( log(F_L_ANFO  * PROG_L_ANFO  / ( F_MAT_ANFO  * PROG_MAT_ANFO )  / @elem(F_L_ANFO  * PROG_L_ANFO  / ( F_MAT_ANFO  * PROG_MAT_ANFO ) , 2000))  / log(C_L_ANFO  / PROG_L_ANFO  / ( C_MAT_ANFO  / PROG_MAT_ANFO )  / @elem(C_L_ANFO  / PROG_L_ANFO  / ( C_MAT_ANFO  / PROG_MAT_ANFO ) , 2000)  * 1.0000000001)  + ES_L_MAT_ANFO )

d(log(TRSP_ASER))  = d(log(F_MAT_ASER))

PCID_CTRP_ATPT  = PYQSBVAT_CTRP

phi_K_ATPT  = C_K_ATPT  * F_n_K_ATPT  / ( 0  + C_K_ATPT  * F_n_K_ATPT  + C_L_ATPT  * F_n_L_ATPT  + C_E_ATPT  * F_n_E_ATPT  + C_MAT_ATPT  * F_n_MAT_ATPT )

RRSSC  = PRSSC  * RSSC  / ( W  * F_L )

d(SUBST_n_CI_CTRP_ATPT)  = 0  +  - ES_TRSP_CTRP_CTRP_ATPT  * phi_TRSP_CTRP_ATPT  * d(log(PCI_CTRP_ATPT)  - log(PCI_CTRP_ATPT))

Ibis  = 0  + I_AIND  + I_ATPT  + I_ATPO  + I_ASER  + I_ANRE  + I_ANFO

PID_AIND  * ID_AIND  = 0  + PID_CIND_AIND  * ID_CIND_AIND  + PID_CSER_AIND  * ID_CSER_AIND

d(SUBST_n_CI_CTRP_ATPO)  = 0  +  - ES_TRSP_CTRP_CTRP_ATPO  * phi_TRSP_CTRP_ATPO  * d(log(PCI_CTRP_ATPO)  - log(PCI_CTRP_ATPO))

phi_K_ATPO  = C_K_ATPO  * F_n_K_ATPO  / ( 0  + C_K_ATPO  * F_n_K_ATPO  + C_L_ATPO  * F_n_L_ATPO  + C_E_ATPO  * F_n_E_ATPO  + C_MAT_ATPO  * F_n_MAT_ATPO )

PCID_CTRP_ATPO  = PYQSBVAT_CTRP

DS_CTRP  = DSD_CTRP  + DSM_CTRP

PIM_CIND_AIND  = PMSBVAT_CIND

MGRbis_CTRP  = MGRD_CTRP  + MGRM_CTRP

ES_act_XM_CIND  = ES_XM_CIND  - ( PXD_CIND  / PXM_CIND < 0.99999 )  * ( log(XD_CIND  / XM_CIND  / @elem(XD_CIND  / XM_CIND , 2000))  / log(PXD_CIND  / PXM_CIND  * 1.0000000001)  + ES_XM_CIND )  - ( PXD_CIND  / PXM_CIND > 1.00001 )  * ( log(XD_CIND  / XM_CIND  / @elem(XD_CIND  / XM_CIND , 2000))  / log(PXD_CIND  / PXM_CIND  * 1.0000000001)  + ES_XM_CIND )

d(log(MS_CSER))  = d(log(M_CSER))

GDPter  = VA  + NTAXP

GR_PROG_E_ANFO  = @elem(GR_PROG_E_ANFO , 2000)  + RHO_PROG_E_PE  * ( log(PE_ANFO)  - log(P) > 0 )  * d(log(PE_ANFO)  - log(P))

CHD_CSER  = ( 1  - phi_CHM_CSER )  * CH_CSER

d(SUBST_n_F_L_ANRE)  = 0  +  - ES_L_K_ANRE  * phi_K_ANRE(-1)  * d(log(C_L_ANRE  / PROG_L_ANRE)  - log(C_K_ANRE  / PROG_K_ANRE))  +  - ES_L_L_ANRE  * phi_L_ANRE(-1)  * d(log(C_L_ANRE  / PROG_L_ANRE)  - log(C_L_ANRE  / PROG_L_ANRE))  +  - ES_L_E_ANRE  * phi_E_ANRE(-1)  * d(log(C_L_ANRE  / PROG_L_ANRE)  - log(C_E_ANRE  / PROG_E_ANRE))  +  - ES_L_MAT_ANRE  * phi_MAT_ANRE(-1)  * d(log(C_L_ANRE  / PROG_L_ANRE)  - log(C_MAT_ANRE  / PROG_MAT_ANRE))

YQ_CTRP  * PYQ_CTRP  + NTAXPD_VAL_CTRP  + PMGPD_CTRP  * MGPD_CTRP  = PQD_CTRP  * QD_CTRP

NTAXPM_CNJN  = VATM_CNJN  + OTHPTM_CNJN  + SUBPM_CNJN

YQ  = 0  + YQ_CIND  + YQ_CTRP  + YQ_CSER  + YQ_CNJN  + YQ_CNJM

d(log(F_n_MAT_AIND))  = d(log(Y_AIND))  - d(log(PROG_MAT_AIND))  + d(SUBST_F_MAT_AIND)

d(log(F_e_MAT_ANRE))  = ADJUST1_F_MAT_ANRE  * d(log(F_e_MAT_ANRE(-1)))  + ADJUST2_F_MAT_ANRE  * d(log(F_MAT_ANRE(-1)))  + ADJUST3_F_MAT_ANRE  * d(log(F_n_MAT_ANRE))

OTHPTM  = 0  + OTHPTM_CIND  + OTHPTM_CTRP  + OTHPTM_CSER  + OTHPTM_CNJN  + OTHPTM_CNJM

PMGP_CTRP_CNJM  * MGP_CTRP_CNJM  = PMGPD_CTRP_CNJM  * MGPD_CTRP_CNJM  + PMGPM_CTRP_CNJM  * MGPM_CTRP_CNJM

PMGP_CTRP_CNJN  * MGP_CTRP_CNJN  = PMGPD_CTRP_CNJN  * MGPD_CTRP_CNJN  + PMGPM_CTRP_CNJN  * MGPM_CTRP_CNJN

OTHPTD  = 0  + OTHPTD_CIND  + OTHPTD_CTRP  + OTHPTD_CSER  + OTHPTD_CNJN  + OTHPTD_CNJM

ES_act_MAT_MAT_ANRE  = ES_MAT_MAT_ANRE  - ( C_MAT_ANRE  / PROG_MAT_ANRE  / ( C_MAT_ANRE  / PROG_MAT_ANRE )  / @elem(C_MAT_ANRE  / PROG_MAT_ANRE  / ( C_MAT_ANRE  / PROG_MAT_ANRE ) , 2000) < 0.99999 )  * ( log(F_MAT_ANRE  * PROG_MAT_ANRE  / ( F_MAT_ANRE  * PROG_MAT_ANRE )  / @elem(F_MAT_ANRE  * PROG_MAT_ANRE  / ( F_MAT_ANRE  * PROG_MAT_ANRE ) , 2000))  / log(C_MAT_ANRE  / PROG_MAT_ANRE  / ( C_MAT_ANRE  / PROG_MAT_ANRE )  / @elem(C_MAT_ANRE  / PROG_MAT_ANRE  / ( C_MAT_ANRE  / PROG_MAT_ANRE ) , 2000)  * 1.0000000001)  + ES_MAT_MAT_ANRE )  - ( C_MAT_ANRE  / PROG_MAT_ANRE  / ( C_MAT_ANRE  / PROG_MAT_ANRE )  / @elem(C_MAT_ANRE  / PROG_MAT_ANRE  / ( C_MAT_ANRE  / PROG_MAT_ANRE ) , 2000) > 1.00001 )  * ( log(F_MAT_ANRE  * PROG_MAT_ANRE  / ( F_MAT_ANRE  * PROG_MAT_ANRE )  / @elem(F_MAT_ANRE  * PROG_MAT_ANRE  / ( F_MAT_ANRE  * PROG_MAT_ANRE ) , 2000))  / log(C_MAT_ANRE  / PROG_MAT_ANRE  / ( C_MAT_ANRE  / PROG_MAT_ANRE )  / @elem(C_MAT_ANRE  / PROG_MAT_ANRE  / ( C_MAT_ANRE  / PROG_MAT_ANRE ) , 2000)  * 1.0000000001)  + ES_MAT_MAT_ANRE )

Q  = QD  + QM

verif_YQbis_CSER  = ( YQbis_CSER  / YQ_CSER  - 1 )  * 100

Bal_Trade_VAL  = 0  + Bal_Trade_VAL_CIND  + Bal_Trade_VAL_CTRP  + Bal_Trade_VAL_CSER  + Bal_Trade_VAL_CNJN  + Bal_Trade_VAL_CNJM

NTAXI_ANRE  = @elem(RNTAXI_ANRE , 2000)  * Y_ANRE

ES_act_E_L_ANRE  = ES_E_L_ANRE  - ( C_E_ANRE  / PROG_E_ANRE  / ( C_L_ANRE  / PROG_L_ANRE )  / @elem(C_E_ANRE  / PROG_E_ANRE  / ( C_L_ANRE  / PROG_L_ANRE ) , 2000) < 0.99999 )  * ( log(F_E_ANRE  * PROG_E_ANRE  / ( F_L_ANRE  * PROG_L_ANRE )  / @elem(F_E_ANRE  * PROG_E_ANRE  / ( F_L_ANRE  * PROG_L_ANRE ) , 2000))  / log(C_E_ANRE  / PROG_E_ANRE  / ( C_L_ANRE  / PROG_L_ANRE )  / @elem(C_E_ANRE  / PROG_E_ANRE  / ( C_L_ANRE  / PROG_L_ANRE ) , 2000)  * 1.0000000001)  + ES_E_L_ANRE )  - ( C_E_ANRE  / PROG_E_ANRE  / ( C_L_ANRE  / PROG_L_ANRE )  / @elem(C_E_ANRE  / PROG_E_ANRE  / ( C_L_ANRE  / PROG_L_ANRE ) , 2000) > 1.00001 )  * ( log(F_E_ANRE  * PROG_E_ANRE  / ( F_L_ANRE  * PROG_L_ANRE )  / @elem(F_E_ANRE  * PROG_E_ANRE  / ( F_L_ANRE  * PROG_L_ANRE ) , 2000))  / log(C_E_ANRE  / PROG_E_ANRE  / ( C_L_ANRE  / PROG_L_ANRE )  / @elem(C_E_ANRE  / PROG_E_ANRE  / ( C_L_ANRE  / PROG_L_ANRE ) , 2000)  * 1.0000000001)  + ES_E_L_ANRE )

ID_CSER_ASER  = ( 1  - phi_IM_CSER_ASER )  * I_CSER_ASER

NTAXPM_VAL_CIND  = PVATM_CIND  * VATM_CIND  + POTHPTM_CIND  * OTHPTM_CIND  + PSUBPM_CIND  * SUBPM_CIND

PCI_CNJN_ATPO  * CI_CNJN_ATPO  = PCID_CNJN_ATPO  * CID_CNJN_ATPO  + PCIM_CNJN_ATPO  * CIM_CNJN_ATPO

ES_act_K_K_AIND  = ES_K_K_AIND  - ( C_K_AIND  / PROG_K_AIND  / ( C_K_AIND  / PROG_K_AIND )  / @elem(C_K_AIND  / PROG_K_AIND  / ( C_K_AIND  / PROG_K_AIND ) , 2000) < 0.99999 )  * ( log(F_K_AIND  * PROG_K_AIND  / ( F_K_AIND  * PROG_K_AIND )  / @elem(F_K_AIND  * PROG_K_AIND  / ( F_K_AIND  * PROG_K_AIND ) , 2000))  / log(C_K_AIND  / PROG_K_AIND  / ( C_K_AIND  / PROG_K_AIND )  / @elem(C_K_AIND  / PROG_K_AIND  / ( C_K_AIND  / PROG_K_AIND ) , 2000)  * 1.0000000001)  + ES_K_K_AIND )  - ( C_K_AIND  / PROG_K_AIND  / ( C_K_AIND  / PROG_K_AIND )  / @elem(C_K_AIND  / PROG_K_AIND  / ( C_K_AIND  / PROG_K_AIND ) , 2000) > 1.00001 )  * ( log(F_K_AIND  * PROG_K_AIND  / ( F_K_AIND  * PROG_K_AIND )  / @elem(F_K_AIND  * PROG_K_AIND  / ( F_K_AIND  * PROG_K_AIND ) , 2000))  / log(C_K_AIND  / PROG_K_AIND  / ( C_K_AIND  / PROG_K_AIND )  / @elem(C_K_AIND  / PROG_K_AIND  / ( C_K_AIND  / PROG_K_AIND ) , 2000)  * 1.0000000001)  + ES_K_K_AIND )

PGM_CSER  = PMSBVAT_CSER

d(SUBST_n_GM_CTRP)  =  - ES_GM_CTRP  * d(log(PGD_CTRP)  - log(PGM_CTRP))

PCI_CNJN_ATPT  * CI_CNJN_ATPT  = PCID_CNJN_ATPT  * CID_CNJN_ATPT  + PCIM_CNJN_ATPT  * CIM_CNJN_ATPT

YQbis_CSER  + NTAXPD_CSER  + MGPD_CSER  = QD_CSER

MARKUP_AIND  = ADJUST_MARKUP_AIND  * MARKUP_n_AIND  + ( 1  - ADJUST_MARKUP_AIND )  * MARKUP_AIND(-1)

PVATD_CSER  * VATD_CSER  = RVATD_CSER  * PCHD_CSER  * CHD_CSER  / ( 1  + RVATD_CSER )

PRSSC_ANRE  = P

phi_CIM_CNJM_ATPT  = 1  / ( 1  + @elem(CID_CNJM_ATPT  / CIM_CNJM_ATPT , 2000)  * exp(SUBST_CIM_CNJM_ATPT) )

PID_CSER_AIND  = PYQSBVAT_CSER

PCID_CNJN_ANRE  = PYQSBVAT_CNJN

CIM_AIND  = 0  + CIM_CIND_AIND  + CIM_CTRP_AIND  + CIM_CSER_AIND  + CIM_CNJN_AIND  + CIM_CNJM_AIND

PROG_L_AIND  = PROG_L_AIND(-1)  * ( 1  + GR_PROG_L_AIND )

d(SUBST_n_F_L_AIND)  = 0  +  - ES_L_K_AIND  * phi_K_AIND(-1)  * d(log(C_L_AIND  / PROG_L_AIND)  - log(C_K_AIND  / PROG_K_AIND))  +  - ES_L_L_AIND  * phi_L_AIND(-1)  * d(log(C_L_AIND  / PROG_L_AIND)  - log(C_L_AIND  / PROG_L_AIND))  +  - ES_L_E_AIND  * phi_E_AIND(-1)  * d(log(C_L_AIND  / PROG_L_AIND)  - log(C_E_AIND  / PROG_E_AIND))  +  - ES_L_MAT_AIND  * phi_MAT_AIND(-1)  * d(log(C_L_AIND  / PROG_L_AIND)  - log(C_MAT_AIND  / PROG_MAT_AIND))

PVATM_CSER  * VATM_CSER  = RVATM_CSER  * PCHM_CSER  * CHM_CSER  / ( 1  + RVATM_CSER )

SUBST_n_MGPD_CTRP_CIND  = 0  +  - ES_MGPD_CTRP_CTRP_CIND  * phi_MGPD_CTRP_CIND(-1)  * d(log(PMGPD_CTRP_CIND)  - log(PMGPD_CTRP_CIND))  +  - ES_MGPD_CTRP_CSER_CIND  * phi_MGPD_CSER_CIND(-1)  * d(log(PMGPD_CTRP_CIND)  - log(PMGPD_CSER_CIND))

SUBST_X_CNJM  = ADJUST6_X_CNJM  * SUBST_n_X_CNJM  + ( 1  - ADJUST6_X_CNJM )  * SUBST_X_CNJM(-1)

SUBST_X_CNJN  = ADJUST6_X_CNJN  * SUBST_n_X_CNJN  + ( 1  - ADJUST6_X_CNJN )  * SUBST_X_CNJN(-1)

ES_act_MAT_L_ANRE  = ES_MAT_L_ANRE  - ( C_MAT_ANRE  / PROG_MAT_ANRE  / ( C_L_ANRE  / PROG_L_ANRE )  / @elem(C_MAT_ANRE  / PROG_MAT_ANRE  / ( C_L_ANRE  / PROG_L_ANRE ) , 2000) < 0.99999 )  * ( log(F_MAT_ANRE  * PROG_MAT_ANRE  / ( F_L_ANRE  * PROG_L_ANRE )  / @elem(F_MAT_ANRE  * PROG_MAT_ANRE  / ( F_L_ANRE  * PROG_L_ANRE ) , 2000))  / log(C_MAT_ANRE  / PROG_MAT_ANRE  / ( C_L_ANRE  / PROG_L_ANRE )  / @elem(C_MAT_ANRE  / PROG_MAT_ANRE  / ( C_L_ANRE  / PROG_L_ANRE ) , 2000)  * 1.0000000001)  + ES_MAT_L_ANRE )  - ( C_MAT_ANRE  / PROG_MAT_ANRE  / ( C_L_ANRE  / PROG_L_ANRE )  / @elem(C_MAT_ANRE  / PROG_MAT_ANRE  / ( C_L_ANRE  / PROG_L_ANRE ) , 2000) > 1.00001 )  * ( log(F_MAT_ANRE  * PROG_MAT_ANRE  / ( F_L_ANRE  * PROG_L_ANRE )  / @elem(F_MAT_ANRE  * PROG_MAT_ANRE  / ( F_L_ANRE  * PROG_L_ANRE ) , 2000))  / log(C_MAT_ANRE  / PROG_MAT_ANRE  / ( C_L_ANRE  / PROG_L_ANRE )  / @elem(C_MAT_ANRE  / PROG_MAT_ANRE  / ( C_L_ANRE  / PROG_L_ANRE ) , 2000)  * 1.0000000001)  + ES_MAT_L_ANRE )

ID_CSER_ANFO  = ( 1  - phi_IM_CSER_ANFO )  * I_CSER_ANFO

PQM_CIND  * QM_CIND  = PMGRM_CIND  * MGRM_CIND  + PCIM_CIND  * CIM_CIND  + PCHM_CIND  * CHM_CIND  + PGM_CIND  * GM_CIND  + PIM_CIND  * IM_CIND  + PXM_CIND  * XM_CIND  + PDSM_CIND  * DSM_CIND

CHM_CSER  = phi_CHM_CSER  * CH_CSER

d(log(PY_e_ASER))  = ADJUST1_PY_ASER  * d(log(PY_e_ASER(-1)))  + ADJUST2_PY_ASER  * d(log(PY_ASER(-1)))  + ADJUST3_PY_ASER  * d(log(PY_n_ASER))

CIM_CNJM_ATPT  = phi_CIM_CNJM_ATPT  * CI_CNJM_ATPT

GR_PROG_E_AIND  = @elem(GR_PROG_E_AIND , 2000)  + RHO_PROG_E_PE  * ( log(PE_AIND)  - log(P) > 0 )  * d(log(PE_AIND)  - log(P))

ES_act_L_MAT_ATPT  = ES_L_MAT_ATPT  - ( C_L_ATPT  / PROG_L_ATPT  / ( C_MAT_ATPT  / PROG_MAT_ATPT )  / @elem(C_L_ATPT  / PROG_L_ATPT  / ( C_MAT_ATPT  / PROG_MAT_ATPT ) , 2000) < 0.99999 )  * ( log(F_L_ATPT  * PROG_L_ATPT  / ( F_MAT_ATPT  * PROG_MAT_ATPT )  / @elem(F_L_ATPT  * PROG_L_ATPT  / ( F_MAT_ATPT  * PROG_MAT_ATPT ) , 2000))  / log(C_L_ATPT  / PROG_L_ATPT  / ( C_MAT_ATPT  / PROG_MAT_ATPT )  / @elem(C_L_ATPT  / PROG_L_ATPT  / ( C_MAT_ATPT  / PROG_MAT_ATPT ) , 2000)  * 1.0000000001)  + ES_L_MAT_ATPT )  - ( C_L_ATPT  / PROG_L_ATPT  / ( C_MAT_ATPT  / PROG_MAT_ATPT )  / @elem(C_L_ATPT  / PROG_L_ATPT  / ( C_MAT_ATPT  / PROG_MAT_ATPT ) , 2000) > 1.00001 )  * ( log(F_L_ATPT  * PROG_L_ATPT  / ( F_MAT_ATPT  * PROG_MAT_ATPT )  / @elem(F_L_ATPT  * PROG_L_ATPT  / ( F_MAT_ATPT  * PROG_MAT_ATPT ) , 2000))  / log(C_L_ATPT  / PROG_L_ATPT  / ( C_MAT_ATPT  / PROG_MAT_ATPT )  / @elem(C_L_ATPT  / PROG_L_ATPT  / ( C_MAT_ATPT  / PROG_MAT_ATPT ) , 2000)  * 1.0000000001)  + ES_L_MAT_ATPT )

Q_CIND  = QD_CIND  + QM_CIND

SUBST_CIM_CTRP_AIND  = ADJUST6_CIM_CTRP_AIND  * SUBST_n_CIM_CTRP_AIND  + ( 1  - ADJUST6_CIM_CTRP_AIND )  * SUBST_CIM_CTRP_AIND(-1)

PCI_AIND  * CI_AIND  = PCID_AIND  * CID_AIND  + PCIM_AIND  * CIM_AIND

ES_act_L_MAT_ATPO  = ES_L_MAT_ATPO  - ( C_L_ATPO  / PROG_L_ATPO  / ( C_MAT_ATPO  / PROG_MAT_ATPO )  / @elem(C_L_ATPO  / PROG_L_ATPO  / ( C_MAT_ATPO  / PROG_MAT_ATPO ) , 2000) < 0.99999 )  * ( log(F_L_ATPO  * PROG_L_ATPO  / ( F_MAT_ATPO  * PROG_MAT_ATPO )  / @elem(F_L_ATPO  * PROG_L_ATPO  / ( F_MAT_ATPO  * PROG_MAT_ATPO ) , 2000))  / log(C_L_ATPO  / PROG_L_ATPO  / ( C_MAT_ATPO  / PROG_MAT_ATPO )  / @elem(C_L_ATPO  / PROG_L_ATPO  / ( C_MAT_ATPO  / PROG_MAT_ATPO ) , 2000)  * 1.0000000001)  + ES_L_MAT_ATPO )  - ( C_L_ATPO  / PROG_L_ATPO  / ( C_MAT_ATPO  / PROG_MAT_ATPO )  / @elem(C_L_ATPO  / PROG_L_ATPO  / ( C_MAT_ATPO  / PROG_MAT_ATPO ) , 2000) > 1.00001 )  * ( log(F_L_ATPO  * PROG_L_ATPO  / ( F_MAT_ATPO  * PROG_MAT_ATPO )  / @elem(F_L_ATPO  * PROG_L_ATPO  / ( F_MAT_ATPO  * PROG_MAT_ATPO ) , 2000))  / log(C_L_ATPO  / PROG_L_ATPO  / ( C_MAT_ATPO  / PROG_MAT_ATPO )  / @elem(C_L_ATPO  / PROG_L_ATPO  / ( C_MAT_ATPO  / PROG_MAT_ATPO ) , 2000)  * 1.0000000001)  + ES_L_MAT_ATPO )

phi_E_ANRE  = C_E_ANRE  * F_n_E_ANRE  / ( 0  + C_K_ANRE  * F_n_K_ANRE  + C_L_ANRE  * F_n_L_ANRE  + C_E_ANRE  * F_n_E_ANRE  + C_MAT_ANRE  * F_n_MAT_ANRE )

PQ_CSER  * Q_CSER  = PQD_CSER  * QD_CSER  + PQM_CSER  * QM_CSER

GD_CTRP  = ( 1  - phi_GM_CTRP )  * G_CTRP

RBal_G_Prim_VAL  = Bal_G_Prim_VAL  / ( PGDP  * GDP )

SUBST_CI_CNJM_AIND  = ADJUST6_CI_CNJM_AIND  * SUBST_n_CI_CNJM_AIND  + ( 1  - ADJUST6_CI_CNJM_AIND )  * SUBST_CI_CNJM_AIND(-1)

log(F_MAT_ASER)  = ADJUST0_F_MAT_ASER  * log(F_n_MAT_ASER)  + ( 1  - ADJUST0_F_MAT_ASER )  * ( log(F_MAT_ASER(-1))  + d(log(F_e_MAT_ASER)) )

QM_CNJN  = MGRM_CNJN  + CIM_CNJN  + CHM_CNJN  + GM_CNJN  + IM_CNJN  + XM_CNJN  + DSM_CNJN

QM_CNJM  = MGRM_CNJM  + CIM_CNJM  + CHM_CNJM  + GM_CNJM  + IM_CNJM  + XM_CNJM  + DSM_CNJM

CIM_CNJM_ASER  = phi_CIM_CNJM_ASER  * CI_CNJM_ASER

CID_CIND_AIND  = ( 1  - phi_CIM_CIND_AIND )  * CI_CIND_AIND

XD_CIND  = ( 1  - phi_XM_CIND )  * X_CIND

verif_PMbis_CSER  = ( PMbis_CSER  / PM_CSER  - 1 )  * 100

SUBST_MGPD_CTRP_CNJM  = ADJUST6_MGPD_CTRP_CNJM  * SUBST_n_MGPD_CTRP_CNJM  + ( 1  - ADJUST6_MGPD_CTRP_CNJM )  * SUBST_MGPD_CTRP_CNJM(-1)

SUBST_MGPD_CTRP_CNJN  = ADJUST6_MGPD_CTRP_CNJN  * SUBST_n_MGPD_CTRP_CNJN  + ( 1  - ADJUST6_MGPD_CTRP_CNJN )  * SUBST_MGPD_CTRP_CNJN(-1)

d(log(CI_CIND_ATPT))  = d(log(F_MAT_ATPT))

PY_n_AIND  = CU_n_AIND  * ( 1  + MARKUP_AIND )

YQbis_CIND  + NTAXPD_CIND  + MGPD_CIND  = QD_CIND

d(log(CI_CIND_ATPO))  = d(log(F_MAT_ATPO))

SUBST_CI_CNJN_ANRE  = ADJUST6_CI_CNJN_ANRE  * SUBST_n_CI_CNJN_ANRE  + ( 1  - ADJUST6_CI_CNJN_ANRE )  * SUBST_CI_CNJN_ANRE(-1)

d(log(X_CNJN))  = d(log(WD_CNJN))  + d(SUBST_X_CNJN)

RBal_Trade_VAL  = Bal_Trade_VAL  / ( PGDP  * GDP )

PE_ANRE  * F_E_ANRE  = 0  + PCI_CNJN_ANRE  * CI_CNJN_ANRE  + PCI_CNJM_ANRE  * CI_CNJM_ANRE

verif_Mbis_CSER  = ( Mbis_CSER  / M_CSER  - 1 )  * 100

PMAT_AIND  * F_MAT_AIND  = 0  + PCI_CIND_AIND  * CI_CIND_AIND  + PCI_CTRP_AIND  * CI_CTRP_AIND  + PCI_CSER_AIND  * CI_CSER_AIND

d(R_n)  = RHO_Rdir_Cons  + RHO_Rdir_P  * d(d(P)  / P(-1))  - RHO_Rdir_UnR  * d(UnR)

PMGRD_CTRP  = PYQSBVAT_CTRP

PI_AIND  * I_AIND  = PID_AIND  * ID_AIND  + PIM_AIND  * IM_AIND

ID_CIND_ATPO  = ( 1  - phi_IM_CIND_ATPO )  * I_CIND_ATPO

d(SUBST_n_CIM_CSER_ATPO)  =  - ES_CIM_CSER_ATPO  * d(log(PCID_CSER_ATPO)  - log(PCIM_CSER_ATPO))

SUBST_XM_CNJN  = ADJUST6_XM_CNJN  * SUBST_n_XM_CNJN  + ( 1  - ADJUST6_XM_CNJN )  * SUBST_XM_CNJN(-1)

SUBST_XM_CNJM  = ADJUST6_XM_CNJM  * SUBST_n_XM_CNJM  + ( 1  - ADJUST6_XM_CNJM )  * SUBST_XM_CNJM(-1)

phi_CIM_CIND_ATPT  = 1  / ( 1  + @elem(CID_CIND_ATPT  / CIM_CIND_ATPT , 2000)  * exp(SUBST_CIM_CIND_ATPT) )

phi_CIM_CIND_ATPO  = 1  / ( 1  + @elem(CID_CIND_ATPO  / CIM_CIND_ATPO , 2000)  * exp(SUBST_CIM_CIND_ATPO) )

ID_CIND_ATPT  = ( 1  - phi_IM_CIND_ATPT )  * I_CIND_ATPT

d(SUBST_n_CIM_CSER_ATPT)  =  - ES_CIM_CSER_ATPT  * d(log(PCID_CSER_ATPT)  - log(PCIM_CSER_ATPT))

SUBST_CI_CTRP_ATPT  = ADJUST6_CI_CTRP_ATPT  * SUBST_n_CI_CTRP_ATPT  + ( 1  - ADJUST6_CI_CTRP_ATPT )  * SUBST_CI_CTRP_ATPT(-1)

SUBST_CHM_CNJM  = ADJUST6_CHM_CNJM  * SUBST_n_CHM_CNJM  + ( 1  - ADJUST6_CHM_CNJM )  * SUBST_CHM_CNJM(-1)

SUBST_CHM_CNJN  = ADJUST6_CHM_CNJN  * SUBST_n_CHM_CNJN  + ( 1  - ADJUST6_CHM_CNJN )  * SUBST_CHM_CNJN(-1)

PROG_MAT_ASER  = PROG_MAT_ASER(-1)  * ( 1  + GR_PROG_MAT_ASER )

d(log(CI_CTRP_AIND))  = d(log(TRSP_AIND))  + d(SUBST_CI_CTRP_AIND)

PMS_CSER  * MS_CSER  = PM_CSER  * M_CSER  + NTAXPM_VAL_CSER  + PMGPM_CSER  * MGPM_CSER

phi_TRSP_CTRP_ATPT  = PCI_CTRP_ATPT  * CI_CTRP_ATPT  / ( 0  + PCI_CTRP_ATPT  * CI_CTRP_ATPT )

PCIM_CTRP_ASER  = PMSBVAT_CTRP

verif_MGRbis_CTRP  = ( MGRbis_CTRP  / MGR_CTRP  - 1 )  * 100

phi_TRSP_CTRP_ATPO  = PCI_CTRP_ATPO  * CI_CTRP_ATPO  / ( 0  + PCI_CTRP_ATPO  * CI_CTRP_ATPO )

SUBST_CI_CTRP_ATPO  = ADJUST6_CI_CTRP_ATPO  * SUBST_n_CI_CTRP_ATPO  + ( 1  - ADJUST6_CI_CTRP_ATPO )  * SUBST_CI_CTRP_ATPO(-1)

UnR  = Un  / LF

POTHPTM_CIND  * OTHPTM_CIND  = ROTHPTM_CIND  * PM_CIND  * M_CIND

ID_ASER  = 0  + ID_CIND_ASER  + ID_CSER_ASER

PYQS_CNJM  * YQS_CNJM  = PYQ_CNJM  * YQ_CNJM  + PMGPD_CNJM  * MGPD_CNJM  + NTAXPD_VAL_CNJM

PYQS_CNJN  * YQS_CNJN  = PYQ_CNJN  * YQ_CNJN  + PMGPD_CNJN  * MGPD_CNJN  + NTAXPD_VAL_CNJN

R  = ADJUST0_R  * R_n  + ( 1  - ADJUST0_R )  * R(-1)

ES_act_K_E_ASER  = ES_K_E_ASER  - ( C_K_ASER  / PROG_K_ASER  / ( C_E_ASER  / PROG_E_ASER )  / @elem(C_K_ASER  / PROG_K_ASER  / ( C_E_ASER  / PROG_E_ASER ) , 2000) < 0.99999 )  * ( log(F_K_ASER  * PROG_K_ASER  / ( F_E_ASER  * PROG_E_ASER )  / @elem(F_K_ASER  * PROG_K_ASER  / ( F_E_ASER  * PROG_E_ASER ) , 2000))  / log(C_K_ASER  / PROG_K_ASER  / ( C_E_ASER  / PROG_E_ASER )  / @elem(C_K_ASER  / PROG_K_ASER  / ( C_E_ASER  / PROG_E_ASER ) , 2000)  * 1.0000000001)  + ES_K_E_ASER )  - ( C_K_ASER  / PROG_K_ASER  / ( C_E_ASER  / PROG_E_ASER )  / @elem(C_K_ASER  / PROG_K_ASER  / ( C_E_ASER  / PROG_E_ASER ) , 2000) > 1.00001 )  * ( log(F_K_ASER  * PROG_K_ASER  / ( F_E_ASER  * PROG_E_ASER )  / @elem(F_K_ASER  * PROG_K_ASER  / ( F_E_ASER  * PROG_E_ASER ) , 2000))  / log(C_K_ASER  / PROG_K_ASER  / ( C_E_ASER  / PROG_E_ASER )  / @elem(C_K_ASER  / PROG_K_ASER  / ( C_E_ASER  / PROG_E_ASER ) , 2000)  * 1.0000000001)  + ES_K_E_ASER )

CIM_CTRP_ASER  = phi_CIM_CTRP_ASER  * CI_CTRP_ASER

NOS_ANRE  = GOS_ANRE  - @elem(PK_ANRE(-1) , 2000)  * Rdep_ANRE  * F_K_ANRE(-1)

PGD_CIND  = PYQSBVAT_CIND

NTAXPM_CIND  = VATM_CIND  + OTHPTM_CIND  + SUBPM_CIND

CIM_CTRP_ANRE  = phi_CIM_CTRP_ANRE  * CI_CTRP_ANRE

d(log(CI_CSER_AIND))  = d(log(F_MAT_AIND))

log(CH_CIND)  = ADJUST0_CH_CIND  * log(CH_n_CIND)  + ( 1  - ADJUST0_CH_CIND )  * ( log(CH_CIND(-1))  + d(log(CH_e_CIND)) )

phi_CIM_CNJM_ASER  = 1  / ( 1  + @elem(CID_CNJM_ASER  / CIM_CNJM_ASER , 2000)  * exp(SUBST_CIM_CNJM_ASER) )

POTHPTD_CNJM  * OTHPTD_CNJM  = ROTHPTD_CNJM  * PYQ_CNJM  * YQ_CNJM

POTHPTD_CNJN  * OTHPTD_CNJN  = ROTHPTD_CNJN  * PYQ_CNJN  * YQ_CNJN

GD_CSER  = ( 1  - phi_GM_CSER )  * G_CSER

d(SUBST_n_CHM_CSER)  =  - ES_CHM_CSER  * d(log(PCHD_CSER)  - log(PCHM_CSER))

OTHPTD_CIND  = @elem(ROTHPTD_CIND , 2000)  * YQ_CIND

PK_AIND  * F_K_AIND  = ( 1  - Rdep_AIND )  * PK_AIND(-1)  * F_K_AIND(-1)  + PI_AIND  * I_AIND

ES_act_E_L_ASER  = ES_E_L_ASER  - ( C_E_ASER  / PROG_E_ASER  / ( C_L_ASER  / PROG_L_ASER )  / @elem(C_E_ASER  / PROG_E_ASER  / ( C_L_ASER  / PROG_L_ASER ) , 2000) < 0.99999 )  * ( log(F_E_ASER  * PROG_E_ASER  / ( F_L_ASER  * PROG_L_ASER )  / @elem(F_E_ASER  * PROG_E_ASER  / ( F_L_ASER  * PROG_L_ASER ) , 2000))  / log(C_E_ASER  / PROG_E_ASER  / ( C_L_ASER  / PROG_L_ASER )  / @elem(C_E_ASER  / PROG_E_ASER  / ( C_L_ASER  / PROG_L_ASER ) , 2000)  * 1.0000000001)  + ES_E_L_ASER )  - ( C_E_ASER  / PROG_E_ASER  / ( C_L_ASER  / PROG_L_ASER )  / @elem(C_E_ASER  / PROG_E_ASER  / ( C_L_ASER  / PROG_L_ASER ) , 2000) > 1.00001 )  * ( log(F_E_ASER  * PROG_E_ASER  / ( F_L_ASER  * PROG_L_ASER )  / @elem(F_E_ASER  * PROG_E_ASER  / ( F_L_ASER  * PROG_L_ASER ) , 2000))  / log(C_E_ASER  / PROG_E_ASER  / ( C_L_ASER  / PROG_L_ASER )  / @elem(C_E_ASER  / PROG_E_ASER  / ( C_L_ASER  / PROG_L_ASER ) , 2000)  * 1.0000000001)  + ES_E_L_ASER )

YQ_CNJN  * PYQ_CNJN  + NTAXPD_VAL_CNJN  + PMGPD_CNJN  * MGPD_CNJN  = PQD_CNJN  * QD_CNJN

YQ_CNJM  * PYQ_CNJM  + NTAXPD_VAL_CNJM  + PMGPD_CNJM  * MGPD_CNJM  = PQD_CNJM  * QD_CNJM

PQD_CSER  * QD_CSER  = PMGRD_CSER  * MGRD_CSER  + PCID_CSER  * CID_CSER  + PCHD_CSER  * CHD_CSER  + PGD_CSER  * GD_CSER  + PID_CSER  * ID_CSER  + PXD_CSER  * XD_CSER  + PDSD_CSER  * DSD_CSER

IM_ATPT  = 0  + IM_CIND_ATPT  + IM_CSER_ATPT

d(log(CI_CNJN_ATPT))  = d(log(F_E_ATPT))  + d(SUBST_CI_CNJN_ATPT)

NOS_AIND  = GOS_AIND  - @elem(PK_AIND(-1) , 2000)  * Rdep_AIND  * F_K_AIND(-1)

d(log(CI_CNJN_ATPO))  = d(log(F_E_ATPO))  + d(SUBST_CI_CNJN_ATPO)

CIbis  = 0  + CI_AIND  + CI_ATPT  + CI_ATPO  + CI_ASER  + CI_ANRE  + CI_ANFO

ES_act_E_E_ANRE  = ES_E_E_ANRE  - ( C_E_ANRE  / PROG_E_ANRE  / ( C_E_ANRE  / PROG_E_ANRE )  / @elem(C_E_ANRE  / PROG_E_ANRE  / ( C_E_ANRE  / PROG_E_ANRE ) , 2000) < 0.99999 )  * ( log(F_E_ANRE  * PROG_E_ANRE  / ( F_E_ANRE  * PROG_E_ANRE )  / @elem(F_E_ANRE  * PROG_E_ANRE  / ( F_E_ANRE  * PROG_E_ANRE ) , 2000))  / log(C_E_ANRE  / PROG_E_ANRE  / ( C_E_ANRE  / PROG_E_ANRE )  / @elem(C_E_ANRE  / PROG_E_ANRE  / ( C_E_ANRE  / PROG_E_ANRE ) , 2000)  * 1.0000000001)  + ES_E_E_ANRE )  - ( C_E_ANRE  / PROG_E_ANRE  / ( C_E_ANRE  / PROG_E_ANRE )  / @elem(C_E_ANRE  / PROG_E_ANRE  / ( C_E_ANRE  / PROG_E_ANRE ) , 2000) > 1.00001 )  * ( log(F_E_ANRE  * PROG_E_ANRE  / ( F_E_ANRE  * PROG_E_ANRE )  / @elem(F_E_ANRE  * PROG_E_ANRE  / ( F_E_ANRE  * PROG_E_ANRE ) , 2000))  / log(C_E_ANRE  / PROG_E_ANRE  / ( C_E_ANRE  / PROG_E_ANRE )  / @elem(C_E_ANRE  / PROG_E_ANRE  / ( C_E_ANRE  / PROG_E_ANRE ) , 2000)  * 1.0000000001)  + ES_E_E_ANRE )

IM_ATPO  = 0  + IM_CIND_ATPO  + IM_CSER_ATPO

OTHPTD_CTRP  = @elem(ROTHPTD_CTRP , 2000)  * YQ_CTRP

PIM_CSER_ASER  = PMSBVAT_CSER

verif_MGRbis_CSER  = ( MGRbis_CSER  / MGR_CSER  - 1 )  * 100

ID_ANRE  = 0  + ID_CIND_ANRE  + ID_CSER_ANRE

OTHPTM_CIND  = @elem(ROTHPTM_CIND , 2000)  * M_CIND

PCIM_ASER  * CIM_ASER  = 0  + PCIM_CIND_ASER  * CIM_CIND_ASER  + PCIM_CTRP_ASER  * CIM_CTRP_ASER  + PCIM_CSER_ASER  * CIM_CSER_ASER  + PCIM_CNJN_ASER  * CIM_CNJN_ASER  + PCIM_CNJM_ASER  * CIM_CNJM_ASER

Mbis_CNJM  + NTAXPM_CNJM  + MGPM_CNJM  = QM_CNJM

Mbis_CNJN  + NTAXPM_CNJN  + MGPM_CNJN  = QM_CNJN

ES_act_L_K_ATPO  = ES_L_K_ATPO  - ( C_L_ATPO  / PROG_L_ATPO  / ( C_K_ATPO  / PROG_K_ATPO )  / @elem(C_L_ATPO  / PROG_L_ATPO  / ( C_K_ATPO  / PROG_K_ATPO ) , 2000) < 0.99999 )  * ( log(F_L_ATPO  * PROG_L_ATPO  / ( F_K_ATPO  * PROG_K_ATPO )  / @elem(F_L_ATPO  * PROG_L_ATPO  / ( F_K_ATPO  * PROG_K_ATPO ) , 2000))  / log(C_L_ATPO  / PROG_L_ATPO  / ( C_K_ATPO  / PROG_K_ATPO )  / @elem(C_L_ATPO  / PROG_L_ATPO  / ( C_K_ATPO  / PROG_K_ATPO ) , 2000)  * 1.0000000001)  + ES_L_K_ATPO )  - ( C_L_ATPO  / PROG_L_ATPO  / ( C_K_ATPO  / PROG_K_ATPO )  / @elem(C_L_ATPO  / PROG_L_ATPO  / ( C_K_ATPO  / PROG_K_ATPO ) , 2000) > 1.00001 )  * ( log(F_L_ATPO  * PROG_L_ATPO  / ( F_K_ATPO  * PROG_K_ATPO )  / @elem(F_L_ATPO  * PROG_L_ATPO  / ( F_K_ATPO  * PROG_K_ATPO ) , 2000))  / log(C_L_ATPO  / PROG_L_ATPO  / ( C_K_ATPO  / PROG_K_ATPO )  / @elem(C_L_ATPO  / PROG_L_ATPO  / ( C_K_ATPO  / PROG_K_ATPO ) , 2000)  * 1.0000000001)  + ES_L_K_ATPO )

ES_act_L_K_ATPT  = ES_L_K_ATPT  - ( C_L_ATPT  / PROG_L_ATPT  / ( C_K_ATPT  / PROG_K_ATPT )  / @elem(C_L_ATPT  / PROG_L_ATPT  / ( C_K_ATPT  / PROG_K_ATPT ) , 2000) < 0.99999 )  * ( log(F_L_ATPT  * PROG_L_ATPT  / ( F_K_ATPT  * PROG_K_ATPT )  / @elem(F_L_ATPT  * PROG_L_ATPT  / ( F_K_ATPT  * PROG_K_ATPT ) , 2000))  / log(C_L_ATPT  / PROG_L_ATPT  / ( C_K_ATPT  / PROG_K_ATPT )  / @elem(C_L_ATPT  / PROG_L_ATPT  / ( C_K_ATPT  / PROG_K_ATPT ) , 2000)  * 1.0000000001)  + ES_L_K_ATPT )  - ( C_L_ATPT  / PROG_L_ATPT  / ( C_K_ATPT  / PROG_K_ATPT )  / @elem(C_L_ATPT  / PROG_L_ATPT  / ( C_K_ATPT  / PROG_K_ATPT ) , 2000) > 1.00001 )  * ( log(F_L_ATPT  * PROG_L_ATPT  / ( F_K_ATPT  * PROG_K_ATPT )  / @elem(F_L_ATPT  * PROG_L_ATPT  / ( F_K_ATPT  * PROG_K_ATPT ) , 2000))  / log(C_L_ATPT  / PROG_L_ATPT  / ( C_K_ATPT  / PROG_K_ATPT )  / @elem(C_L_ATPT  / PROG_L_ATPT  / ( C_K_ATPT  / PROG_K_ATPT ) , 2000)  * 1.0000000001)  + ES_L_K_ATPT )

ES_act_L_E_ASER  = ES_L_E_ASER  - ( C_L_ASER  / PROG_L_ASER  / ( C_E_ASER  / PROG_E_ASER )  / @elem(C_L_ASER  / PROG_L_ASER  / ( C_E_ASER  / PROG_E_ASER ) , 2000) < 0.99999 )  * ( log(F_L_ASER  * PROG_L_ASER  / ( F_E_ASER  * PROG_E_ASER )  / @elem(F_L_ASER  * PROG_L_ASER  / ( F_E_ASER  * PROG_E_ASER ) , 2000))  / log(C_L_ASER  / PROG_L_ASER  / ( C_E_ASER  / PROG_E_ASER )  / @elem(C_L_ASER  / PROG_L_ASER  / ( C_E_ASER  / PROG_E_ASER ) , 2000)  * 1.0000000001)  + ES_L_E_ASER )  - ( C_L_ASER  / PROG_L_ASER  / ( C_E_ASER  / PROG_E_ASER )  / @elem(C_L_ASER  / PROG_L_ASER  / ( C_E_ASER  / PROG_E_ASER ) , 2000) > 1.00001 )  * ( log(F_L_ASER  * PROG_L_ASER  / ( F_E_ASER  * PROG_E_ASER )  / @elem(F_L_ASER  * PROG_L_ASER  / ( F_E_ASER  * PROG_E_ASER ) , 2000))  / log(C_L_ASER  / PROG_L_ASER  / ( C_E_ASER  / PROG_E_ASER )  / @elem(C_L_ASER  / PROG_L_ASER  / ( C_E_ASER  / PROG_E_ASER ) , 2000)  * 1.0000000001)  + ES_L_E_ASER )

d(SUBST_n_CHM_CIND)  =  - ES_CHM_CIND  * d(log(PCHD_CIND)  - log(PCHM_CIND))

PIM_ATPO  * IM_ATPO  = 0  + PIM_CIND_ATPO  * IM_CIND_ATPO  + PIM_CSER_ATPO  * IM_CSER_ATPO

phi_IM_CSER_ANRE  = 1  / ( 1  + @elem(ID_CSER_ANRE  / IM_CSER_ANRE , 2000)  * exp(SUBST_IM_CSER_ANRE) )

PIM_CIND  * IM_CIND  = 0  + PIM_CIND_AIND  * IM_CIND_AIND  + PIM_CIND_ATPT  * IM_CIND_ATPT  + PIM_CIND_ATPO  * IM_CIND_ATPO  + PIM_CIND_ASER  * IM_CIND_ASER  + PIM_CIND_ANRE  * IM_CIND_ANRE  + PIM_CIND_ANFO  * IM_CIND_ANFO

CI_ANRE  = CID_ANRE  + CIM_ANRE

PIM_ATPT  * IM_ATPT  = 0  + PIM_CIND_ATPT  * IM_CIND_ATPT  + PIM_CSER_ATPT  * IM_CSER_ATPT

PCIM_CNJM  * CIM_CNJM  = 0  + PCIM_CNJM_AIND  * CIM_CNJM_AIND  + PCIM_CNJM_ATPT  * CIM_CNJM_ATPT  + PCIM_CNJM_ATPO  * CIM_CNJM_ATPO  + PCIM_CNJM_ASER  * CIM_CNJM_ASER  + PCIM_CNJM_ANRE  * CIM_CNJM_ANRE  + PCIM_CNJM_ANFO  * CIM_CNJM_ANFO

PCIM_CNJN  * CIM_CNJN  = 0  + PCIM_CNJN_AIND  * CIM_CNJN_AIND  + PCIM_CNJN_ATPT  * CIM_CNJN_ATPT  + PCIM_CNJN_ATPO  * CIM_CNJN_ATPO  + PCIM_CNJN_ASER  * CIM_CNJN_ASER  + PCIM_CNJN_ANRE  * CIM_CNJN_ANRE  + PCIM_CNJN_ANFO  * CIM_CNJN_ANFO

PK_ATPO  * F_K_ATPO  = ( 1  - Rdep_ATPO )  * PK_ATPO(-1)  * F_K_ATPO(-1)  + PI_ATPO  * I_ATPO

PMGPM_CSER_CNJM  = PMGPD_CSER_CNJM

PMGPM_CSER_CNJN  = PMGPD_CSER_CNJN

VA_ANFO  = Y_ANFO  - CI_ANFO

d(log(IA_AIND))  = ADJUST_IA_Ye_AIND  * d(log(Y_e_AIND))  + ADJUST_IA_IA1_AIND  * d(log(IA_AIND(-1)))  + ADJUST_IA_SUBST_AIND  * d(SUBST_F_K_AIND)  + ADJUST_IA_Kn_AIND  * ( log(F_n_K_AIND(-1))  - log(F_K_AIND(-1)) )

PK_ATPT  * F_K_ATPT  = ( 1  - Rdep_ATPT )  * PK_ATPT(-1)  * F_K_ATPT(-1)  + PI_ATPT  * I_ATPT

SUBPD  = 0  + SUBPD_CIND  + SUBPD_CTRP  + SUBPD_CSER  + SUBPD_CNJN  + SUBPD_CNJM

CID_CTRP_ANRE  = ( 1  - phi_CIM_CTRP_ANRE )  * CI_CTRP_ANRE

phi_MGPD_CTRP_CNJM  = PMGPD_CTRP_CNJM  * MGPD_CTRP_CNJM  / ( 0  + PMGPD_CIND_CNJM  * MGPD_CIND_CNJM  + PMGPD_CTRP_CNJM  * MGPD_CTRP_CNJM  + PMGPD_CSER_CNJM  * MGPD_CSER_CNJM  + PMGPD_CNJN_CNJM  * MGPD_CNJN_CNJM  + PMGPD_CNJM_CNJM  * MGPD_CNJM_CNJM )

phi_MGPD_CTRP_CNJN  = PMGPD_CTRP_CNJN  * MGPD_CTRP_CNJN  / ( 0  + PMGPD_CIND_CNJN  * MGPD_CIND_CNJN  + PMGPD_CTRP_CNJN  * MGPD_CTRP_CNJN  + PMGPD_CSER_CNJN  * MGPD_CSER_CNJN  + PMGPD_CNJN_CNJN  * MGPD_CNJN_CNJN  + PMGPD_CNJM_CNJN  * MGPD_CNJM_CNJN )

PVATM_CIND  * VATM_CIND  = RVATM_CIND  * PCHM_CIND  * CHM_CIND  / ( 1  + RVATM_CIND )

phi_IM_CSER_AIND  = 1  / ( 1  + @elem(ID_CSER_AIND  / IM_CSER_AIND , 2000)  * exp(SUBST_IM_CSER_AIND) )

phi_CIM_CIND_ANFO  = 1  / ( 1  + @elem(CID_CIND_ANFO  / CIM_CIND_ANFO , 2000)  * exp(SUBST_CIM_CIND_ANFO) )

d(SUBST_n_CI_CTRP_ANRE)  = 0  +  - ES_TRSP_CTRP_CTRP_ANRE  * phi_TRSP_CTRP_ANRE  * d(log(PCI_CTRP_ANRE)  - log(PCI_CTRP_ANRE))

PMGPD_CTRP_CNJN  * MGR_CTRP  = PMGRD_CTRP  * MGRD_CTRP  + PMGRM_CTRP  * MGRM_CTRP

PYQSBVAT_CNJM  * YQSBVAT_CNJM  = PYQ_CNJM  * YQ_CNJM  + POTHPTD_CNJM  * OTHPTD_CNJM  + PSUBPD_CNJM  * SUBPD_CNJM  + PMGPD_CNJM  * MGPD_CNJM

PYQSBVAT_CNJN  * YQSBVAT_CNJN  = PYQ_CNJN  * YQ_CNJN  + POTHPTD_CNJN  * OTHPTD_CNJN  + PSUBPD_CNJN  * SUBPD_CNJN  + PMGPD_CNJN  * MGPD_CNJN

phi_E_CNJN_AIND  = PCI_CNJN_AIND  * CI_CNJN_AIND  / ( 0  + PCI_CNJN_AIND  * CI_CNJN_AIND  + PCI_CNJM_AIND  * CI_CNJM_AIND )

d(log(CH_e_CTRP))  = ADJUST1_CH_CTRP  * d(log(CH_e_CTRP(-1)))  + ADJUST2_CH_CTRP  * d(log(CH_CTRP(-1)))  + ADJUST3_CH_CTRP  * d(log(CH_n_CTRP))

PY  * Y  = 0  + PY_AIND  * Y_AIND  + PY_ATPT  * Y_ATPT  + PY_ATPO  * Y_ATPO  + PY_ASER  * Y_ASER  + PY_ANRE  * Y_ANRE  + PY_ANFO  * Y_ANFO

PY_n_ASER  = CU_n_ASER  * ( 1  + MARKUP_ASER )

PG  * G  = PGD  * GD  + PGM  * GM

PMGPD_CNJM  * MGPD_CNJM  = 0  + PMGPD_CTRP_CNJM  * MGPD_CTRP_CNJM  + PMGPD_CSER_CNJM  * MGPD_CSER_CNJM

PMGPD_CNJN  * MGPD_CNJN  = 0  + PMGPD_CTRP_CNJN  * MGPD_CTRP_CNJN  + PMGPD_CSER_CNJN  * MGPD_CSER_CNJN

PI  * I  = PID  * ID  + PIM  * IM

ES_act_E_L_AIND  = ES_E_L_AIND  - ( C_E_AIND  / PROG_E_AIND  / ( C_L_AIND  / PROG_L_AIND )  / @elem(C_E_AIND  / PROG_E_AIND  / ( C_L_AIND  / PROG_L_AIND ) , 2000) < 0.99999 )  * ( log(F_E_AIND  * PROG_E_AIND  / ( F_L_AIND  * PROG_L_AIND )  / @elem(F_E_AIND  * PROG_E_AIND  / ( F_L_AIND  * PROG_L_AIND ) , 2000))  / log(C_E_AIND  / PROG_E_AIND  / ( C_L_AIND  / PROG_L_AIND )  / @elem(C_E_AIND  / PROG_E_AIND  / ( C_L_AIND  / PROG_L_AIND ) , 2000)  * 1.0000000001)  + ES_E_L_AIND )  - ( C_E_AIND  / PROG_E_AIND  / ( C_L_AIND  / PROG_L_AIND )  / @elem(C_E_AIND  / PROG_E_AIND  / ( C_L_AIND  / PROG_L_AIND ) , 2000) > 1.00001 )  * ( log(F_E_AIND  * PROG_E_AIND  / ( F_L_AIND  * PROG_L_AIND )  / @elem(F_E_AIND  * PROG_E_AIND  / ( F_L_AIND  * PROG_L_AIND ) , 2000))  / log(C_E_AIND  / PROG_E_AIND  / ( C_L_AIND  / PROG_L_AIND )  / @elem(C_E_AIND  / PROG_E_AIND  / ( C_L_AIND  / PROG_L_AIND ) , 2000)  * 1.0000000001)  + ES_E_L_AIND )

verif_phi_TRSP_ASER  = ( 1  - ( 0  + phi_TRSP_CTRP_ASER ) )  * 100

IM_ANRE  = 0  + IM_CIND_ANRE  + IM_CSER_ANRE

d(log(PROP_INC_G_VAL_e))  = ADJUST1_PROP_INC_G_VAL  * d(log(PROP_INC_G_VAL_e(-1)))  + ADJUST2_PROP_INC_G_VAL  * d(log(PROP_INC_G_VAL(-1)))  + ADJUST3_PROP_INC_G_VAL  * d(log(PROP_INC_G_VAL_n))

C_E_ANRE  = PE_ANRE

PI_ASER  * I_ASER  = PID_ASER  * ID_ASER  + PIM_ASER  * IM_ASER

PROP_INC_G_VAL_n  = phi_PROP_INC_G  * PNOS  * NOS  + ( PNOS  * NOS <= 1e-05 )  * ( 1e-05  - phi_PROP_INC_G  * PNOS  * NOS )

PYQ_CIND  * YQ_CIND  = 0  + PY_AIND  * Y_CIND_AIND  + PY_ASER  * Y_CIND_ASER  + PY_ANRE  * Y_CIND_ANRE  + PY_ANFO  * Y_CIND_ANFO

PID_ATPT  * ID_ATPT  = 0  + PID_CIND_ATPT  * ID_CIND_ATPT  + PID_CSER_ATPT  * ID_CSER_ATPT

ES_act_K_L_ASER  = ES_K_L_ASER  - ( C_K_ASER  / PROG_K_ASER  / ( C_L_ASER  / PROG_L_ASER )  / @elem(C_K_ASER  / PROG_K_ASER  / ( C_L_ASER  / PROG_L_ASER ) , 2000) < 0.99999 )  * ( log(F_K_ASER  * PROG_K_ASER  / ( F_L_ASER  * PROG_L_ASER )  / @elem(F_K_ASER  * PROG_K_ASER  / ( F_L_ASER  * PROG_L_ASER ) , 2000))  / log(C_K_ASER  / PROG_K_ASER  / ( C_L_ASER  / PROG_L_ASER )  / @elem(C_K_ASER  / PROG_K_ASER  / ( C_L_ASER  / PROG_L_ASER ) , 2000)  * 1.0000000001)  + ES_K_L_ASER )  - ( C_K_ASER  / PROG_K_ASER  / ( C_L_ASER  / PROG_L_ASER )  / @elem(C_K_ASER  / PROG_K_ASER  / ( C_L_ASER  / PROG_L_ASER ) , 2000) > 1.00001 )  * ( log(F_K_ASER  * PROG_K_ASER  / ( F_L_ASER  * PROG_L_ASER )  / @elem(F_K_ASER  * PROG_K_ASER  / ( F_L_ASER  * PROG_L_ASER ) , 2000))  / log(C_K_ASER  / PROG_K_ASER  / ( C_L_ASER  / PROG_L_ASER )  / @elem(C_K_ASER  / PROG_K_ASER  / ( C_L_ASER  / PROG_L_ASER ) , 2000)  * 1.0000000001)  + ES_K_L_ASER )

VATM  = 0  + VATM_CIND  + VATM_CTRP  + VATM_CSER  + VATM_CNJN  + VATM_CNJM

d(SUBST_n_CIM_CSER_ANRE)  =  - ES_CIM_CSER_ANRE  * d(log(PCID_CSER_ANRE)  - log(PCIM_CSER_ANRE))

d(log(W_n_ASER))  = RHO_W_Cons_ASER  + RHO_W_P_ASER  * d(log(P))  + RHO_W_Pe_ASER  * d(log(P_e))  + RHO_W_PROG_ASER  * d(log(PROG_L_ASER))  - RHO_W_U_ASER  * ( UnR  - DNAIRU )  - RHO_W_DU_ASER  * d(UnR)  + RHO_W_L_ASER  * d(log(F_L_ASER)  - log(F_L))

PGDP_CSER  * GDP_CSER  = PCH_CSER  * CH_CSER  + PG_CSER  * G_CSER  + PI_CSER  * I_CSER  + PX_CSER  * X_CSER  + PDS_CSER  * DS_CSER  - PM_CSER  * M_CSER

d(SUBST_n_CI_CNJN_ASER)  = 0  +  - ES_NRJ_CNJN_CNJN_ASER  * phi_E_CNJN_ASER  * d(log(PCI_CNJN_ASER)  - log(PCI_CNJN_ASER))  +  - ES_NRJ_CNJN_CNJM_ASER  * phi_E_CNJM_ASER  * d(log(PCI_CNJN_ASER)  - log(PCI_CNJM_ASER))

PIbis  * Ibis  = 0  + PI_AIND  * I_AIND  + PI_ATPT  * I_ATPT  + PI_ATPO  * I_ATPO  + PI_ASER  * I_ASER  + PI_ANRE  * I_ANRE  + PI_ANFO  * I_ANFO

SUBST_IM_CSER_ANFO  = ADJUST6_IM_CSER_ANFO  * SUBST_n_IM_CSER_ANFO  + ( 1  - ADJUST6_IM_CSER_ANFO )  * SUBST_IM_CSER_ANFO(-1)

ES_act_L_L_AIND  = ES_L_L_AIND  - ( C_L_AIND  / PROG_L_AIND  / ( C_L_AIND  / PROG_L_AIND )  / @elem(C_L_AIND  / PROG_L_AIND  / ( C_L_AIND  / PROG_L_AIND ) , 2000) < 0.99999 )  * ( log(F_L_AIND  * PROG_L_AIND  / ( F_L_AIND  * PROG_L_AIND )  / @elem(F_L_AIND  * PROG_L_AIND  / ( F_L_AIND  * PROG_L_AIND ) , 2000))  / log(C_L_AIND  / PROG_L_AIND  / ( C_L_AIND  / PROG_L_AIND )  / @elem(C_L_AIND  / PROG_L_AIND  / ( C_L_AIND  / PROG_L_AIND ) , 2000)  * 1.0000000001)  + ES_L_L_AIND )  - ( C_L_AIND  / PROG_L_AIND  / ( C_L_AIND  / PROG_L_AIND )  / @elem(C_L_AIND  / PROG_L_AIND  / ( C_L_AIND  / PROG_L_AIND ) , 2000) > 1.00001 )  * ( log(F_L_AIND  * PROG_L_AIND  / ( F_L_AIND  * PROG_L_AIND )  / @elem(F_L_AIND  * PROG_L_AIND  / ( F_L_AIND  * PROG_L_AIND ) , 2000))  / log(C_L_AIND  / PROG_L_AIND  / ( C_L_AIND  / PROG_L_AIND )  / @elem(C_L_AIND  / PROG_L_AIND  / ( C_L_AIND  / PROG_L_AIND ) , 2000)  * 1.0000000001)  + ES_L_L_AIND )

PDS_CIND  * DS_CIND  = PDSD_CIND  * DSD_CIND  + PDSM_CIND  * DSM_CIND

PE_ASER  * F_E_ASER  = 0  + PCI_CNJN_ASER  * CI_CNJN_ASER  + PCI_CNJM_ASER  * CI_CNJM_ASER

d(log(Y_e_ATPO))  = ADJUST_Ye_Y_ATPO  * d(log(Y_ATPO))  + ( 1  - ADJUST_Ye_Y_ATPO )  * d(log(Y_e_ATPO(-1)))

d(log(Y_e_ATPT))  = ADJUST_Ye_Y_ATPT  * d(log(Y_ATPT))  + ( 1  - ADJUST_Ye_Y_ATPT )  * d(log(Y_e_ATPT(-1)))

phi_GM_CTRP  = 1  / ( 1  + @elem(GD_CTRP  / GM_CTRP , 2000)  * exp(SUBST_GM_CTRP) )

Verif_ALL  = ( 0  + verif_phi_F_AIND ^ 2  + verif_phi_F_ATPT ^ 2  + verif_phi_F_ATPO ^ 2  + verif_phi_F_ASER ^ 2  + verif_phi_F_ANRE ^ 2  + verif_phi_F_ANFO ^ 2  + 0  + verif_phi_MGPD_CIND ^ 2  + verif_phi_MGPD_CTRP ^ 2  + verif_phi_MGPD_CSER ^ 2  + verif_phi_MGPD_CNJN ^ 2  + verif_phi_MGPD_CNJM ^ 2  + 0  + verif_phi_MGPM_CIND ^ 2  + verif_phi_MGPM_CTRP ^ 2  + verif_phi_MGPM_CSER ^ 2  + verif_phi_MGPM_CNJN ^ 2  + verif_phi_MGPM_CNJM ^ 2  + 0  + verif_phi_E_AIND ^ 2  + verif_phi_E_ATPT ^ 2  + verif_phi_E_ATPO ^ 2  + verif_phi_E_ASER ^ 2  + verif_phi_E_ANRE ^ 2  + verif_phi_E_ANFO ^ 2  + 0  + verif_phi_TRSP_AIND ^ 2  + verif_phi_TRSP_ATPT ^ 2  + verif_phi_TRSP_ATPO ^ 2  + verif_phi_TRSP_ASER ^ 2  + verif_phi_TRSP_ANRE ^ 2  + verif_phi_TRSP_ANFO ^ 2  + 0  + verif_Mbis_CIND ^ 2  + verif_Mbis_CTRP ^ 2  + verif_Mbis_CSER ^ 2  + verif_Mbis_CNJN ^ 2  + verif_Mbis_CNJM ^ 2  + 0  + verif_PMbis_CIND ^ 2  + verif_PMbis_CTRP ^ 2  + verif_PMbis_CSER ^ 2  + verif_PMbis_CNJN ^ 2  + verif_PMbis_CNJM ^ 2  + 0  + verif_MGRbis_CIND ^ 2  + verif_MGRbis_CTRP ^ 2  + verif_MGRbis_CSER ^ 2  + verif_MGRbis_CNJN ^ 2  + verif_MGRbis_CNJM ^ 2  + 0  + verif_PMGRbis_CIND ^ 2  + verif_PMGRbis_CTRP ^ 2  + verif_PMGRbis_CSER ^ 2  + verif_PMGRbis_CNJN ^ 2  + verif_PMGRbis_CNJM ^ 2  + 0  + verif_YQbis_CIND ^ 2  + verif_YQbis_CTRP ^ 2  + verif_YQbis_CSER ^ 2  + verif_YQbis_CNJN ^ 2  + verif_YQbis_CNJM ^ 2  + 0  + verif_PYQbis_CIND ^ 2  + verif_PYQbis_CTRP ^ 2  + verif_PYQbis_CSER ^ 2  + verif_PYQbis_CNJN ^ 2  + verif_PYQbis_CNJM ^ 2  + Verif_PCH_CES ^ 2  + Verif_phi_MCH ^ 2  + Verif_phi_CH ^ 2  + Verif_GDPbis ^ 2  + Verif_PGDPbis ^ 2  + Verif_GDPter ^ 2  + Verif_PGDPter ^ 2  + Verif_GDP4 ^ 2  + Verif_PGDP4 ^ 2  + Verif_CIbis ^ 2  + Verif_PCIbis ^ 2  + Verif_Ibis ^ 2  + Verif_PIbis ^ 2  + Verif_YQ ^ 2  + Verif_PYQ ^ 2  + Verif_Bal_G_Prim_VAbis ^ 2 ) ^ ( 1  / 2 )

NTAXPD_CNJN  = VATD_CNJN  + OTHPTD_CNJN  + SUBPD_CNJN

NTAXPD_CNJM  = VATD_CNJM  + OTHPTD_CNJM  + SUBPD_CNJM

d(log(CI_CNJM_ANRE))  = d(log(F_E_ANRE))  + d(SUBST_CI_CNJM_ANRE)

d(SUBST_n_CI_CNJM_ANFO)  = 0  +  - ES_NRJ_CNJM_CNJN_ANFO  * phi_E_CNJN_ANFO  * d(log(PCI_CNJM_ANFO)  - log(PCI_CNJN_ANFO))  +  - ES_NRJ_CNJM_CNJM_ANFO  * phi_E_CNJM_ANFO  * d(log(PCI_CNJM_ANFO)  - log(PCI_CNJM_ANFO))

d(log(CI_CNJN_ANFO))  = d(log(F_E_ANFO))  + d(SUBST_CI_CNJN_ANFO)

PID_CIND_ANFO  = PYQSBVAT_CIND

PCID_CTRP_ANRE  = PYQSBVAT_CTRP

PCIM_ATPO  * CIM_ATPO  = 0  + PCIM_CIND_ATPO  * CIM_CIND_ATPO  + PCIM_CTRP_ATPO  * CIM_CTRP_ATPO  + PCIM_CSER_ATPO  * CIM_CSER_ATPO  + PCIM_CNJN_ATPO  * CIM_CNJN_ATPO  + PCIM_CNJM_ATPO  * CIM_CNJM_ATPO

verif_phi_MGPM_CIND  = ( 1  - ( 0  + phi_MGPM_CIND_CIND  + phi_MGPM_CTRP_CIND  + phi_MGPM_CSER_CIND  + phi_MGPM_CNJN_CIND  + phi_MGPM_CNJM_CIND ) )  * 100

d(log(P_e))  = ADJUST_Pe_P1  * d(log(P(-1)))  + ( 1  - ADJUST_Pe_P1 )  * d(log(P_e(-1)))

PY_n_ANRE  = CU_n_ANRE  * ( 1  + MARKUP_ANRE )

PMGRbis_CTRP  * MGRbis_CTRP  = PMGRD_CTRP  * MGRD_CTRP  + PMGRM_CTRP  * MGRM_CTRP

PID_ANFO  * ID_ANFO  = 0  + PID_CIND_ANFO  * ID_CIND_ANFO  + PID_CSER_ANFO  * ID_CSER_ANFO

CIM  = 0  + CIM_CIND  + CIM_CTRP  + CIM_CSER  + CIM_CNJN  + CIM_CNJM

SUBST_F_K_ASER  = ADJUST6_F_K_ASER  * SUBST_n_F_K_ASER  + ( 1  - ADJUST6_F_K_ASER )  * SUBST_F_K_ASER(-1)

PCIM_ATPT  * CIM_ATPT  = 0  + PCIM_CIND_ATPT  * CIM_CIND_ATPT  + PCIM_CTRP_ATPT  * CIM_CTRP_ATPT  + PCIM_CSER_ATPT  * CIM_CSER_ATPT  + PCIM_CNJN_ATPT  * CIM_CNJN_ATPT  + PCIM_CNJM_ATPT  * CIM_CNJM_ATPT

CIM_CIND_ATPO  = phi_CIM_CIND_ATPO  * CI_CIND_ATPO

ES_act_E_MAT_ATPT  = ES_E_MAT_ATPT  - ( C_E_ATPT  / PROG_E_ATPT  / ( C_MAT_ATPT  / PROG_MAT_ATPT )  / @elem(C_E_ATPT  / PROG_E_ATPT  / ( C_MAT_ATPT  / PROG_MAT_ATPT ) , 2000) < 0.99999 )  * ( log(F_E_ATPT  * PROG_E_ATPT  / ( F_MAT_ATPT  * PROG_MAT_ATPT )  / @elem(F_E_ATPT  * PROG_E_ATPT  / ( F_MAT_ATPT  * PROG_MAT_ATPT ) , 2000))  / log(C_E_ATPT  / PROG_E_ATPT  / ( C_MAT_ATPT  / PROG_MAT_ATPT )  / @elem(C_E_ATPT  / PROG_E_ATPT  / ( C_MAT_ATPT  / PROG_MAT_ATPT ) , 2000)  * 1.0000000001)  + ES_E_MAT_ATPT )  - ( C_E_ATPT  / PROG_E_ATPT  / ( C_MAT_ATPT  / PROG_MAT_ATPT )  / @elem(C_E_ATPT  / PROG_E_ATPT  / ( C_MAT_ATPT  / PROG_MAT_ATPT ) , 2000) > 1.00001 )  * ( log(F_E_ATPT  * PROG_E_ATPT  / ( F_MAT_ATPT  * PROG_MAT_ATPT )  / @elem(F_E_ATPT  * PROG_E_ATPT  / ( F_MAT_ATPT  * PROG_MAT_ATPT ) , 2000))  / log(C_E_ATPT  / PROG_E_ATPT  / ( C_MAT_ATPT  / PROG_MAT_ATPT )  / @elem(C_E_ATPT  / PROG_E_ATPT  / ( C_MAT_ATPT  / PROG_MAT_ATPT ) , 2000)  * 1.0000000001)  + ES_E_MAT_ATPT )

d(SUBST_n_CIM_CIND_ATPT)  =  - ES_CIM_CIND_ATPT  * d(log(PCID_CIND_ATPT)  - log(PCIM_CIND_ATPT))

ES_act_E_MAT_ATPO  = ES_E_MAT_ATPO  - ( C_E_ATPO  / PROG_E_ATPO  / ( C_MAT_ATPO  / PROG_MAT_ATPO )  / @elem(C_E_ATPO  / PROG_E_ATPO  / ( C_MAT_ATPO  / PROG_MAT_ATPO ) , 2000) < 0.99999 )  * ( log(F_E_ATPO  * PROG_E_ATPO  / ( F_MAT_ATPO  * PROG_MAT_ATPO )  / @elem(F_E_ATPO  * PROG_E_ATPO  / ( F_MAT_ATPO  * PROG_MAT_ATPO ) , 2000))  / log(C_E_ATPO  / PROG_E_ATPO  / ( C_MAT_ATPO  / PROG_MAT_ATPO )  / @elem(C_E_ATPO  / PROG_E_ATPO  / ( C_MAT_ATPO  / PROG_MAT_ATPO ) , 2000)  * 1.0000000001)  + ES_E_MAT_ATPO )  - ( C_E_ATPO  / PROG_E_ATPO  / ( C_MAT_ATPO  / PROG_MAT_ATPO )  / @elem(C_E_ATPO  / PROG_E_ATPO  / ( C_MAT_ATPO  / PROG_MAT_ATPO ) , 2000) > 1.00001 )  * ( log(F_E_ATPO  * PROG_E_ATPO  / ( F_MAT_ATPO  * PROG_MAT_ATPO )  / @elem(F_E_ATPO  * PROG_E_ATPO  / ( F_MAT_ATPO  * PROG_MAT_ATPO ) , 2000))  / log(C_E_ATPO  / PROG_E_ATPO  / ( C_MAT_ATPO  / PROG_MAT_ATPO )  / @elem(C_E_ATPO  / PROG_E_ATPO  / ( C_MAT_ATPO  / PROG_MAT_ATPO ) , 2000)  * 1.0000000001)  + ES_E_MAT_ATPO )

d(SUBST_n_CIM_CIND_ATPO)  =  - ES_CIM_CIND_ATPO  * d(log(PCID_CIND_ATPO)  - log(PCIM_CIND_ATPO))

PCI_CNJM_ASER  * CI_CNJM_ASER  = PCID_CNJM_ASER  * CID_CNJM_ASER  + PCIM_CNJM_ASER  * CIM_CNJM_ASER

CIM_CIND_ATPT  = phi_CIM_CIND_ATPT  * CI_CIND_ATPT

ID_CIND  = 0  + ID_CIND_AIND  + ID_CIND_ATPT  + ID_CIND_ATPO  + ID_CIND_ASER  + ID_CIND_ANRE  + ID_CIND_ANFO

d(log(CH_e_CSER))  = ADJUST1_CH_CSER  * d(log(CH_e_CSER(-1)))  + ADJUST2_CH_CSER  * d(log(CH_CSER(-1)))  + ADJUST3_CH_CSER  * d(log(CH_n_CSER))

phi_E_CNJN_ANFO  = PCI_CNJN_ANFO  * CI_CNJN_ANFO  / ( 0  + PCI_CNJN_ANFO  * CI_CNJN_ANFO  + PCI_CNJM_ANFO  * CI_CNJM_ANFO )

SUBST_CIM_CSER_ANFO  = ADJUST6_CIM_CSER_ANFO  * SUBST_n_CIM_CSER_ANFO  + ( 1  - ADJUST6_CIM_CSER_ANFO )  * SUBST_CIM_CSER_ANFO(-1)

SUBST_CIM_CTRP_ANRE  = ADJUST6_CIM_CTRP_ANRE  * SUBST_n_CIM_CTRP_ANRE  + ( 1  - ADJUST6_CIM_CTRP_ANRE )  * SUBST_CIM_CTRP_ANRE(-1)

PMGPM_CNJN  * MGPM_CNJN  = 0  + PMGPM_CTRP_CNJN  * MGPM_CTRP_CNJN  + PMGPM_CSER_CNJN  * MGPM_CSER_CNJN

PMGPM_CNJM  * MGPM_CNJM  = 0  + PMGPM_CTRP_CNJM  * MGPM_CTRP_CNJM  + PMGPM_CSER_CNJM  * MGPM_CSER_CNJM

log(F_L_AIND)  = ADJUST0_F_L_AIND  * log(F_n_L_AIND)  + ( 1  - ADJUST0_F_L_AIND )  * ( log(F_L_AIND(-1))  + d(log(F_e_L_AIND)) )

I_ANRE  = ID_ANRE  + IM_ANRE

phi_CIM_CNJN_ANFO  = 1  / ( 1  + @elem(CID_CNJN_ANFO  / CIM_CNJN_ANFO , 2000)  * exp(SUBST_CIM_CNJN_ANFO) )

PCID_CNJN_ATPT  = PYQSBVAT_CNJN

GDPbis  = 0  + GDP_CIND  + GDP_CTRP  + GDP_CSER  + GDP_CNJN  + GDP_CNJM

d(log(YQSBVAT_CNJM))  = d(log(YQ_CNJM))

d(log(YQSBVAT_CNJN))  = d(log(YQ_CNJN))

d(log(YQSBVAT_CSER))  = d(log(YQ_CSER))

d(SUBST_n_F_MAT_AIND)  = 0  +  - ES_MAT_K_AIND  * phi_K_AIND(-1)  * d(log(C_MAT_AIND  / PROG_MAT_AIND)  - log(C_K_AIND  / PROG_K_AIND))  +  - ES_MAT_L_AIND  * phi_L_AIND(-1)  * d(log(C_MAT_AIND  / PROG_MAT_AIND)  - log(C_L_AIND  / PROG_L_AIND))  +  - ES_MAT_E_AIND  * phi_E_AIND(-1)  * d(log(C_MAT_AIND  / PROG_MAT_AIND)  - log(C_E_AIND  / PROG_E_AIND))  +  - ES_MAT_MAT_AIND  * phi_MAT_AIND(-1)  * d(log(C_MAT_AIND  / PROG_MAT_AIND)  - log(C_MAT_AIND  / PROG_MAT_AIND))

d(SUBST_n_CIM_CSER_AIND)  =  - ES_CIM_CSER_AIND  * d(log(PCID_CSER_AIND)  - log(PCIM_CSER_AIND))

d(log(PY_e_ATPT))  = ADJUST1_PY_ATPT  * d(log(PY_e_ATPT(-1)))  + ADJUST2_PY_ATPT  * d(log(PY_ATPT(-1)))  + ADJUST3_PY_ATPT  * d(log(PY_n_ATPT))

ES_act_MAT_E_AIND  = ES_MAT_E_AIND  - ( C_MAT_AIND  / PROG_MAT_AIND  / ( C_E_AIND  / PROG_E_AIND )  / @elem(C_MAT_AIND  / PROG_MAT_AIND  / ( C_E_AIND  / PROG_E_AIND ) , 2000) < 0.99999 )  * ( log(F_MAT_AIND  * PROG_MAT_AIND  / ( F_E_AIND  * PROG_E_AIND )  / @elem(F_MAT_AIND  * PROG_MAT_AIND  / ( F_E_AIND  * PROG_E_AIND ) , 2000))  / log(C_MAT_AIND  / PROG_MAT_AIND  / ( C_E_AIND  / PROG_E_AIND )  / @elem(C_MAT_AIND  / PROG_MAT_AIND  / ( C_E_AIND  / PROG_E_AIND ) , 2000)  * 1.0000000001)  + ES_MAT_E_AIND )  - ( C_MAT_AIND  / PROG_MAT_AIND  / ( C_E_AIND  / PROG_E_AIND )  / @elem(C_MAT_AIND  / PROG_MAT_AIND  / ( C_E_AIND  / PROG_E_AIND ) , 2000) > 1.00001 )  * ( log(F_MAT_AIND  * PROG_MAT_AIND  / ( F_E_AIND  * PROG_E_AIND )  / @elem(F_MAT_AIND  * PROG_MAT_AIND  / ( F_E_AIND  * PROG_E_AIND ) , 2000))  / log(C_MAT_AIND  / PROG_MAT_AIND  / ( C_E_AIND  / PROG_E_AIND )  / @elem(C_MAT_AIND  / PROG_MAT_AIND  / ( C_E_AIND  / PROG_E_AIND ) , 2000)  * 1.0000000001)  + ES_MAT_E_AIND )

ES_act_E_K_ANRE  = ES_E_K_ANRE  - ( C_E_ANRE  / PROG_E_ANRE  / ( C_K_ANRE  / PROG_K_ANRE )  / @elem(C_E_ANRE  / PROG_E_ANRE  / ( C_K_ANRE  / PROG_K_ANRE ) , 2000) < 0.99999 )  * ( log(F_E_ANRE  * PROG_E_ANRE  / ( F_K_ANRE  * PROG_K_ANRE )  / @elem(F_E_ANRE  * PROG_E_ANRE  / ( F_K_ANRE  * PROG_K_ANRE ) , 2000))  / log(C_E_ANRE  / PROG_E_ANRE  / ( C_K_ANRE  / PROG_K_ANRE )  / @elem(C_E_ANRE  / PROG_E_ANRE  / ( C_K_ANRE  / PROG_K_ANRE ) , 2000)  * 1.0000000001)  + ES_E_K_ANRE )  - ( C_E_ANRE  / PROG_E_ANRE  / ( C_K_ANRE  / PROG_K_ANRE )  / @elem(C_E_ANRE  / PROG_E_ANRE  / ( C_K_ANRE  / PROG_K_ANRE ) , 2000) > 1.00001 )  * ( log(F_E_ANRE  * PROG_E_ANRE  / ( F_K_ANRE  * PROG_K_ANRE )  / @elem(F_E_ANRE  * PROG_E_ANRE  / ( F_K_ANRE  * PROG_K_ANRE ) , 2000))  / log(C_E_ANRE  / PROG_E_ANRE  / ( C_K_ANRE  / PROG_K_ANRE )  / @elem(C_E_ANRE  / PROG_E_ANRE  / ( C_K_ANRE  / PROG_K_ANRE ) , 2000)  * 1.0000000001)  + ES_E_K_ANRE )

PCID  * CID  = 0  + PCID_CIND  * CID_CIND  + PCID_CTRP  * CID_CTRP  + PCID_CSER  * CID_CSER  + PCID_CNJN  * CID_CNJN  + PCID_CNJM  * CID_CNJM

SUBST_CIM_CIND_AIND  = ADJUST6_CIM_CIND_AIND  * SUBST_n_CIM_CIND_AIND  + ( 1  - ADJUST6_CIM_CIND_AIND )  * SUBST_CIM_CIND_AIND(-1)

CU_ATPT  * Y_ATPT  = 0  + C_K_ATPT  * F_K_ATPT  + C_L_ATPT  * F_L_ATPT  + C_E_ATPT  * F_E_ATPT  + C_MAT_ATPT  * F_MAT_ATPT  + NTAXI_VAL_ATPT

PCIM  * CIM  = 0  + PCIM_CIND  * CIM_CIND  + PCIM_CTRP  * CIM_CTRP  + PCIM_CSER  * CIM_CSER  + PCIM_CNJN  * CIM_CNJN  + PCIM_CNJM  * CIM_CNJM

SUBST_IM_CIND_ASER  = ADJUST6_IM_CIND_ASER  * SUBST_n_IM_CIND_ASER  + ( 1  - ADJUST6_IM_CIND_ASER )  * SUBST_IM_CIND_ASER(-1)

d(log(PY_e_ATPO))  = ADJUST1_PY_ATPO  * d(log(PY_e_ATPO(-1)))  + ADJUST2_PY_ATPO  * d(log(PY_ATPO(-1)))  + ADJUST3_PY_ATPO  * d(log(PY_n_ATPO))

MARKUP_ATPT  = ADJUST_MARKUP_ATPT  * MARKUP_n_ATPT  + ( 1  - ADJUST_MARKUP_ATPT )  * MARKUP_ATPT(-1)

d(log(CI_CSER_ASER))  = d(log(F_MAT_ASER))

PSUBPD_CNJN  * SUBPD_CNJN  = RSUBPD_CNJN  * YQ_CNJN

PCID_CNJN_ASER  = PYQSBVAT_CNJN

IM_CSER_ANRE  = phi_IM_CSER_ANRE  * I_CSER_ANRE

d(log(F_e_L_ANFO))  = ADJUST1_F_L_ANFO  * d(log(F_e_L_ANFO(-1)))  + ADJUST2_F_L_ANFO  * d(log(F_L_ANFO(-1)))  + ADJUST3_F_L_ANFO  * d(log(F_n_L_ANFO))

PCI_CNJM_ANRE  * CI_CNJM_ANRE  = PCID_CNJM_ANRE  * CID_CNJM_ANRE  + PCIM_CNJM_ANRE  * CIM_CNJM_ANRE

Y_ATPO  = 0  + Y_CTRP_ATPO

d(log(YQSBVAT_CTRP))  = d(log(YQ_CTRP))

PCIM_CIND_AIND  = PMSBVAT_CIND

d(log(F_n_K_ANRE))  = d(log(Y_ANRE))  - d(log(PROG_K_ANRE))  + d(SUBST_F_K_ANRE)

d(log(YCAP_ANRE))  = 0  + phi_K_ANRE(-1)  * d(log(F_K_ANRE  * PROG_K_ANRE))  + phi_L_ANRE(-1)  * d(log(F_L_ANRE  * PROG_L_ANRE))  + phi_E_ANRE(-1)  * d(log(F_E_ANRE  * PROG_E_ANRE))  + phi_MAT_ANRE(-1)  * d(log(F_MAT_ANRE  * PROG_MAT_ANRE))  + ADJUST_YCAP_Y_ANRE  * ( log(Y_ANRE(-1))  - log(YCAP_ANRE(-1)  * @elem(CUR_ANRE , 2000)) )

ES_act_MAT_MAT_ANFO  = ES_MAT_MAT_ANFO  - ( C_MAT_ANFO  / PROG_MAT_ANFO  / ( C_MAT_ANFO  / PROG_MAT_ANFO )  / @elem(C_MAT_ANFO  / PROG_MAT_ANFO  / ( C_MAT_ANFO  / PROG_MAT_ANFO ) , 2000) < 0.99999 )  * ( log(F_MAT_ANFO  * PROG_MAT_ANFO  / ( F_MAT_ANFO  * PROG_MAT_ANFO )  / @elem(F_MAT_ANFO  * PROG_MAT_ANFO  / ( F_MAT_ANFO  * PROG_MAT_ANFO ) , 2000))  / log(C_MAT_ANFO  / PROG_MAT_ANFO  / ( C_MAT_ANFO  / PROG_MAT_ANFO )  / @elem(C_MAT_ANFO  / PROG_MAT_ANFO  / ( C_MAT_ANFO  / PROG_MAT_ANFO ) , 2000)  * 1.0000000001)  + ES_MAT_MAT_ANFO )  - ( C_MAT_ANFO  / PROG_MAT_ANFO  / ( C_MAT_ANFO  / PROG_MAT_ANFO )  / @elem(C_MAT_ANFO  / PROG_MAT_ANFO  / ( C_MAT_ANFO  / PROG_MAT_ANFO ) , 2000) > 1.00001 )  * ( log(F_MAT_ANFO  * PROG_MAT_ANFO  / ( F_MAT_ANFO  * PROG_MAT_ANFO )  / @elem(F_MAT_ANFO  * PROG_MAT_ANFO  / ( F_MAT_ANFO  * PROG_MAT_ANFO ) , 2000))  / log(C_MAT_ANFO  / PROG_MAT_ANFO  / ( C_MAT_ANFO  / PROG_MAT_ANFO )  / @elem(C_MAT_ANFO  / PROG_MAT_ANFO  / ( C_MAT_ANFO  / PROG_MAT_ANFO ) , 2000)  * 1.0000000001)  + ES_MAT_MAT_ANFO )

PMGP_CSER_CNJM  * MGP_CSER_CNJM  = PMGPD_CSER_CNJM  * MGPD_CSER_CNJM  + PMGPM_CSER_CNJM  * MGPM_CSER_CNJM

Y_ATPT  = 0  + Y_CTRP_ATPT  + Y_CSER_ATPT

CIM_CSER_AIND  = phi_CIM_CSER_AIND  * CI_CSER_AIND

PG_CSER  * G_CSER  = PGD_CSER  * GD_CSER  + PGM_CSER  * GM_CSER

ES_act_K_MAT_ANFO  = ES_K_MAT_ANFO  - ( C_K_ANFO  / PROG_K_ANFO  / ( C_MAT_ANFO  / PROG_MAT_ANFO )  / @elem(C_K_ANFO  / PROG_K_ANFO  / ( C_MAT_ANFO  / PROG_MAT_ANFO ) , 2000) < 0.99999 )  * ( log(F_K_ANFO  * PROG_K_ANFO  / ( F_MAT_ANFO  * PROG_MAT_ANFO )  / @elem(F_K_ANFO  * PROG_K_ANFO  / ( F_MAT_ANFO  * PROG_MAT_ANFO ) , 2000))  / log(C_K_ANFO  / PROG_K_ANFO  / ( C_MAT_ANFO  / PROG_MAT_ANFO )  / @elem(C_K_ANFO  / PROG_K_ANFO  / ( C_MAT_ANFO  / PROG_MAT_ANFO ) , 2000)  * 1.0000000001)  + ES_K_MAT_ANFO )  - ( C_K_ANFO  / PROG_K_ANFO  / ( C_MAT_ANFO  / PROG_MAT_ANFO )  / @elem(C_K_ANFO  / PROG_K_ANFO  / ( C_MAT_ANFO  / PROG_MAT_ANFO ) , 2000) > 1.00001 )  * ( log(F_K_ANFO  * PROG_K_ANFO  / ( F_MAT_ANFO  * PROG_MAT_ANFO )  / @elem(F_K_ANFO  * PROG_K_ANFO  / ( F_MAT_ANFO  * PROG_MAT_ANFO ) , 2000))  / log(C_K_ANFO  / PROG_K_ANFO  / ( C_MAT_ANFO  / PROG_MAT_ANFO )  / @elem(C_K_ANFO  / PROG_K_ANFO  / ( C_MAT_ANFO  / PROG_MAT_ANFO ) , 2000)  * 1.0000000001)  + ES_K_MAT_ANFO )

SUBST_CIM_CSER_ATPO  = ADJUST6_CIM_CSER_ATPO  * SUBST_n_CIM_CSER_ATPO  + ( 1  - ADJUST6_CIM_CSER_ATPO )  * SUBST_CIM_CSER_ATPO(-1)

PDSM_CIND  = PMSBVAT_CIND

PARTR  = ADJUST0_PARTR  * PARTR_n  + ( 1  - ADJUST0_PARTR )  * PARTR(-1)

SUBST_CIM_CSER_ATPT  = ADJUST6_CIM_CSER_ATPT  * SUBST_n_CIM_CSER_ATPT  + ( 1  - ADJUST6_CIM_CSER_ATPT )  * SUBST_CIM_CSER_ATPT(-1)

d(SUBST_n_IM_CIND_ANFO)  =  - ES_IM_CIND_ANFO  * d(log(PID_CIND_ANFO)  - log(PIM_CIND_ANFO))

verif_PMGRbis_CTRP  = ( PMGRbis_CTRP  / PMGR_CTRP  - 1 )  * 100

SUBST_CIM_CNJM_ATPT  = ADJUST6_CIM_CNJM_ATPT  * SUBST_n_CIM_CNJM_ATPT  + ( 1  - ADJUST6_CIM_CNJM_ATPT )  * SUBST_CIM_CNJM_ATPT(-1)

PCID_CIND_AIND  = PYQSBVAT_CIND

SUBST_n_MGPD_CTRP_CNJN  = 0  +  - ES_MGPD_CTRP_CTRP_CNJN  * phi_MGPD_CTRP_CNJN(-1)  * d(log(PMGPD_CTRP_CNJN)  - log(PMGPD_CTRP_CNJN))  +  - ES_MGPD_CTRP_CSER_CNJN  * phi_MGPD_CSER_CNJN(-1)  * d(log(PMGPD_CTRP_CNJN)  - log(PMGPD_CSER_CNJN))

NTAXI_ASER  = @elem(RNTAXI_ASER , 2000)  * Y_ASER

PID_ASER  * ID_ASER  = 0  + PID_CIND_ASER  * ID_CIND_ASER  + PID_CSER_ASER  * ID_CSER_ASER

SUBST_CIM_CNJM_ATPO  = ADJUST6_CIM_CNJM_ATPO  * SUBST_n_CIM_CNJM_ATPO  + ( 1  - ADJUST6_CIM_CNJM_ATPO )  * SUBST_CIM_CNJM_ATPO(-1)

d(log(MGPM_CSER_CNJM))  = d(log(M_CNJM))  + d(SUBST_MGPM_CSER_CNJM)

CIM_CNJM_ATPO  = phi_CIM_CNJM_ATPO  * CI_CNJM_ATPO

d(log(MGPM_CSER_CNJN))  = d(log(M_CNJN))  + d(SUBST_MGPM_CSER_CNJN)

log(CH_CSER)  = ADJUST0_CH_CSER  * log(CH_n_CSER)  + ( 1  - ADJUST0_CH_CSER )  * ( log(CH_CSER(-1))  + d(log(CH_e_CSER)) )

ES_act_MGRM_CTRP  = ES_MGRM_CTRP  - ( PMGRD_CTRP  / PMGRM_CTRP < 0.99999 )  * ( log(MGRD_CTRP  / MGRM_CTRP  / @elem(MGRD_CTRP  / MGRM_CTRP , 2000))  / log(PMGRD_CTRP  / PMGRM_CTRP  * 1.0000000001)  + ES_MGRM_CTRP )  - ( PMGRD_CTRP  / PMGRM_CTRP > 1.00001 )  * ( log(MGRD_CTRP  / MGRM_CTRP  / @elem(MGRD_CTRP  / MGRM_CTRP , 2000))  / log(PMGRD_CTRP  / PMGRM_CTRP  * 1.0000000001)  + ES_MGRM_CTRP )

d(log(G_CTRP))  = d(log(EXPG))

PDSD_CNJM  = PYQSBVAT_CNJM

PDSD_CNJN  = PYQSBVAT_CNJN

ES_act_XM_CNJN  = ES_XM_CNJN  - ( PXD_CNJN  / PXM_CNJN < 0.99999 )  * ( log(XD_CNJN  / XM_CNJN  / @elem(XD_CNJN  / XM_CNJN , 2000))  / log(PXD_CNJN  / PXM_CNJN  * 1.0000000001)  + ES_XM_CNJN )  - ( PXD_CNJN  / PXM_CNJN > 1.00001 )  * ( log(XD_CNJN  / XM_CNJN  / @elem(XD_CNJN  / XM_CNJN , 2000))  / log(PXD_CNJN  / PXM_CNJN  * 1.0000000001)  + ES_XM_CNJN )

ES_act_XM_CNJM  = ES_XM_CNJM  - ( PXD_CNJM  / PXM_CNJM < 0.99999 )  * ( log(XD_CNJM  / XM_CNJM  / @elem(XD_CNJM  / XM_CNJM , 2000))  / log(PXD_CNJM  / PXM_CNJM  * 1.0000000001)  + ES_XM_CNJM )  - ( PXD_CNJM  / PXM_CNJM > 1.00001 )  * ( log(XD_CNJM  / XM_CNJM  / @elem(XD_CNJM  / XM_CNJM , 2000))  / log(PXD_CNJM  / PXM_CNJM  * 1.0000000001)  + ES_XM_CNJM )

d(SUBST_n_CIM_CNJM_AIND)  =  - ES_CIM_CNJM_AIND  * d(log(PCID_CNJM_AIND)  - log(PCIM_CNJM_AIND))

OTHPTD_CNJN  = @elem(ROTHPTD_CNJN , 2000)  * YQ_CNJN

ES_act_GM_CIND  = ES_GM_CIND  - ( PGD_CIND  / PGM_CIND < 0.99999 )  * ( log(GD_CIND  / GM_CIND  / @elem(GD_CIND  / GM_CIND , 2000))  / log(PGD_CIND  / PGM_CIND  * 1.0000000001)  + ES_GM_CIND )  - ( PGD_CIND  / PGM_CIND > 1.00001 )  * ( log(GD_CIND  / GM_CIND  / @elem(GD_CIND  / GM_CIND , 2000))  / log(PGD_CIND  / PGM_CIND  * 1.0000000001)  + ES_GM_CIND )

RNTAXPD_CIND  = NTAXPD_VAL_CIND  / ( PYQ_CIND  * YQ_CIND )

CIM_CTRP_ATPT  = phi_CIM_CTRP_ATPT  * CI_CTRP_ATPT

GOS_VAL_ASER  = VA_VAL_ASER  - PWAGES_ASER  * WAGES_ASER  - PRSSC_ASER  * RSSC_ASER  - NTAXI_VAL_ASER

ES_act_K_E_ATPT  = ES_K_E_ATPT  - ( C_K_ATPT  / PROG_K_ATPT  / ( C_E_ATPT  / PROG_E_ATPT )  / @elem(C_K_ATPT  / PROG_K_ATPT  / ( C_E_ATPT  / PROG_E_ATPT ) , 2000) < 0.99999 )  * ( log(F_K_ATPT  * PROG_K_ATPT  / ( F_E_ATPT  * PROG_E_ATPT )  / @elem(F_K_ATPT  * PROG_K_ATPT  / ( F_E_ATPT  * PROG_E_ATPT ) , 2000))  / log(C_K_ATPT  / PROG_K_ATPT  / ( C_E_ATPT  / PROG_E_ATPT )  / @elem(C_K_ATPT  / PROG_K_ATPT  / ( C_E_ATPT  / PROG_E_ATPT ) , 2000)  * 1.0000000001)  + ES_K_E_ATPT )  - ( C_K_ATPT  / PROG_K_ATPT  / ( C_E_ATPT  / PROG_E_ATPT )  / @elem(C_K_ATPT  / PROG_K_ATPT  / ( C_E_ATPT  / PROG_E_ATPT ) , 2000) > 1.00001 )  * ( log(F_K_ATPT  * PROG_K_ATPT  / ( F_E_ATPT  * PROG_E_ATPT )  / @elem(F_K_ATPT  * PROG_K_ATPT  / ( F_E_ATPT  * PROG_E_ATPT ) , 2000))  / log(C_K_ATPT  / PROG_K_ATPT  / ( C_E_ATPT  / PROG_E_ATPT )  / @elem(C_K_ATPT  / PROG_K_ATPT  / ( C_E_ATPT  / PROG_E_ATPT ) , 2000)  * 1.0000000001)  + ES_K_E_ATPT )

d(SUBST_n_CIM_CSER_ASER)  =  - ES_CIM_CSER_ASER  * d(log(PCID_CSER_ASER)  - log(PCIM_CSER_ASER))

d(log(W_n_ATPT))  = RHO_W_Cons_ATPT  + RHO_W_P_ATPT  * d(log(P))  + RHO_W_Pe_ATPT  * d(log(P_e))  + RHO_W_PROG_ATPT  * d(log(PROG_L_ATPT))  - RHO_W_U_ATPT  * ( UnR  - DNAIRU )  - RHO_W_DU_ATPT  * d(UnR)  + RHO_W_L_ATPT  * d(log(F_L_ATPT)  - log(F_L))

ES_act_K_E_ATPO  = ES_K_E_ATPO  - ( C_K_ATPO  / PROG_K_ATPO  / ( C_E_ATPO  / PROG_E_ATPO )  / @elem(C_K_ATPO  / PROG_K_ATPO  / ( C_E_ATPO  / PROG_E_ATPO ) , 2000) < 0.99999 )  * ( log(F_K_ATPO  * PROG_K_ATPO  / ( F_E_ATPO  * PROG_E_ATPO )  / @elem(F_K_ATPO  * PROG_K_ATPO  / ( F_E_ATPO  * PROG_E_ATPO ) , 2000))  / log(C_K_ATPO  / PROG_K_ATPO  / ( C_E_ATPO  / PROG_E_ATPO )  / @elem(C_K_ATPO  / PROG_K_ATPO  / ( C_E_ATPO  / PROG_E_ATPO ) , 2000)  * 1.0000000001)  + ES_K_E_ATPO )  - ( C_K_ATPO  / PROG_K_ATPO  / ( C_E_ATPO  / PROG_E_ATPO )  / @elem(C_K_ATPO  / PROG_K_ATPO  / ( C_E_ATPO  / PROG_E_ATPO ) , 2000) > 1.00001 )  * ( log(F_K_ATPO  * PROG_K_ATPO  / ( F_E_ATPO  * PROG_E_ATPO )  / @elem(F_K_ATPO  * PROG_K_ATPO  / ( F_E_ATPO  * PROG_E_ATPO ) , 2000))  / log(C_K_ATPO  / PROG_K_ATPO  / ( C_E_ATPO  / PROG_E_ATPO )  / @elem(C_K_ATPO  / PROG_K_ATPO  / ( C_E_ATPO  / PROG_E_ATPO ) , 2000)  * 1.0000000001)  + ES_K_E_ATPO )

CIM_CTRP_ATPO  = phi_CIM_CTRP_ATPO  * CI_CTRP_ATPO

d(log(W_n_ATPO))  = RHO_W_Cons_ATPO  + RHO_W_P_ATPO  * d(log(P))  + RHO_W_Pe_ATPO  * d(log(P_e))  + RHO_W_PROG_ATPO  * d(log(PROG_L_ATPO))  - RHO_W_U_ATPO  * ( UnR  - DNAIRU )  - RHO_W_DU_ATPO  * d(UnR)  + RHO_W_L_ATPO  * d(log(F_L_ATPO)  - log(F_L))

d(log(YQS_CNJM))  = d(log(YQ_CNJM))

d(log(YQS_CNJN))  = d(log(YQ_CNJN))

d(log(IA_ATPO))  = ADJUST_IA_Ye_ATPO  * d(log(Y_e_ATPO))  + ADJUST_IA_IA1_ATPO  * d(log(IA_ATPO(-1)))  + ADJUST_IA_SUBST_ATPO  * d(SUBST_F_K_ATPO)  + ADJUST_IA_Kn_ATPO  * ( log(F_n_K_ATPO(-1))  - log(F_K_ATPO(-1)) )

d(log(F_e_E_ANFO))  = ADJUST1_F_E_ANFO  * d(log(F_e_E_ANFO(-1)))  + ADJUST2_F_E_ANFO  * d(log(F_E_ANFO(-1)))  + ADJUST3_F_E_ANFO  * d(log(F_n_E_ANFO))

ES_act_E_L_ANFO  = ES_E_L_ANFO  - ( C_E_ANFO  / PROG_E_ANFO  / ( C_L_ANFO  / PROG_L_ANFO )  / @elem(C_E_ANFO  / PROG_E_ANFO  / ( C_L_ANFO  / PROG_L_ANFO ) , 2000) < 0.99999 )  * ( log(F_E_ANFO  * PROG_E_ANFO  / ( F_L_ANFO  * PROG_L_ANFO )  / @elem(F_E_ANFO  * PROG_E_ANFO  / ( F_L_ANFO  * PROG_L_ANFO ) , 2000))  / log(C_E_ANFO  / PROG_E_ANFO  / ( C_L_ANFO  / PROG_L_ANFO )  / @elem(C_E_ANFO  / PROG_E_ANFO  / ( C_L_ANFO  / PROG_L_ANFO ) , 2000)  * 1.0000000001)  + ES_E_L_ANFO )  - ( C_E_ANFO  / PROG_E_ANFO  / ( C_L_ANFO  / PROG_L_ANFO )  / @elem(C_E_ANFO  / PROG_E_ANFO  / ( C_L_ANFO  / PROG_L_ANFO ) , 2000) > 1.00001 )  * ( log(F_E_ANFO  * PROG_E_ANFO  / ( F_L_ANFO  * PROG_L_ANFO )  / @elem(F_E_ANFO  * PROG_E_ANFO  / ( F_L_ANFO  * PROG_L_ANFO ) , 2000))  / log(C_E_ANFO  / PROG_E_ANFO  / ( C_L_ANFO  / PROG_L_ANFO )  / @elem(C_E_ANFO  / PROG_E_ANFO  / ( C_L_ANFO  / PROG_L_ANFO ) , 2000)  * 1.0000000001)  + ES_E_L_ANFO )

d(log(IA_ATPT))  = ADJUST_IA_Ye_ATPT  * d(log(Y_e_ATPT))  + ADJUST_IA_IA1_ATPT  * d(log(IA_ATPT(-1)))  + ADJUST_IA_SUBST_ATPT  * d(SUBST_F_K_ATPT)  + ADJUST_IA_Kn_ATPT  * ( log(F_n_K_ATPT(-1))  - log(F_K_ATPT(-1)) )

NTAXI_ANFO  = @elem(RNTAXI_ANFO , 2000)  * Y_ANFO

PI_CSER  * I_CSER  = PID_CSER  * ID_CSER  + PIM_CSER  * IM_CSER

CID_CIND_ATPT  = ( 1  - phi_CIM_CIND_ATPT )  * CI_CIND_ATPT

MARKUP_ANFO  = ADJUST_MARKUP_ANFO  * MARKUP_n_ANFO  + ( 1  - ADJUST_MARKUP_ANFO )  * MARKUP_ANFO(-1)

Un  = LF  - Empl

CID_CIND_ATPO  = ( 1  - phi_CIM_CIND_ATPO )  * CI_CIND_ATPO

d(log(MGPM_CSER_CIND))  = d(log(M_CIND))  + d(SUBST_MGPM_CSER_CIND)

PMGP_CSER_CIND  * MGP_CSER_CIND  = PMGPD_CSER_CIND  * MGPD_CSER_CIND  + PMGPM_CSER_CIND  * MGPM_CSER_CIND

d(log(1  + MARKUP_n_ASER))  = RHO_MARKUP_Y  * d(log(CUR_ASER))

PCHD_CIND  = PYQSBVAT_CIND  * ( 1  + RVATD_CIND )  / ( 1  + @elem(RVATD_CIND , 2000) )

ES_act_L_K_ANFO  = ES_L_K_ANFO  - ( C_L_ANFO  / PROG_L_ANFO  / ( C_K_ANFO  / PROG_K_ANFO )  / @elem(C_L_ANFO  / PROG_L_ANFO  / ( C_K_ANFO  / PROG_K_ANFO ) , 2000) < 0.99999 )  * ( log(F_L_ANFO  * PROG_L_ANFO  / ( F_K_ANFO  * PROG_K_ANFO )  / @elem(F_L_ANFO  * PROG_L_ANFO  / ( F_K_ANFO  * PROG_K_ANFO ) , 2000))  / log(C_L_ANFO  / PROG_L_ANFO  / ( C_K_ANFO  / PROG_K_ANFO )  / @elem(C_L_ANFO  / PROG_L_ANFO  / ( C_K_ANFO  / PROG_K_ANFO ) , 2000)  * 1.0000000001)  + ES_L_K_ANFO )  - ( C_L_ANFO  / PROG_L_ANFO  / ( C_K_ANFO  / PROG_K_ANFO )  / @elem(C_L_ANFO  / PROG_L_ANFO  / ( C_K_ANFO  / PROG_K_ANFO ) , 2000) > 1.00001 )  * ( log(F_L_ANFO  * PROG_L_ANFO  / ( F_K_ANFO  * PROG_K_ANFO )  / @elem(F_L_ANFO  * PROG_L_ANFO  / ( F_K_ANFO  * PROG_K_ANFO ) , 2000))  / log(C_L_ANFO  / PROG_L_ANFO  / ( C_K_ANFO  / PROG_K_ANFO )  / @elem(C_L_ANFO  / PROG_L_ANFO  / ( C_K_ANFO  / PROG_K_ANFO ) , 2000)  * 1.0000000001)  + ES_L_K_ANFO )

Bal_Trade_VAL_CNJN  = PX_CNJN  * X_CNJN  - PM_CNJN  * M_CNJN

Bal_Trade_VAL_CNJM  = PX_CNJM  * X_CNJM  - PM_CNJM  * M_CNJM

d(SUBST_n_CIM_CIND_ASER)  =  - ES_CIM_CIND_ASER  * d(log(PCID_CIND_ASER)  - log(PCIM_CIND_ASER))

PK_ASER  * F_K_ASER  = ( 1  - Rdep_ASER )  * PK_ASER(-1)  * F_K_ASER(-1)  + PI_ASER  * I_ASER

phi_L_AIND  = C_L_AIND  * F_n_L_AIND  / ( 0  + C_K_AIND  * F_n_K_AIND  + C_L_AIND  * F_n_L_AIND  + C_E_AIND  * F_n_E_AIND  + C_MAT_AIND  * F_n_MAT_AIND )

PCIM_ANRE  * CIM_ANRE  = 0  + PCIM_CIND_ANRE  * CIM_CIND_ANRE  + PCIM_CTRP_ANRE  * CIM_CTRP_ANRE  + PCIM_CSER_ANRE  * CIM_CSER_ANRE  + PCIM_CNJN_ANRE  * CIM_CNJN_ANRE  + PCIM_CNJM_ANRE  * CIM_CNJM_ANRE

ES_act_GM_CSER  = ES_GM_CSER  - ( PGD_CSER  / PGM_CSER < 0.99999 )  * ( log(GD_CSER  / GM_CSER  / @elem(GD_CSER  / GM_CSER , 2000))  / log(PGD_CSER  / PGM_CSER  * 1.0000000001)  + ES_GM_CSER )  - ( PGD_CSER  / PGM_CSER > 1.00001 )  * ( log(GD_CSER  / GM_CSER  / @elem(GD_CSER  / GM_CSER , 2000))  / log(PGD_CSER  / PGM_CSER  * 1.0000000001)  + ES_GM_CSER )

Verif_Ibis  = ( Ibis  / I  - 1 )  * 100

d(SUBST_n_CIM_CIND_ANFO)  =  - ES_CIM_CIND_ANFO  * d(log(PCID_CIND_ANFO)  - log(PCIM_CIND_ANFO))

PQM_CSER  * QM_CSER  = PMGRM_CSER  * MGRM_CSER  + PCIM_CSER  * CIM_CSER  + PCHM_CSER  * CHM_CSER  + PGM_CSER  * GM_CSER  + PIM_CSER  * IM_CSER  + PXM_CSER  * XM_CSER  + PDSM_CSER  * DSM_CSER

CIM_ANFO  = 0  + CIM_CIND_ANFO  + CIM_CTRP_ANFO  + CIM_CSER_ANFO  + CIM_CNJN_ANFO  + CIM_CNJM_ANFO

PDS_CNJN  * DS_CNJN  = PDSD_CNJN  * DSD_CNJN  + PDSM_CNJN  * DSM_CNJN

PDS_CNJM  * DS_CNJM  = PDSD_CNJM  * DSD_CNJM  + PDSM_CNJM  * DSM_CNJM

PROG_L_ANFO  = PROG_L_ANFO(-1)  * ( 1  + GR_PROG_L_ANFO )

d(log(PY_e_ANFO))  = ADJUST1_PY_ANFO  * d(log(PY_e_ANFO(-1)))  + ADJUST2_PY_ANFO  * d(log(PY_ANFO(-1)))  + ADJUST3_PY_ANFO  * d(log(PY_n_ANFO))

PCID_CNJM_ASER  = PYQSBVAT_CNJM

ES_act_K_K_ANRE  = ES_K_K_ANRE  - ( C_K_ANRE  / PROG_K_ANRE  / ( C_K_ANRE  / PROG_K_ANRE )  / @elem(C_K_ANRE  / PROG_K_ANRE  / ( C_K_ANRE  / PROG_K_ANRE ) , 2000) < 0.99999 )  * ( log(F_K_ANRE  * PROG_K_ANRE  / ( F_K_ANRE  * PROG_K_ANRE )  / @elem(F_K_ANRE  * PROG_K_ANRE  / ( F_K_ANRE  * PROG_K_ANRE ) , 2000))  / log(C_K_ANRE  / PROG_K_ANRE  / ( C_K_ANRE  / PROG_K_ANRE )  / @elem(C_K_ANRE  / PROG_K_ANRE  / ( C_K_ANRE  / PROG_K_ANRE ) , 2000)  * 1.0000000001)  + ES_K_K_ANRE )  - ( C_K_ANRE  / PROG_K_ANRE  / ( C_K_ANRE  / PROG_K_ANRE )  / @elem(C_K_ANRE  / PROG_K_ANRE  / ( C_K_ANRE  / PROG_K_ANRE ) , 2000) > 1.00001 )  * ( log(F_K_ANRE  * PROG_K_ANRE  / ( F_K_ANRE  * PROG_K_ANRE )  / @elem(F_K_ANRE  * PROG_K_ANRE  / ( F_K_ANRE  * PROG_K_ANRE ) , 2000))  / log(C_K_ANRE  / PROG_K_ANRE  / ( C_K_ANRE  / PROG_K_ANRE )  / @elem(C_K_ANRE  / PROG_K_ANRE  / ( C_K_ANRE  / PROG_K_ANRE ) , 2000)  * 1.0000000001)  + ES_K_K_ANRE )

CI_ATPT  = CID_ATPT  + CIM_ATPT

CHD_CNJM  = ( 1  - phi_CHM_CNJM )  * CH_CNJM

ID_CIND_ANFO  = ( 1  - phi_IM_CIND_ANFO )  * I_CIND_ANFO

CID_CNJM_ANRE  = ( 1  - phi_CIM_CNJM_ANRE )  * CI_CNJM_ANRE

PGDP  * GDP  = PCH  * CH  + PG  * G  + PI  * I  + PX  * X  + PDS  * DS  - PM  * M

CI_ATPO  = CID_ATPO  + CIM_ATPO

VATM_CSER  = @elem(RVATM_CSER , 2000)  * CHM_CSER  / ( 1  + @elem(RVATM_CSER , 2000) )

NTAXP_CSER  = NTAXPD_CSER  + NTAXPM_CSER

d(log(PROP_INC_H_VAL_e))  = ADJUST1_PROP_INC_H_VAL  * d(log(PROP_INC_H_VAL_e(-1)))  + ADJUST2_PROP_INC_H_VAL  * d(log(PROP_INC_H_VAL(-1)))  + ADJUST3_PROP_INC_H_VAL  * d(log(PROP_INC_H_VAL_n))

CID  = 0  + CID_CIND  + CID_CTRP  + CID_CSER  + CID_CNJN  + CID_CNJM

PROP_INC_H_VAL_n  = phi_PROP_INC_H  * PNOS  * NOS  + ( PNOS  * NOS <= 1e-05 )  * ( 1e-05  - phi_PROP_INC_H  * PNOS  * NOS )

PXM_CTRP  = PMSBVAT_CTRP

PMAT_ANRE  * F_MAT_ANRE  = 0  + PCI_CIND_ANRE  * CI_CIND_ANRE  + PCI_CTRP_ANRE  * CI_CTRP_ANRE  + PCI_CSER_ANRE  * CI_CSER_ANRE

PVATD_CIND  * VATD_CIND  = RVATD_CIND  * PCHD_CIND  * CHD_CIND  / ( 1  + RVATD_CIND )

phi_K_AIND  = C_K_AIND  * F_n_K_AIND  / ( 0  + C_K_AIND  * F_n_K_AIND  + C_L_AIND  * F_n_L_AIND  + C_E_AIND  * F_n_E_AIND  + C_MAT_AIND  * F_n_MAT_AIND )

NTAXPM_VAL_CNJM  = PVATM_CNJM  * VATM_CNJM  + POTHPTM_CNJM  * OTHPTM_CNJM  + PSUBPM_CNJM  * SUBPM_CNJM

CI_ASER  = CID_ASER  + CIM_ASER

MGR_CSER  = 0  + MGP_CSER_CIND  + MGP_CSER_CNJN  + MGP_CSER_CNJM

PQ_CNJN  * Q_CNJN  = PQD_CNJN  * QD_CNJN  + PQM_CNJN  * QM_CNJN

PQ_CNJM  * Q_CNJM  = PQD_CNJM  * QD_CNJM  + PQM_CNJM  * QM_CNJM

ID_CSER_AIND  = ( 1  - phi_IM_CSER_AIND )  * I_CSER_AIND

MARKUP_ATPO  = ADJUST_MARKUP_ATPO  * MARKUP_n_ATPO  + ( 1  - ADJUST_MARKUP_ATPO )  * MARKUP_ATPO(-1)

PCHD  * CHD  = 0  + PCHD_CIND  * CHD_CIND  + PCHD_CTRP  * CHD_CTRP  + PCHD_CSER  * CHD_CSER  + PCHD_CNJN  * CHD_CNJN  + PCHD_CNJM  * CHD_CNJM

PCHM  * CHM  = 0  + PCHM_CIND  * CHM_CIND  + PCHM_CTRP  * CHM_CTRP  + PCHM_CSER  * CHM_CSER  + PCHM_CNJN  * CHM_CNJN  + PCHM_CNJM  * CHM_CNJM

PROG_L_ATPT  = PROG_L_ATPT(-1)  * ( 1  + GR_PROG_L_ATPT )

CIM_ATPT  = 0  + CIM_CIND_ATPT  + CIM_CTRP_ATPT  + CIM_CSER_ATPT  + CIM_CNJN_ATPT  + CIM_CNJM_ATPT

CIM_ATPO  = 0  + CIM_CIND_ATPO  + CIM_CTRP_ATPO  + CIM_CSER_ATPO  + CIM_CNJN_ATPO  + CIM_CNJM_ATPO

d(SUBST_n_MGRM_CTRP)  =  - ES_MGRM_CTRP  * d(log(PMGRD_CTRP)  - log(PMGRM_CTRP))

PROG_L_ATPO  = PROG_L_ATPO(-1)  * ( 1  + GR_PROG_L_ATPO )

phi_CIM_CNJM_ANRE  = 1  / ( 1  + @elem(CID_CNJM_ANRE  / CIM_CNJM_ANRE , 2000)  * exp(SUBST_CIM_CNJM_ANRE) )

SUBST_CIM_CSER_AIND  = ADJUST6_CIM_CSER_AIND  * SUBST_n_CIM_CSER_AIND  + ( 1  - ADJUST6_CIM_CSER_AIND )  * SUBST_CIM_CSER_AIND(-1)

SUBST_F_L_ANRE  = ADJUST6_F_L_ANRE  * SUBST_n_F_L_ANRE  + ( 1  - ADJUST6_F_L_ANRE )  * SUBST_F_L_ANRE(-1)

ES_act_XM_CSER  = ES_XM_CSER  - ( PXD_CSER  / PXM_CSER < 0.99999 )  * ( log(XD_CSER  / XM_CSER  / @elem(XD_CSER  / XM_CSER , 2000))  / log(PXD_CSER  / PXM_CSER  * 1.0000000001)  + ES_XM_CSER )  - ( PXD_CSER  / PXM_CSER > 1.00001 )  * ( log(XD_CSER  / XM_CSER  / @elem(XD_CSER  / XM_CSER , 2000))  / log(PXD_CSER  / PXM_CSER  * 1.0000000001)  + ES_XM_CSER )

phi_E_ANFO  = C_E_ANFO  * F_n_E_ANFO  / ( 0  + C_K_ANFO  * F_n_K_ANFO  + C_L_ANFO  * F_n_L_ANFO  + C_E_ANFO  * F_n_E_ANFO  + C_MAT_ANFO  * F_n_MAT_ANFO )

PCID_CTRP_ASER  = PYQSBVAT_CTRP