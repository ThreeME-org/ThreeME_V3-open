##### Housing

# From ThreeME / Master_France_CGDD (30/05/2018)
# Last commit was: 5f4949ffc7f75da1128dd53c2e1e4c62e1c4b051
# Files: hybrid_new.mdl; exceptions_AME-AMS.mdl

#### Link with the rest of the model
# FOR THE MAIN TEXT IN THE DOCUMENTATION !!! When this block is activated, the expenditures related to construction, transport, vehicles and energy commodities are not defined anymore by the basic version of the consumer block (see Section Consumer). To do so the necessary (minimum) households' final consumption for this commodity is endogenized and calibrated at their total at the base year: $NCH_{c} = CH_{c}$ for $c$ \in  \{ ccon,ct,cveh,ceb \}$. In other words, we assume that these expenditures have the priority over the other ones. \\

##! Necessary (minimum) households' final consumption for construction commodity $ccon$
NCH[ccon]   = (@year > %baseyear) * (@elem(PNewBUIL,%baseyear) * NewBUIL + @elem(PREHAB,%baseyear) * REHAB) _
            + (@year <= %baseyear) * (NCH[ccon]{-1} * ( 1 + GR_REAL ))

##! Necessary (minimum) households' final consumption for energy commodities $ceb$ related to buildings
NCH_BUIL[ceb]   = (@year > %baseyear) * (@elem(PENER_BUIL[ceb], %baseyear) * ENER_BUIL[ceb]) _
                + (@year <= %baseyear) * (NCH_BUIL[ceb]{-1} * ( 1 + GR_REAL )) if NCH_BUIL[ceb] <> 0


##! Price of class $ecl$ new building per square meter
d(log(PNewBUIL[ecl])) = d(log(PCH[CCON]))

##! Price of investment for rehabilitating a class $ecl$ building to class $ecl2$ per square meter
d(log(PREHAB[ecl,ecl2])) = d(log(PCH[CCON])) if REHAB[ecl,ecl2] <> 0

##! Price of investment for rehabilitating a class $ecl$ building in the same class $ecl$ per square meter
d(log(PREHAB[ecl,ecl])) = d(log(PCH[CCON]))  # Must be added because REHAB[ecl,ecl] = 0  (test if merging the 2 eq. does not change the results)

##! Interest rate paid for an investment in a new class $ecl$ building
d(R_I_NewBUIL[ecl]) = d(R)

##! Interest rate paid for an investment in the rehabilitation of a class $ecl$ building
d(R_I_REHAB[ecl])   = d(R)

##! Interest rate paid for a (maintenance) investment of a class $ecl$ building
d(R_I_BUIL[ecl])    = d(R)
## This corresponds to the interest rate paid to maintain the building in its class whereas the previous interest rate is the one paid to rehabilitate the building to a higher class. \\

#### Building stock dynamic (in m2)

##! Total building stock
d(log(BUIL)) = (@year > %baseyear) * (d(log(POP)) + d(log(M2perCapita))) + (@year <= %baseyear) * (0)
## It follows proportionally the size of the population ($POP$) and the number of square meter per inhabitant ($M2perCapita$). \\

##! Number of square meter per person
d(log(M2perCapita)) = rho_M2_DISPINC * d(log(DISPINC_AT_VAL/PCH/POP))

##! Total building stock (for verification)
BUILbis = sum(BUIL[ecl] on ecl)

##! Stock of building of the energy efficiency class $ecl$

d(BUIL[ecl]) = (@year > %baseyear) * (NewBUIL[ecl]  + sum(REHAB[ecl2,ecl] if REHAB[ecl2,ecl] <> 0 on ecl2) _
                                                    + sum(DEP_BUIL[ecl2,ecl] if DEP_BUIL[ecl2,ecl] <> 0 on ecl2) _
                                                    - (sum(REHAB[ecl,ecl2] if REHAB[ecl,ecl2] <> 0 on ecl2)) _
                                                    - (sum(DEP_BUIL[ecl,bcl] if DEP_BUIL[ecl,bcl] <> 0 on bcl))) + (@year <= %baseyear) * 0

## The variation of stocks of building per class depends on several variables:\\
## - It increases by the amount of the new buildings constructed in class $ecl$: $NewBUIL_{ecl}$ \\
## - It increases by the amount of rehabilitated buildings from a lower class to class $ecl$: $\sum REHAB_{ecl2, ecl}$ \\
## - It increases by the downgraded buildings from a higher class to class $ecl$: $\sum DEP^{BUIL}_{ecl2, ecl}$ \\
## - It decreases by the amount of rehabilitated buildings from class ecl to a higher class: $\sum REHAB_{ecl2, ecl}$ \\
## - It decreases by the downgraded buildings from class $ecl$ to lower class: $\sum DEP^{BUIL}_{ecl, bcl}$ \\

##! New buildings constructed according to class $ecl$
NewBUIL[ecl] =   (@year > %baseyear) * (phi_NewBUIL[ecl] * (d(BUIL) + BUIL[DES])) + (@year <= %baseyear) * NewBUIL[ecl]{-1}


##! Buildings depreciating from class $ecl$ to class $bcl$
DEP_BUIL[ecl,bcl] = (@year > %baseyear) * (Rdep_BUIL[ecl,bcl]*BUIL[ecl]{-1}) + (@year <= %baseyear) * (DEP_BUIL[ecl,bcl]{-1})


##! Destroyed buildings
BUIL[DES] = sum(DEP_BUIL[ecl,DES] if DEP_BUIL[ecl,DES] <> 0 on ecl)

##! Buildings rehabilitated from class $ecl$ to class $ecl2$
REHAB[ecl,ecl2] = (@year > %baseyear) * (phi_REHAB[ecl,ecl2] * tau_REHAB[ecl]*BUIL[ecl]{-1}) _
                + (@year <= %baseyear) * REHAB[ecl,ecl2]{-1}  if REHAB[ecl,ecl2] <> 0

##! Total new buildings
            NEWBUIL = sum(                 NEWBUIL[ecl] if NEWBUIL[ecl] <> 0 on ecl )

##! Average price of new buildings
PNEWBUIL *  NEWBUIL = sum( PNEWBUIL[ecl] * NEWBUIL[ecl] if NEWBUIL[ecl] <> 0 on ecl )

##! Class $ecl$ rehabilitated buildings
              REHAB[ecl] = sum(                                           REHAB[ecl,ecl2] if REHAB[ecl,ecl2] <> 0 on ecl2) if REHAB[ecl] <> 0

##! Price of class $ecl$ rehabilitated buildings
PREHAB[ecl] * REHAB[ecl] = sum((1 - R_SUB[ecl,ecl2]) * PREHAB[ecl,ecl2] * REHAB[ecl,ecl2] if REHAB[ecl,ecl2] <> 0 on ecl2) if REHAB[ecl] <> 0

##! Total of buildings rehabilitated
          REHAB = sum(                REHAB[ecl] if REHAB[ecl] <> 0 on ecl )

##! Price buildings rehabilitated
PREHAB *  REHAB = sum( PREHAB[ecl]  * REHAB[ecl] if REHAB[ecl] <> 0 on ecl )

#### Energy consumption of buildings

##! Consumption of energy $ceb$ by class $ecl$ buildings expressed in toe
ENER_BUIL[ecl, ceb] = ENERperM2[ecl, ceb] * BUIL[ecl] if ENER_BUIL[ecl, ceb] <> 0

##! Consumption of energy $ceb$ per square meter in class $ecl$ buildings
d(log(ENERperM2[ecl, ceb])) = - eta_ENERperM2[ecl, ceb] * d(log(PCH[ceb])-log(PCH)) * (d(log(PCH[ceb])-log(PCH)) >0) _
                                + d(SUBST_NRJperM2[ecl, ceb]) if ENERperM2[ecl, ceb] <> 0

##! Substitution between energy commodity $ceb$ and the other energy commodities $cebb$ consumed in class $ecl$ buildings
d(SUBST_NRJperM2[ecl, ceb]) = sum(-ES_BUILNRJ[ecl, ceb, cebb] * phi[ecl, cebb]{-1} * d(log(PCH[ceb]) - log(PCH[cebb]))) if  ENERperM2[ecl, ceb] <> 0

##! Share of energy expenditures by $ecl$ class building
phi[ecl, ceb] = (PCH[ceb] * CH_ENER_BUIL[ecl, ceb]) / (sum(PCH[cebb] * CH_ENER_BUIL[ecl, cebb] on cebb)) if phi[ecl, ceb] <> 0

##! Consumption of energy $ceb$ by class $ecl$ buildings (in millions of euros)
d(log(CH_ENER_BUIL[ecl, ceb])) = d(log(ENER_BUIL[ecl, ceb])) if ENER_BUIL[ecl, ceb] <> 0

##! Price of energy $ceb$ in class $ecl$ buildings (euros per kWh)
PENER_BUIL[ecl, ceb] * ENER_BUIL[ecl, ceb] = PCH[ceb] * CH_ENER_BUIL[ecl, ceb] if ENER_BUIL[ecl, ceb] <> 0

##! Consumer price of energy in class $ecl$ buildings  (index)
PCH_ENER_BUIL[ecl] *  CH_ENER_BUIL[ecl] = sum(PCH[ceb] * CH_ENER_BUIL[ecl, ceb] if CH_ENER_BUIL[ecl,ceb] <> 0 on ceb)

##! Consumption of energy in class $ecl$ buildings (in millions of euros)
                      CH_ENER_BUIL[ecl] = sum(           CH_ENER_BUIL[ecl, ceb] if CH_ENER_BUIL[ecl,ceb] <> 0 on ceb)

##! Consumption of energy $ceb$ (in millions of euros)
CH_ENER_BUIL[ceb] =  sum(CH_ENER_BUIL[ecl, ceb] if CH_ENER_BUIL[ecl,ceb] <> 0 on ecl) if CH_ENER_BUIL[ceb] <> 0

##! Energy consumption in class $ecl$ buildings (in toe)
                  ENER_BUIL[ecl] = sum(                       ENER_BUIL[ecl, ceb] if ENER_BUIL[ecl, ceb] <> 0 on ceb)

##! Energy consumption in class $ecl$ buildings (in millions of euros)
PENER_BUIL[ecl] * ENER_BUIL[ecl] = sum(PENER_BUIL[ecl, ceb] * ENER_BUIL[ecl, ceb] if ENER_BUIL[ecl, ceb] <> 0 on ceb)

##! Total energy consumption of buildings (in volume)
                CH_ENER_BUIL =  sum(                     CH_ENER_BUIL[ecl] if CH_ENER_BUIL[ecl] <> 0 on ecl)

##! Total energy consumption of buildings (in value)
PCH_ENER_BUIL * CH_ENER_BUIL =  sum(PCH_ENER_BUIL[ecl] * CH_ENER_BUIL[ecl] if CH_ENER_BUIL[ecl] <> 0 on ecl)

##! Total energy consumption in class $ceb$ buildings (in volume)
             ENER_BUIL[ceb] = sum(                         ENER_BUIL[ecl, ceb] if ENER_BUIL[ecl, ceb] <> 0 on ecl)

##! Total energy consumption in class $ceb$ buildings (in value)
PENER_BUIL[ceb] *  ENER_BUIL[ceb] = sum(PENER_BUIL[ecl, ceb] * ENER_BUIL[ecl, ceb] if ENER_BUIL[ecl, ceb] <> 0 on ecl) if ENER_BUIL[ceb] <> 0

#### Arbitrage in buildings investment decisions

### Level 1: Building rehabilitation decisions

##! Notional rehabilitation rate of a class $ecl$ building
tau_REHAB_N[ecl] = tau_REHAB_MAX[ecl] + (tau_REHAB_MIN[ecl] - tau_REHAB_MAX[ecl]) / (1 + exp(tau[ecl] - sigma[ecl] * Payback_REHAB[ecl])) if REHAB[ecl] <> 0
## It corresponds to the proportion of class $ecl$ building rehabilitated to a higher class. In order to avoid discontinuity, the proportion of rehabilitated building is defined according to a logistic function. A logistic function is defined by 2 regimes, $Yi$ and $Yf$, the switching speed between the 2 regimes, $\sigma$, and point of inflection between the 2 regimes, $\frac{\tau}{\sigma}$. \\
## $Y = (1 - \Phi(X))Yi + \Phi(X))Yf$ with $\Phi(X) = (1-\operatorname{e}^{\tau-\sigma.X})^{-1}$ which is equivalent to: $Y = Yi + \frac{Yf - Yi}{1-\operatorname{e}^{\tau-\sigma.X}}$.The point of inflection corresponds to the case where $\Phi(X) = 1/2$ that is where $X = \tau / \sigma$. This replaces the previous specification that had several drawbacks: \\
## - $\tau^{REHAB_N}_{ecl} = (\Delta(\tau^{REHAB\_trend}_{ecl}) - \nu^{REHAB}_{ecl} . \Delta(\log(Payback^{REHAB}_{ecl})))$ \\ with a max and min value \\
##  - Discontinuity in the first derivative at the max and minimum value \\
##  - Constant elasticity $\tau^{REHAB_N}_{ecl}$ and $Payback^{REHAB}_{ecl}$ whatever the level of $\tau^{REHAB_N}_{ecl}$. \\
##  - Infeasible solution if $Payback^{REHAB}_{ecl} <0$ \\

# Payback_REHAB[ecl] = 1/2 * (1 + Payback_REHAB_r[ecl] + @abs(1 - Payback_REHAB_r[ecl])) if REHAB[ecl] <> 0


##! First derivative of the notional rehabilitation rate of a class $ecl$ building $\tau^{REHAB_N}_{ecl}$ with respect to the log of payback time $Payback^{REHAB}_{ecl}$
nu_REHAB[ecl] = ((tau_REHAB_MAX[ecl] - tau_REHAB_MIN[ecl]) * sigma[ecl] * Payback_REHAB[ecl] * exp(tau[ecl] - sigma[ecl] * Payback_REHAB[ecl])) _
                / (1 + exp(tau[ecl] - sigma[ecl] * Payback_REHAB[ecl]))^2 if REHAB[ecl] <> 0

##! Rehabilitation rate of a class $ecl$ building
tau_REHAB[ecl] = ADJUST0_tau_REHAB * tau_REHAB_N[ecl] + (1-ADJUST0_tau_REHAB) * tau_REHAB[ecl]{-1} if REHAB[ecl] <> 0

##! Payback time of rehabilitating a class $ecl$ building
Payback_REHAB[ecl] = (UC_K_REHAB[ecl]*BUIL_D[ecl] - UC_K[ecl]*BUIL_D[ecl])/(UC_E[ecl] - UC_E_REHAB[ecl]) - 1 if REHAB[ecl] <> 0


### Level 2: Transition between building classes
## The transition matrix from one building class to another is endogenous and is defined according to a discrete choice model. When the gains from rehabilitating a building toward a specific class increases, the share of buildings rehabilitated to this class increases. \\

##! Gain from the rehabilitation from a $ecl$ to a $ecl2$ class building
GAIN_REHAB[ecl,ecl2] = (UC_E[ecl] - UC_E[ecl2]) - UC_K_REHAB[ecl,ecl2] if REHAB[ecl,ecl2] <> 0

##! Utility from rehabilitating a $ecl$ to a $ecl2$ class building
d(U_REHAB[ecl,ecl2])    = (@year > %baseyear) * (RHO_U_GAIN[ecl,ecl2] * d(GAIN_REHAB[ecl,ecl2])/GAIN_REHAB[ecl,ecl2]{-1}) _
                        + (@year <= %baseyear) * 0   if phi_REHAB[ecl,ecl2] <> 0

# Replace specification pr�c�dente. Specification non homog�ne: changer l'unit� mon�taire change les r�sultats!! D'o� *6000 dans la V2? De plus pourquoi un retard? A discuter avec Ga�l et Aur�lien!
# d(U_REHAB[ecl,ecl2]) = (@year > %baseyear) * (RHO_U_GAIN[ecl,ecl2] * d(GAIN_REHAB[ecl,ecl2]{-1}))   if U_REHAB[ecl,ecl2] <> 0
## This utility is a function of the gain from the rehabilitation. For convenience it is calibrated as equal to $\operatorname{log}$ ($\varphi^{REHAB}_{ecl,ecl2})$ at the base year. \\

##! Sum of the exponential utility from rehabilitating a $ecl$ to a $ecl2$ class building
SUM_exp_U_REHAB[ecl] = sum(exp(U_REHAB[ecl,ecl2]) if REHAB[ecl,ecl2] <> 0 on ecl2)     if REHAB[ecl] <> 0

##! Notional share of class $ecl$ buildings rehabilitated to class $ecl2$
d(phi_REHAB_n[ecl,ecl2]) = d(exp(U_REHAB[ecl,ecl2])/SUM_exp_U_REHAB[ecl])  if phi_REHAB[ecl,ecl2] <> 0

##! Share of class $ecl$ buildings rehabilitated to class $ecl2$
phi_REHAB[ecl,ecl2] = ADJUST_phi_REHAB * phi_REHAB_n[ecl,ecl2] + (1 - ADJUST_phi_REHAB) * phi_REHAB[ecl,ecl2]{-1} if phi_REHAB[ecl,ecl2] <> 0
## Notice that $\alpha^{\varphi^{REHAB}}$ is common to every class transition. This ensures that $\sum_{ecl2}    \varphi^{REHAB}_{ecl,ecl2} = 1$. \\

### User costs

##! User cost of a $ecl$ class building after rehabilitation to a more energy efficient class
UC_REHAB[ecl] = UC_K_REHAB[ecl] + UC_E_REHAB[ecl] if REHAB[ecl] <> 0

##! User energy cost of a $ecl$ class building after rehabilitation to a more energy efficient class
UC_E_REHAB[ecl] = sum(phi_REHAB[ecl,ecl2] * UC_E[ecl2] if REHAB[ecl,ecl2] <> 0 on ecl2) if REHAB[ecl] <> 0

##! User capital cost of a $ecl$ class building after rehabilitation to a more energy efficient class
UC_K_REHAB[ecl] = sum(phi_REHAB[ecl,ecl2] * UC_K_REHAB[ecl,ecl2] if REHAB[ecl,ecl2]  <> 0 on ecl2) if REHAB[ecl]  <> 0

##! User capital cost of a $ecl$ class building after rehabilitation to a $ecl2$ class
UC_K_REHAB[ecl,ecl2] =  (1 - R_SUB[ecl,ecl2]) * (PREHAB[ecl,ecl2] / REHAB_D[ecl2] * ( R_CASH_REHAB[ecl] _
                        + (R_LOAN_REHAB[ecl] * R_I_REHAB[ecl]{-1} * LD_REHAB[ecl]) _
                        / ( 1 - ( 1 + R_I_REHAB[ecl]{-1})^( -LD_REHAB[ecl] ) ) )) if REHAB[ecl,ecl2] <> 0

# Replace the previous specification: TO BE DELETED AFTER VERIF ! (NEXT 2 EQUATIONS)
# UC_K_REHABbis[ecl] = PREHAB_delta[ecl] * ( R_CASH_REHAB[ecl] + R_LOAN_REHAB[ecl] * R_I_REHAB[ecl]{-1} * LD_REHAB[ecl] / _
#                                               ( 1 - ( 1 + R_I_REHAB[ecl]{-1})^( -LD_REHAB[ecl] ) ) ) if REHAB[ecl] <> 0
# PREHAB_delta[ecl] = sum( (1 - R_SUB[ecl,ecl2]) * PREHAB[ecl,ecl2] * phi_REHAB[ecl,ecl2] / REHAB_D[ecl2] _
#                        if REHAB[ecl,ecl2]  <> 0 on ecl2) if REHAB[ecl]  <> 0

##! Share of the class $ecl$ building rehabilitation investment paid through a loan
R_LOAN_REHAB[ecl] = 1 - R_CASH_REHAB[ecl] if REHAB[ecl] <> 0

##! Share of the new class $ecl$ building investment paid through a loan
R_LOAN_NewBUIL[ecl] = 1 - R_CASH_NewBUIL[ecl]

##! User cost of a $ecl$ class building
UC[ecl] = UC_K[ecl] + UC_E[ecl]

##! User cost of capital of a class $ecl$ building
UC_K[ecl] = ( PREHAB[ecl,ecl] / BUIL_D[ecl] ) _
            * ( R_CASH[ecl] + (R_LOAN[ecl] * R_I_BUIL[ecl]{-1} * LD[ecl]) _
            / ( 1 - ( 1 + R_I_BUIL[ecl]{-1}) ^( -LD[ecl] ) ) )

## Notice that it depends on $PREHAB_{ecl,ecl}$, the price of rehabilitating (maintaining) a building of $ecl$ in the same class. \\

##! Share of the class $ecl$ building investment paid through a loan
R_LOAN[ecl] = 1 - R_CASH[ecl]

##! User energy cost of a class $ecl$ building
UC_E[ecl]  = PENER_m2[ecl] * ((((1 + GR_PENER_m2_e[ecl]) ^(BUIL_D[ecl])) - 1) _
            / (GR_PENER_m2_e[ecl] * BUIL_D[ecl]) )


# PROVIDE THE DERIVATION OF THIS FORMULA as comment
# Gael a retiré les conditionnalité: risque de division par 0?
# Ancienne spécification:
# UC_E_H01_CC  = PENER_m2_H01_CC  * ( ( GR_PENER_m2_e_H01_CC  = < 1e-05 )  * 1  +   ( GR_PENER_m2_e_H01_CC > 1e-05 )  * ( ( 1  + GR_PENER_m2_e_H01_CC ) ^ ( BUIL_D_H01_CC )  - 1 ) _
#                                 / ( ( GR_PENER_m2_e_H01_CC  + ( GR_PENER_m2_e_H01_CC >= 0 )  * ( GR_PENER_m2_e_H01_CC <= 0 )  * 1e-07 )  * BUIL_D_H01_CC ) )


##! Energy price per square meter paid in class $ecl$ buildings
PENER_m2[ecl]  = PENER_BUIL[ecl] * ENER_BUIL[ecl] / BUIL[ecl]

##! Growth rate of the energy price per square meter paid in class $ecl$ buildings
GR_PENER_m2_e[ecl]  = (@year > %baseyear) * (ADJUST_GR_PENER_m2_e_1 * @pchy( PENER_m2[ecl]{-1} ) + (1-ADJUST_GR_PENER_m2_e_1) * GR_PENER_m2_e[ecl]{-1}) _
                    + (@year <= %baseyear) * GR_PRICES  if PENER_m2[ecl] <> 0

### Debts and expenditures related to housing

##! Debt related to the rehabilitation of a class $ecl$ building (in value)
DEBT_REHAB_Val[ecl] = (@year > %baseyear) * (( 1 - R_RMBS_REHAB[ecl] ) * DEBT_REHAB_Val[ecl]{-1} + R_LOAN_REHAB[ecl] * PREHAB[ecl] * REHAB[ecl]) _
                    + (@year <= %baseyear) * DEBT_REHAB_Val[ecl]{-1} * ( 1 + GR_NOMI ) if REHAB[ecl] <> 0

##! Debt related to the purchase of a new  building of a class $ecl$ (in value)
DEBT_NewB_Val[ecl]  = (@year > %baseyear) * ( ( 1 - R_RMBS_NewBUIL[ecl] ) * DEBT_NewB_Val[ecl]{-1} + R_LOAN_NewBUIL[ecl] * PNewBUIL[ecl] * NewBUIL[ecl] ) _
                    + (@year <= %baseyear) * DEBT_NewB_Val[ecl]{-1} * ( 1 + GR_NOMI )

##! Housing expenditures in class $ecl$ buildings (in value)
EXP_HOUSING_Val[ecl]    = (@year > %baseyear) * ( DEBT_REHAB_Val[ecl]{-1} * (R_I_REHAB[ecl]{-1} + R_RMBS_REHAB[ecl]{-1} ) _
                        + R_CASH_REHAB[ecl] * PREHAB[ecl] * REHAB[ecl] + DEBT_NewB_Val[ecl]{-1} * ( R_I_NewBUIL[ecl]{-1} + R_RMBS_NewBUIL[ecl]{-1} ) _
                        + R_CASH_NewBUIL[ecl] * PNewBUIL[ecl] * NewBUIL[ecl] + PENER_BUIL[ecl] * ENER_BUIL[ecl] ) _
                        + (@year <= %baseyear) * EXP_HOUSING_Val[ecl]{-1} * ( 1 + GR_NOMI )


# Exception_housing.mdl file explicitly
# "EXP_HOUSING_Val[ecl]" =  "EXP^{HOUSING,Val}_{ecl} = \\left( DEBT^{REHAB,Val}_{ecl, t-1} \; \\left( R^{I,REHAB}_{ecl, t-1} + R^{RMBS,REHAB}_{ecl, t-1} \\right) + R^{CASH,REHAB}_{ecl} \; PREHAB_{ecl} \; REHAB_{ecl} + DEBT^{NewB,Val}_{ecl, t-1} \; \\left( R^{I,NewBUIL}_{ecl, t-1} + R^{RMBS,NewBUIL}_{ecl, t-1} \right) + R^{CASH,NewBUIL}_{ecl} \; PNewBUIL_{ecl} \; NewBUIL_{ecl} + PENER^{BUIL}_{ecl} \; ENER^{BUIL}_{ecl} \right)"


##! Housing expenditures (in value)
EXP_HOUSING_Val = sum(EXP_Housing_Val[ecl] if EXP_Housing_Val[ecl] <> 0 on ecl)

##! Expenditures in rehabilitation of buildings (in value)
EXP_REHAB_VAL = PREHAB * REHAB

##! Expenditures in construction of new buildings (in value)

EXP_NEWBUIL_VAL = PNEWBUIL * NEWBUIL



# Verif Housing

# Verif_BUILbis = (BUILbis/BUIL - 1)*100

# Verif_phi_REHAB[ecl] = (1 - (sum(phi_REHAB[ecl,ecl2] if phi_REHAB[ecl,ecl2] <> 0 on ecl2))) * 100  if REHAB[ecl]  <> 0

# Verif_HYBRID = ( (sum(verif_phi_REHAB[ecl] on ecl))^2 + Verif_BUILbis^2 )^(1/2)

# verif_UC_K_REHAB[ecl] = (UC_K_REHABbis[ecl]/UC_K_REHAB[ecl] - 1) * 100 if REHAB[ecl]  <> 0
