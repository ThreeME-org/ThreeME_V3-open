# Redistribution des taxes énérgetiques
REDIS_ENERTD_VAL[ce] = (TenertD[ce] - TenertD_REA[ce])*YQ[ce]
REDIS_ENERTM_VAL[ce] = (TenertM[ce] - TenertM_REA[ce])*M[ce]

REDIS_ENERTD_VAL = sum(REDIS_ENERTD_VAL[ce] on ce)
REDIS_ENERTM_VAL = sum(REDIS_ENERTM_VAL[ce] on ce)
REDIS_ENERT_VAL[ce] = REDIS_ENERTD_VAL[ce] + REDIS_ENERTM_VAL[ce]

REDIS_ENERT_VAL = sum(REDIS_ENERT_VAL[ce] on ce)

# equation 4.12
@over DISPINC_VAL[h] = DISPINC_AI_VAL[h] - IR_VAL[h] - AIC_VAL[h] + REDIS_ENERT_VAL

# Subvention pour les logements (CIDD)
SUB_REHAB_VAL[h, ecl] = sum(R_SUB[h,ecl,ecl2] * PREHAB[h,ecl,ecl2] * REHAB[h,ecl,ecl2] if REHAB[h,ecl,ecl2]  <> 0 on ecl2)
SUB_REHAB_VAL[h] = sum(SUB_REHAB_VAL[h, ecl] on ecl)
SUB_REHAB_VAL = sum(SUB_REHAB_VAL[h] on h)

# Subventions automobile ( Bonus-malus auto + bonus elec)
SUB_AUTO_VAL[h, ecl] = R_SUB_AUTO[h, ecl]*PNewAUTO[h, ecl] * NewAUTO[h, ecl]
SUB_AUTO_VAL[h] = sum(SUB_AUTO_VAL[h,ecl] on ecl)
SUB_AUTO_VAL = sum(SUB_AUTO_VAL[h] on h)

R_SUB_AUTO[h,ecl] = sum(R_SUB_AUTO[h,ecl,ce]*SHARE_AUTO[h,ecl,ce] on ce )

# Integration des subventions et taxes énérgetique dans les dépenses de l'Etat
@over DEP_VAL = CL_S[sp]*L_S[sp]*PROG_L[sp] + R_G{-1}*DEBT_G_VAL{-1} + PRESOC_VAL + SUB_REHAB_VAL + SUB_AUTO_VAL + REDIS_ENERT_VAL +_
          value(E[sp] + MAT[sp] + IY[sp] + IA[sp] + (G - G[sp]) - ((SUB - SUB_01) + (SY - SY_01)))

# Aspect sobriété dans l'automobile et efficacité énérgetique
 # Equation H.4.89 and H.4.90
d(log(km_AUTO[h, ecl, ce])) = (@year > %baseyear)*d(log(km_AUTO[h]*(AUTO[h,ecl]/AUTO[h])*SHARE_AUTO[h,ecl, ce])) if km_AUTO[h, ecl, ce] <> 0
@over KM_AUTO[h,ecl] = sum(km_AUTO[h, ecl, ce] on ce)

AUTO[h,ecl,ce] = AUTO[h,ecl]*SHARE_AUTO[h,ecl,ce]
AUTO[h,ce] = sum(AUTO[h,ecl,ce] on ecl)
AUTO[ce] = sum(AUTO[h,ce] on h)

@over d(log(EXP_AUTO[h, ecl, ce])) = d(log(Km_auto[h, ecl, ce])) if km_AUTO[h, ecl, ce] <> 0  #- eta_AUTO*d(log(PEXP[h, ce])- log(PCH)) - d(log(PROG_AUTO)) if EXP_AUTO[h, ecl, ce] <> 0  # quand on utilise PEXP[ce, h] message d'erreur dans eviews "starting values too far from a solution"

d(log(PEXP[h,ce])) = d(log(PCH[ce]))

EXP_ENER[h] = sum(EXP[ce, h] on ce)
PEXP_ENER[h]*EXP_ENER[h] = sum(PEXP[h, ce]*EXP[ce, h] on ce)

# introduire du covoiturage afin d'arriver à la cible de 22M de voiture en 2050 (scenario ADEME)
 # Equation H.4.85, H.4.86, H.4.87, and H.4.88

@over d(log(Km_traveler_auto[h])) = (@year > %baseyear) * (d(log(Km_traveler[h])) - eta_Km_traveler_auto * d(log (PEXP_22[h]) - log(PCH)))   #sobriété et transport modal
@over d(log(km_AUTO[h]))          = (@year > %baseyear) * (d(log(Km_traveler_auto[h])) - eta_Km_AUTO * d(log (PEXP_22[h]) - log(PCH)))  #organisation urbaine, autopartage, covoiturage


# sobriété, reglementation thermique, substitution interénergie dans logement

@over d(log(ENERperM2[h, ecl, ce])) = -eta_BUIL* d(log(PEXP[ce, h])-log(PCH))*(d(log(PEXP[ce, h])-log(PCH))>0) + d(SUBST_BUIL[h, ecl, ce]) if ENER_BUIL[h, ecl, ce] <> 0

d(SUBST_BUIL[h, ecl, ce]) = sum(-ES_BUILNRJ($ecl, cols_ce(ce, ce_oth)) * d(log(PEXP[ce, h]) - log(PEXP[ce_oth, h])) * _
                           (PEXP[ce_oth, h]{-1}*EXP_BUIL[h, ecl, ce_oth]{-1}) /(PEXP_BUIL[h, ecl]{-1}*EXP_BUIL[h, ecl]{-1}) if ce_oth <> ce on ce_oth in %list_com_E)_
                            if  PEXP[ce, h]*EXP_BUIL[h, ecl, ce] <> 0

#Energy efficiency

@over d(SUBST_K_n[s]) = _
  -ES_KLEM($s, 1) * d(log(CK[s]) - log(CL[s]))   * (L[s]{-1}   * PROG_L[s]{-1} * CL[s]{-1} / (CU_oth[s]{-1} * Y[s]{-1})) _
  -eta_K_E[s] * d(log(CK[s]) - log(PE[s]))   * (E_oth[s]{-1}   * PE[s]{-1}                 / (CU_oth[s]{-1} * Y[s]{-1})) _
  -ES_KLEM($s, 3) * d(log(CK[s]) - log(PMAT[s])) * (MAT[s]{-1} * PMAT[s]{-1}               / (CU_oth[s]{-1} * Y[s]{-1})) _
  if K_n[s] <> 0

@over d(SUBST_E_n[s]) = _
  -eta_K_E[s] * d(log(PE[s]) - log(CK[s]))   * (K[s]{-1}   * CK[s]{-1}                 / (CU_oth[s]{-1} * Y[s]{-1})) _
  -eta_L_E[s] * d(log(PE[s]) - log(CL[s]))   * (L[s]{-1}   * PROG_L[s]{-1} * CL[s]{-1} / (CU_oth[s]{-1} * Y[s]{-1})) _
  -ES_KLEM($s, 6) * d(log(PE[s]) - log(PMAT[s])) * (MAT[s]{-1} * PMAT[s]{-1}               / (CU_oth[s]{-1} * Y[s]{-1})) _
if E_oth_n[s] <> 0

@over d(SUBST_L_n[s]) = _
  -ES_KLEM($s, 1) * d(log(CL[s]) - log(CK[s]))   * (K[s]{-1} * CK[s]{-1}     / (CU_oth[s]{-1} * Y[s]{-1})) _
  -eta_L_E[s] * d(log(CL[s]) - log(PE[s]))   * (E_oth[s]{-1} * PE[s]{-1}     / (CU_oth[s]{-1} * Y[s]{-1})) _
  -ES_KLEM($s, 5) * d(log(CL[s]) - log(PMAT[s])) * (MAT[s]{-1} * PMAT[s]{-1} / (CU_oth[s]{-1} * Y[s]{-1})) _
  if L_n[s] <> 0

#d(eta_K_E[sne]) = 0.8*1.5*(d(log(PE[sne]) - log(CK[sne])))*(d(log(PE[sne]) - log(CK[sne]))>0) + (1 - 0.8)*d(eta_K_E[sne]{-1})

d(eta_K_E_des[sne]) =  2 * (d(log(PE[sne]) - log(CK[sne])))* (d(log(PE[sne]) - log(CK[sne]))>0)
eta_K_E[sne] = 0.5 * eta_K_E_des[sne] + (1 - 0.5) * eta_K_E[sne]{-1} + 0.02 *(eta_K_E_des[sne]{-1} - eta_K_E[sne]{-1})

d(eta_L_E_des[sne]) = 0.1 * (d(log(PE[sne]) - log(CL[sne])))*(d(log(PE[sne]) - log(CL[sne]))>0)
eta_L_E[sne] = 0.5 * eta_L_E_des[sne] + (1 - 0.5)*eta_L_E[sne]{-1}  + 0.02*(eta_L_E_des[sne]{-1} - eta_L_E[sne]{-1})

# E_indus[s]: energy carrier used within sector s for non-energy purposes (ex: petrochemical feedstock)
@over d(log(E_indus_n[s])) = d(log(Y[s])) - d(log(PROG_E_indus[s])) if E_indus_n[s] <> 0

#@over d(log(IA[s])) = ADJUST(1, 1) * d(log(IA[s]{-1})) + ADJUST(1, 2) * d(log(Y_e[s])) + ADJUST(1, 3) * (log(K_n[s]{-1}) - log(K[s]{-1})) +  0* d(SUBST_K[s]) + IMP_BUD[s] * @elem(GDP, %baseyear) / @elem(IA[s], %baseyear) if K[s] <> 0

#  contributio of saving of redistributed carbon tax
@over d(MPS_HH[h]) = household(52, $h) * d(UNR_TOT) +  _
               household(53, $h) * d(R - infl_FR) +  _
               household(54, $h) * d(DEBT_G_VAL / (PGDP * GDP)) + _
                 d(0 * PHI_TCO[h] * TCO_VAL_HH[h] / DISPINC_VAL[h]) + _
                 d(0 * REDIS_ENERT_VAL/DISPINC_VAL[h])

@over d(TIR[h]) = -d(PHI_TCO[h] * TCO_VAL_HH / DISPINC_AI_VAL[h]) + d(TIR_TREND)

# export of energy commodities
@over X[ce] = @elem(X[ce],%baseyear)

## Modal transfert: Transfert from Km_traveler_auto[h] to train Km_traveler[14, h] (Rail) and Km_traveler[15, h] (passenger transport by road)
# km_traveler_auto[h]: Km made with passenger vehicle
# Km_traveler_autobis[h]: km made with passenger vehicle without modal shift
# km_traveler[h] : total km travelled by households (all mode)
# modal_trf_auto[h]: number of km of modal shift

#1) Km_traveler_autobis[h]/Km_traveler_autobis[h]{-1} = km_traveler[h]/km_traveler[h]{-1}
#2) Km_traveler_auto[h]/Km_traveler_auto[h]{-1} = km_traveler[h]/km_traveler[h]{-1} * ((PEXP_22[h]/PCH)/(PEXP_22[h]{-1}/PCH{-1}))^-eta
#3) modal_trf_auto =  Km_traveler_auto[h] - Km_traveler_autobis[h]

d(log(kmtraveler_autobis[h])) = (@year > %baseyear) * d(log(km_traveler[h]))
modal_trf_auto[h] = (@year > %baseyear) * (Km_traveler_auto[h] - Kmtraveler_autobis[h])
d(log(Km_traveler_bis[trav, h])) = (@year > %baseyear) * d(log(Km_traveler[h]))

# train and passenger transport equation becomes:  0.4 is the share of modal transfert to the train and passenger by road / 0.2 is the share due to sobriety  0.2
@over Km_traveler[14, h] = Km_traveler_bis[14,h] - (modal_trf_auto[h] < 0) * 0.4 * modal_trf_auto[h]
@over Km_traveler[15, h] = Km_traveler_bis[15,h] - (modal_trf_auto[h] < 0) * 0.4 * modal_trf_auto[h]
@over d(log(Km_traveler[18, h])) = (@year > %baseyear) * d(log(Km_traveler[h])) - 0.1 * d(log (PEXP_22[h]) - log(PCH)))

# km_traveler verification
Km_traveler_bis[h] = sum(km_traveler[trav, h] on trav) + km_traveler_auto[h]
VERIF_km_traveler[h] = Km_traveler_bis[h] - km_traveler[h]

#energy price signal

ENER_price_signal = (sum(value(ENERT[ce] + OTHT[ce] + SUB[ce]) on ce)+ Rec_TCO_VAL )/ (Q_Mtep_ef * PGDP)

ENER_price_signal[ce] = (value(ENERT[ce] + OTHT[ce] + SUB[ce]) + TCO_VAL_SOU[ce] + TCO_VAL_HH_SOU[ce]) / (Q_Mtep_ef_SOU[ce] * PGDP)

#implicite Carbon tax

Ttco_signal[ce2] = 1000000 * (value(ENERT[ce2]+ OTHT[ce2] + SUB[ce2]) + TCO_VAL_SOU[ce2] + TCO_VAL_HH_SOU[ce2])/ (EMS_SECSOU[ce2] + EMS_HH[ce2])

Ttco_vol_signal[ce2] = Ttco_signal[ce2]/PGDP

Ttco_signal = 1000000*(sum(value(ENERT[ce] + OTHT[ce] + SUB[ce]) on ce)+ Rec_TCO_VAL )/ (EMS_SEC + EMS_HH)

Ttco_vol_signal = Ttco_signal/PGDP

#Equation V1
#Total_EN_price_signal= (PTICC*TICC+PTIPP*TIPP+PTICE*TICE+PTICGN*TICGN+PAUTR_21*AUTR_21+PAUTR_22*AUTR_22+PAUTR_23*AUTR_23+PAUTR_24*AUTR_24-PSUB_21*SUB_21-PSUB_22*SUB_22-PSUB_23*SUB_23-PSUB_24*SUB_24+Rec_TCO_val_21+Rec_TCO_val_22+Rec_TCO_val_24)/(Q_Mtep_ef*defl_PIB)

# transfert from biofuels to biogas (2202) and from biogas(2403) to win (2305)

@over Q_Mtep_ep[22,2202] = Q_Mtep_ef[22,2202] + Q_Mtep_X[22,2202] + Q_Mtep_int[22,2202] + Q_Mtep_Losses[22,2202] - E_Mtep[2403,2202] if Q_Mtep_ep[22,2202] <> 0
@over Q_Mtep_ep[24,2403] = Q_Mtep_ef[24,2403] + Q_Mtep_X[24,2403] + Q_Mtep_int[24,2403] + Q_Mtep_Losses[24,2403] + E_Mtep[2403,2202] - E_Mtep[2305,2403] if Q_Mtep_ep[24,2403] <> 0
@over Q_Mtep_ep[23,2305] = Q_Mtep_ef[23,2305] + Q_Mtep_X[23,2305] + Q_Mtep_int[23,2305] + Q_Mtep_Losses[23,2305] + E_Mtep[2305,2403]  if Q_Mtep_ep[23,2305] <> 0

#production unit cost of energy sectors per MTEP

CU_MTEP[se] = ((CU[se]*Y[se])/Q_mtep_ef[se]) / P #(CU[se]*Y[se])/(PY[se]*Q_mtep_ef[se])
CU_MTEP_PGDP[se] =  (CU[se]*Y[se])/(PGDP*Q_mtep_ef[se])

CU_MTEP_22 = (sum(CU[se22]*Y[se22]/PY[se22] on se22))/Q_mtep_ef_sou_22
CU_MTEP_23 = (sum(CU[se23]*Y[se23]/PY[se23] on se23))/Q_mtep_ef_sou_23
CU_MTEP_24 = (sum(CU[se24]*Y[se24]/PY[se24] on se24))/Q_mtep_ef_sou_24

CU_MTEP_PGDP_22 = (sum(CU[se22]*Y[se22]/PGDP on se22))/Q_mtep_ef_sou_22
CU_MTEP_PGDP_23 = (sum(CU[se23]*Y[se23]/PGDP on se23))/Q_mtep_ef_sou_23
CU_MTEP_PGDP_24 = (sum(CU[se24]*Y[se24]/PGDP on se24))/Q_mtep_ef_sou_24

# production unit cost of energy sectors per Mwh

CU_MWH[se] = CU_MTEP[se]*0.086
CU_MWH_PGDP[se] = CU_MTEP_PGDP[se]*0.086

CU_MWH_22 = CU_MTEP_22*0.086
CU_MWH_23 = CU_MTEP_23*0.086
CU_MWH_24 = CU_MTEP_24*0.086

CU_MWH_PGDP_22 = CU_MTEP_PGDP_22*0.086
CU_MWH_PGDP_23 = CU_MTEP_PGDP_23*0.086
CU_MWH_PGDP_24 = CU_MTEP_PGDP_24*0.086

# energy bill in % of GDP
EGDP_bill[ce] = CH[ce]/GDP
EGDP_bill = (sum(CH[ce] on ce))/GDP

#industrial production in % of GDP

YQGDP_ind = (sum(YQ[sind] on sind))/GDP